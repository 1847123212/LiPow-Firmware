
Lipow.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039c8  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08003a88  08003a88  00013a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003b2c  08003b2c  00013b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003b34  08003b34  00013b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003b38  08003b38  00013b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08003b3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000f30  2000000c  08003b48  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000f3c  08003b48  00020f3c  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001c0be  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003c39  00000000  00000000  0003c0f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000e9b0  00000000  00000000  0003fd2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001320  00000000  00000000  0004e6e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001998  00000000  00000000  0004fa00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000af74  00000000  00000000  00051398  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00007441  00000000  00000000  0005c30c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0006374d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003ce8  00000000  00000000  000637cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003a70 	.word	0x08003a70

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003a70 	.word	0x08003a70

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uhi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5a09      	ldrh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f8f0 	bl	8000418 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__divsi3>:
 8000244:	4603      	mov	r3, r0
 8000246:	430b      	orrs	r3, r1
 8000248:	d47f      	bmi.n	800034a <__divsi3+0x106>
 800024a:	2200      	movs	r2, #0
 800024c:	0843      	lsrs	r3, r0, #1
 800024e:	428b      	cmp	r3, r1
 8000250:	d374      	bcc.n	800033c <__divsi3+0xf8>
 8000252:	0903      	lsrs	r3, r0, #4
 8000254:	428b      	cmp	r3, r1
 8000256:	d35f      	bcc.n	8000318 <__divsi3+0xd4>
 8000258:	0a03      	lsrs	r3, r0, #8
 800025a:	428b      	cmp	r3, r1
 800025c:	d344      	bcc.n	80002e8 <__divsi3+0xa4>
 800025e:	0b03      	lsrs	r3, r0, #12
 8000260:	428b      	cmp	r3, r1
 8000262:	d328      	bcc.n	80002b6 <__divsi3+0x72>
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d30d      	bcc.n	8000286 <__divsi3+0x42>
 800026a:	22ff      	movs	r2, #255	; 0xff
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	ba12      	rev	r2, r2
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__divsi3+0x38>
 8000276:	1212      	asrs	r2, r2, #8
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	d065      	beq.n	8000348 <__divsi3+0x104>
 800027c:	0b03      	lsrs	r3, r0, #12
 800027e:	428b      	cmp	r3, r1
 8000280:	d319      	bcc.n	80002b6 <__divsi3+0x72>
 8000282:	e000      	b.n	8000286 <__divsi3+0x42>
 8000284:	0a09      	lsrs	r1, r1, #8
 8000286:	0bc3      	lsrs	r3, r0, #15
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x4c>
 800028c:	03cb      	lsls	r3, r1, #15
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b83      	lsrs	r3, r0, #14
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x58>
 8000298:	038b      	lsls	r3, r1, #14
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b43      	lsrs	r3, r0, #13
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x64>
 80002a4:	034b      	lsls	r3, r1, #13
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b03      	lsrs	r3, r0, #12
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x70>
 80002b0:	030b      	lsls	r3, r1, #12
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0ac3      	lsrs	r3, r0, #11
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x7c>
 80002bc:	02cb      	lsls	r3, r1, #11
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a83      	lsrs	r3, r0, #10
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x88>
 80002c8:	028b      	lsls	r3, r1, #10
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a43      	lsrs	r3, r0, #9
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x94>
 80002d4:	024b      	lsls	r3, r1, #9
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a03      	lsrs	r3, r0, #8
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0xa0>
 80002e0:	020b      	lsls	r3, r1, #8
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	d2cd      	bcs.n	8000284 <__divsi3+0x40>
 80002e8:	09c3      	lsrs	r3, r0, #7
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xae>
 80002ee:	01cb      	lsls	r3, r1, #7
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0983      	lsrs	r3, r0, #6
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xba>
 80002fa:	018b      	lsls	r3, r1, #6
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0943      	lsrs	r3, r0, #5
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xc6>
 8000306:	014b      	lsls	r3, r1, #5
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0903      	lsrs	r3, r0, #4
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xd2>
 8000312:	010b      	lsls	r3, r1, #4
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	08c3      	lsrs	r3, r0, #3
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xde>
 800031e:	00cb      	lsls	r3, r1, #3
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0883      	lsrs	r3, r0, #2
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xea>
 800032a:	008b      	lsls	r3, r1, #2
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0843      	lsrs	r3, r0, #1
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xf6>
 8000336:	004b      	lsls	r3, r1, #1
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	1a41      	subs	r1, r0, r1
 800033e:	d200      	bcs.n	8000342 <__divsi3+0xfe>
 8000340:	4601      	mov	r1, r0
 8000342:	4152      	adcs	r2, r2
 8000344:	4610      	mov	r0, r2
 8000346:	4770      	bx	lr
 8000348:	e05d      	b.n	8000406 <__divsi3+0x1c2>
 800034a:	0fca      	lsrs	r2, r1, #31
 800034c:	d000      	beq.n	8000350 <__divsi3+0x10c>
 800034e:	4249      	negs	r1, r1
 8000350:	1003      	asrs	r3, r0, #32
 8000352:	d300      	bcc.n	8000356 <__divsi3+0x112>
 8000354:	4240      	negs	r0, r0
 8000356:	4053      	eors	r3, r2
 8000358:	2200      	movs	r2, #0
 800035a:	469c      	mov	ip, r3
 800035c:	0903      	lsrs	r3, r0, #4
 800035e:	428b      	cmp	r3, r1
 8000360:	d32d      	bcc.n	80003be <__divsi3+0x17a>
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d312      	bcc.n	800038e <__divsi3+0x14a>
 8000368:	22fc      	movs	r2, #252	; 0xfc
 800036a:	0189      	lsls	r1, r1, #6
 800036c:	ba12      	rev	r2, r2
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d30c      	bcc.n	800038e <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d308      	bcc.n	800038e <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d304      	bcc.n	800038e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	d03a      	beq.n	80003fe <__divsi3+0x1ba>
 8000388:	1192      	asrs	r2, r2, #6
 800038a:	e000      	b.n	800038e <__divsi3+0x14a>
 800038c:	0989      	lsrs	r1, r1, #6
 800038e:	09c3      	lsrs	r3, r0, #7
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x154>
 8000394:	01cb      	lsls	r3, r1, #7
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0983      	lsrs	r3, r0, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x160>
 80003a0:	018b      	lsls	r3, r1, #6
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0943      	lsrs	r3, r0, #5
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x16c>
 80003ac:	014b      	lsls	r3, r1, #5
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0903      	lsrs	r3, r0, #4
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x178>
 80003b8:	010b      	lsls	r3, r1, #4
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	08c3      	lsrs	r3, r0, #3
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x184>
 80003c4:	00cb      	lsls	r3, r1, #3
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0883      	lsrs	r3, r0, #2
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x190>
 80003d0:	008b      	lsls	r3, r1, #2
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	d2d9      	bcs.n	800038c <__divsi3+0x148>
 80003d8:	0843      	lsrs	r3, r0, #1
 80003da:	428b      	cmp	r3, r1
 80003dc:	d301      	bcc.n	80003e2 <__divsi3+0x19e>
 80003de:	004b      	lsls	r3, r1, #1
 80003e0:	1ac0      	subs	r0, r0, r3
 80003e2:	4152      	adcs	r2, r2
 80003e4:	1a41      	subs	r1, r0, r1
 80003e6:	d200      	bcs.n	80003ea <__divsi3+0x1a6>
 80003e8:	4601      	mov	r1, r0
 80003ea:	4663      	mov	r3, ip
 80003ec:	4152      	adcs	r2, r2
 80003ee:	105b      	asrs	r3, r3, #1
 80003f0:	4610      	mov	r0, r2
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x1b4>
 80003f4:	4240      	negs	r0, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d500      	bpl.n	80003fc <__divsi3+0x1b8>
 80003fa:	4249      	negs	r1, r1
 80003fc:	4770      	bx	lr
 80003fe:	4663      	mov	r3, ip
 8000400:	105b      	asrs	r3, r3, #1
 8000402:	d300      	bcc.n	8000406 <__divsi3+0x1c2>
 8000404:	4240      	negs	r0, r0
 8000406:	b501      	push	{r0, lr}
 8000408:	2000      	movs	r0, #0
 800040a:	f000 f805 	bl	8000418 <__aeabi_idiv0>
 800040e:	bd02      	pop	{r1, pc}

08000410 <__aeabi_idivmod>:
 8000410:	2900      	cmp	r1, #0
 8000412:	d0f8      	beq.n	8000406 <__divsi3+0x1c2>
 8000414:	e716      	b.n	8000244 <__divsi3>
 8000416:	4770      	bx	lr

08000418 <__aeabi_idiv0>:
 8000418:	4770      	bx	lr
 800041a:	46c0      	nop			; (mov r8, r8)

0800041c <__aeabi_uldivmod>:
 800041c:	2b00      	cmp	r3, #0
 800041e:	d111      	bne.n	8000444 <__aeabi_uldivmod+0x28>
 8000420:	2a00      	cmp	r2, #0
 8000422:	d10f      	bne.n	8000444 <__aeabi_uldivmod+0x28>
 8000424:	2900      	cmp	r1, #0
 8000426:	d100      	bne.n	800042a <__aeabi_uldivmod+0xe>
 8000428:	2800      	cmp	r0, #0
 800042a:	d002      	beq.n	8000432 <__aeabi_uldivmod+0x16>
 800042c:	2100      	movs	r1, #0
 800042e:	43c9      	mvns	r1, r1
 8000430:	1c08      	adds	r0, r1, #0
 8000432:	b407      	push	{r0, r1, r2}
 8000434:	4802      	ldr	r0, [pc, #8]	; (8000440 <__aeabi_uldivmod+0x24>)
 8000436:	a102      	add	r1, pc, #8	; (adr r1, 8000440 <__aeabi_uldivmod+0x24>)
 8000438:	1840      	adds	r0, r0, r1
 800043a:	9002      	str	r0, [sp, #8]
 800043c:	bd03      	pop	{r0, r1, pc}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	ffffffd9 	.word	0xffffffd9
 8000444:	b403      	push	{r0, r1}
 8000446:	4668      	mov	r0, sp
 8000448:	b501      	push	{r0, lr}
 800044a:	9802      	ldr	r0, [sp, #8]
 800044c:	f000 f806 	bl	800045c <__udivmoddi4>
 8000450:	9b01      	ldr	r3, [sp, #4]
 8000452:	469e      	mov	lr, r3
 8000454:	b002      	add	sp, #8
 8000456:	bc0c      	pop	{r2, r3}
 8000458:	4770      	bx	lr
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__udivmoddi4>:
 800045c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045e:	4657      	mov	r7, sl
 8000460:	464e      	mov	r6, r9
 8000462:	4645      	mov	r5, r8
 8000464:	46de      	mov	lr, fp
 8000466:	b5e0      	push	{r5, r6, r7, lr}
 8000468:	0004      	movs	r4, r0
 800046a:	b083      	sub	sp, #12
 800046c:	000d      	movs	r5, r1
 800046e:	4692      	mov	sl, r2
 8000470:	4699      	mov	r9, r3
 8000472:	428b      	cmp	r3, r1
 8000474:	d82f      	bhi.n	80004d6 <__udivmoddi4+0x7a>
 8000476:	d02c      	beq.n	80004d2 <__udivmoddi4+0x76>
 8000478:	4649      	mov	r1, r9
 800047a:	4650      	mov	r0, sl
 800047c:	f000 f8ae 	bl	80005dc <__clzdi2>
 8000480:	0029      	movs	r1, r5
 8000482:	0006      	movs	r6, r0
 8000484:	0020      	movs	r0, r4
 8000486:	f000 f8a9 	bl	80005dc <__clzdi2>
 800048a:	1a33      	subs	r3, r6, r0
 800048c:	4698      	mov	r8, r3
 800048e:	3b20      	subs	r3, #32
 8000490:	469b      	mov	fp, r3
 8000492:	d500      	bpl.n	8000496 <__udivmoddi4+0x3a>
 8000494:	e074      	b.n	8000580 <__udivmoddi4+0x124>
 8000496:	4653      	mov	r3, sl
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	001f      	movs	r7, r3
 800049e:	4653      	mov	r3, sl
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	001e      	movs	r6, r3
 80004a6:	42af      	cmp	r7, r5
 80004a8:	d829      	bhi.n	80004fe <__udivmoddi4+0xa2>
 80004aa:	d026      	beq.n	80004fa <__udivmoddi4+0x9e>
 80004ac:	465b      	mov	r3, fp
 80004ae:	1ba4      	subs	r4, r4, r6
 80004b0:	41bd      	sbcs	r5, r7
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	da00      	bge.n	80004b8 <__udivmoddi4+0x5c>
 80004b6:	e079      	b.n	80005ac <__udivmoddi4+0x150>
 80004b8:	2200      	movs	r2, #0
 80004ba:	2300      	movs	r3, #0
 80004bc:	9200      	str	r2, [sp, #0]
 80004be:	9301      	str	r3, [sp, #4]
 80004c0:	2301      	movs	r3, #1
 80004c2:	465a      	mov	r2, fp
 80004c4:	4093      	lsls	r3, r2
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	2301      	movs	r3, #1
 80004ca:	4642      	mov	r2, r8
 80004cc:	4093      	lsls	r3, r2
 80004ce:	9300      	str	r3, [sp, #0]
 80004d0:	e019      	b.n	8000506 <__udivmoddi4+0xaa>
 80004d2:	4282      	cmp	r2, r0
 80004d4:	d9d0      	bls.n	8000478 <__udivmoddi4+0x1c>
 80004d6:	2200      	movs	r2, #0
 80004d8:	2300      	movs	r3, #0
 80004da:	9200      	str	r2, [sp, #0]
 80004dc:	9301      	str	r3, [sp, #4]
 80004de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <__udivmoddi4+0x8c>
 80004e4:	601c      	str	r4, [r3, #0]
 80004e6:	605d      	str	r5, [r3, #4]
 80004e8:	9800      	ldr	r0, [sp, #0]
 80004ea:	9901      	ldr	r1, [sp, #4]
 80004ec:	b003      	add	sp, #12
 80004ee:	bc3c      	pop	{r2, r3, r4, r5}
 80004f0:	4690      	mov	r8, r2
 80004f2:	4699      	mov	r9, r3
 80004f4:	46a2      	mov	sl, r4
 80004f6:	46ab      	mov	fp, r5
 80004f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004fa:	42a3      	cmp	r3, r4
 80004fc:	d9d6      	bls.n	80004ac <__udivmoddi4+0x50>
 80004fe:	2200      	movs	r2, #0
 8000500:	2300      	movs	r3, #0
 8000502:	9200      	str	r2, [sp, #0]
 8000504:	9301      	str	r3, [sp, #4]
 8000506:	4643      	mov	r3, r8
 8000508:	2b00      	cmp	r3, #0
 800050a:	d0e8      	beq.n	80004de <__udivmoddi4+0x82>
 800050c:	07fb      	lsls	r3, r7, #31
 800050e:	0872      	lsrs	r2, r6, #1
 8000510:	431a      	orrs	r2, r3
 8000512:	4646      	mov	r6, r8
 8000514:	087b      	lsrs	r3, r7, #1
 8000516:	e00e      	b.n	8000536 <__udivmoddi4+0xda>
 8000518:	42ab      	cmp	r3, r5
 800051a:	d101      	bne.n	8000520 <__udivmoddi4+0xc4>
 800051c:	42a2      	cmp	r2, r4
 800051e:	d80c      	bhi.n	800053a <__udivmoddi4+0xde>
 8000520:	1aa4      	subs	r4, r4, r2
 8000522:	419d      	sbcs	r5, r3
 8000524:	2001      	movs	r0, #1
 8000526:	1924      	adds	r4, r4, r4
 8000528:	416d      	adcs	r5, r5
 800052a:	2100      	movs	r1, #0
 800052c:	3e01      	subs	r6, #1
 800052e:	1824      	adds	r4, r4, r0
 8000530:	414d      	adcs	r5, r1
 8000532:	2e00      	cmp	r6, #0
 8000534:	d006      	beq.n	8000544 <__udivmoddi4+0xe8>
 8000536:	42ab      	cmp	r3, r5
 8000538:	d9ee      	bls.n	8000518 <__udivmoddi4+0xbc>
 800053a:	3e01      	subs	r6, #1
 800053c:	1924      	adds	r4, r4, r4
 800053e:	416d      	adcs	r5, r5
 8000540:	2e00      	cmp	r6, #0
 8000542:	d1f8      	bne.n	8000536 <__udivmoddi4+0xda>
 8000544:	465b      	mov	r3, fp
 8000546:	9800      	ldr	r0, [sp, #0]
 8000548:	9901      	ldr	r1, [sp, #4]
 800054a:	1900      	adds	r0, r0, r4
 800054c:	4169      	adcs	r1, r5
 800054e:	2b00      	cmp	r3, #0
 8000550:	db22      	blt.n	8000598 <__udivmoddi4+0x13c>
 8000552:	002b      	movs	r3, r5
 8000554:	465a      	mov	r2, fp
 8000556:	40d3      	lsrs	r3, r2
 8000558:	002a      	movs	r2, r5
 800055a:	4644      	mov	r4, r8
 800055c:	40e2      	lsrs	r2, r4
 800055e:	001c      	movs	r4, r3
 8000560:	465b      	mov	r3, fp
 8000562:	0015      	movs	r5, r2
 8000564:	2b00      	cmp	r3, #0
 8000566:	db2c      	blt.n	80005c2 <__udivmoddi4+0x166>
 8000568:	0026      	movs	r6, r4
 800056a:	409e      	lsls	r6, r3
 800056c:	0033      	movs	r3, r6
 800056e:	0026      	movs	r6, r4
 8000570:	4647      	mov	r7, r8
 8000572:	40be      	lsls	r6, r7
 8000574:	0032      	movs	r2, r6
 8000576:	1a80      	subs	r0, r0, r2
 8000578:	4199      	sbcs	r1, r3
 800057a:	9000      	str	r0, [sp, #0]
 800057c:	9101      	str	r1, [sp, #4]
 800057e:	e7ae      	b.n	80004de <__udivmoddi4+0x82>
 8000580:	4642      	mov	r2, r8
 8000582:	2320      	movs	r3, #32
 8000584:	1a9b      	subs	r3, r3, r2
 8000586:	4652      	mov	r2, sl
 8000588:	40da      	lsrs	r2, r3
 800058a:	4641      	mov	r1, r8
 800058c:	0013      	movs	r3, r2
 800058e:	464a      	mov	r2, r9
 8000590:	408a      	lsls	r2, r1
 8000592:	0017      	movs	r7, r2
 8000594:	431f      	orrs	r7, r3
 8000596:	e782      	b.n	800049e <__udivmoddi4+0x42>
 8000598:	4642      	mov	r2, r8
 800059a:	2320      	movs	r3, #32
 800059c:	1a9b      	subs	r3, r3, r2
 800059e:	002a      	movs	r2, r5
 80005a0:	4646      	mov	r6, r8
 80005a2:	409a      	lsls	r2, r3
 80005a4:	0023      	movs	r3, r4
 80005a6:	40f3      	lsrs	r3, r6
 80005a8:	4313      	orrs	r3, r2
 80005aa:	e7d5      	b.n	8000558 <__udivmoddi4+0xfc>
 80005ac:	4642      	mov	r2, r8
 80005ae:	2320      	movs	r3, #32
 80005b0:	2100      	movs	r1, #0
 80005b2:	1a9b      	subs	r3, r3, r2
 80005b4:	2200      	movs	r2, #0
 80005b6:	9100      	str	r1, [sp, #0]
 80005b8:	9201      	str	r2, [sp, #4]
 80005ba:	2201      	movs	r2, #1
 80005bc:	40da      	lsrs	r2, r3
 80005be:	9201      	str	r2, [sp, #4]
 80005c0:	e782      	b.n	80004c8 <__udivmoddi4+0x6c>
 80005c2:	4642      	mov	r2, r8
 80005c4:	2320      	movs	r3, #32
 80005c6:	0026      	movs	r6, r4
 80005c8:	1a9b      	subs	r3, r3, r2
 80005ca:	40de      	lsrs	r6, r3
 80005cc:	002f      	movs	r7, r5
 80005ce:	46b4      	mov	ip, r6
 80005d0:	4097      	lsls	r7, r2
 80005d2:	4666      	mov	r6, ip
 80005d4:	003b      	movs	r3, r7
 80005d6:	4333      	orrs	r3, r6
 80005d8:	e7c9      	b.n	800056e <__udivmoddi4+0x112>
 80005da:	46c0      	nop			; (mov r8, r8)

080005dc <__clzdi2>:
 80005dc:	b510      	push	{r4, lr}
 80005de:	2900      	cmp	r1, #0
 80005e0:	d103      	bne.n	80005ea <__clzdi2+0xe>
 80005e2:	f000 f807 	bl	80005f4 <__clzsi2>
 80005e6:	3020      	adds	r0, #32
 80005e8:	e002      	b.n	80005f0 <__clzdi2+0x14>
 80005ea:	1c08      	adds	r0, r1, #0
 80005ec:	f000 f802 	bl	80005f4 <__clzsi2>
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	46c0      	nop			; (mov r8, r8)

080005f4 <__clzsi2>:
 80005f4:	211c      	movs	r1, #28
 80005f6:	2301      	movs	r3, #1
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0xe>
 80005fe:	0c00      	lsrs	r0, r0, #16
 8000600:	3910      	subs	r1, #16
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	4298      	cmp	r0, r3
 8000606:	d301      	bcc.n	800060c <__clzsi2+0x18>
 8000608:	0a00      	lsrs	r0, r0, #8
 800060a:	3908      	subs	r1, #8
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0x22>
 8000612:	0900      	lsrs	r0, r0, #4
 8000614:	3904      	subs	r1, #4
 8000616:	a202      	add	r2, pc, #8	; (adr r2, 8000620 <__clzsi2+0x2c>)
 8000618:	5c10      	ldrb	r0, [r2, r0]
 800061a:	1840      	adds	r0, r0, r1
 800061c:	4770      	bx	lr
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	02020304 	.word	0x02020304
 8000624:	01010101 	.word	0x01010101
	...

08000630 <HAL_Init>:
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000630:	2380      	movs	r3, #128	; 0x80
 8000632:	4a08      	ldr	r2, [pc, #32]	; (8000654 <HAL_Init+0x24>)
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	6811      	ldr	r1, [r2, #0]
{
 8000638:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800063a:	430b      	orrs	r3, r1
 800063c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800063e:	2000      	movs	r0, #0
 8000640:	f003 f95c 	bl	80038fc <HAL_InitTick>
 8000644:	1e04      	subs	r4, r0, #0
 8000646:	d103      	bne.n	8000650 <HAL_Init+0x20>
    status = HAL_ERROR;
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000648:	f003 f87c 	bl	8003744 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 800064c:	0020      	movs	r0, r4
 800064e:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000650:	2401      	movs	r4, #1
 8000652:	e7fb      	b.n	800064c <HAL_Init+0x1c>
 8000654:	40022000 	.word	0x40022000

08000658 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000658:	4a03      	ldr	r2, [pc, #12]	; (8000668 <HAL_IncTick+0x10>)
 800065a:	4904      	ldr	r1, [pc, #16]	; (800066c <HAL_IncTick+0x14>)
 800065c:	6813      	ldr	r3, [r2, #0]
 800065e:	6809      	ldr	r1, [r1, #0]
 8000660:	185b      	adds	r3, r3, r1
 8000662:	6013      	str	r3, [r2, #0]
}
 8000664:	4770      	bx	lr
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	20000d78 	.word	0x20000d78
 800066c:	20000000 	.word	0x20000000

08000670 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000670:	4b01      	ldr	r3, [pc, #4]	; (8000678 <HAL_GetTick+0x8>)
 8000672:	6818      	ldr	r0, [r3, #0]
}
 8000674:	4770      	bx	lr
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	20000d78 	.word	0x20000d78

0800067c <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800067c:	6880      	ldr	r0, [r0, #8]
 800067e:	0740      	lsls	r0, r0, #29
 8000680:	0fc0      	lsrs	r0, r0, #31
}
 8000682:	4770      	bx	lr

08000684 <HAL_ADC_Init>:
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000684:	2300      	movs	r3, #0
{
 8000686:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000688:	b085      	sub	sp, #20
 800068a:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 800068c:	9303      	str	r3, [sp, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 800068e:	2501      	movs	r5, #1
  if(hadc == NULL)
 8000690:	4298      	cmp	r0, r3
 8000692:	d100      	bne.n	8000696 <HAL_ADC_Init+0x12>
 8000694:	e09a      	b.n	80007cc <HAL_ADC_Init+0x148>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000696:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8000698:	429d      	cmp	r5, r3
 800069a:	d105      	bne.n	80006a8 <HAL_ADC_Init+0x24>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800069c:	f003 f86e 	bl	800377c <HAL_ADC_MspInit>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80006a0:	0023      	movs	r3, r4
 80006a2:	3354      	adds	r3, #84	; 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 80006a4:	65e5      	str	r5, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 80006a6:	701d      	strb	r5, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80006a8:	2380      	movs	r3, #128	; 0x80
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80006aa:	6826      	ldr	r6, [r4, #0]
 80006ac:	055b      	lsls	r3, r3, #21
 80006ae:	68b2      	ldr	r2, [r6, #8]
 80006b0:	421a      	tst	r2, r3
 80006b2:	d100      	bne.n	80006b6 <HAL_ADC_Init+0x32>
 80006b4:	e0d0      	b.n	8000858 <HAL_ADC_Init+0x1d4>
 80006b6:	68b3      	ldr	r3, [r6, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006b8:	2500      	movs	r5, #0
 80006ba:	00db      	lsls	r3, r3, #3
 80006bc:	d400      	bmi.n	80006c0 <HAL_ADC_Init+0x3c>
 80006be:	e0d8      	b.n	8000872 <HAL_ADC_Init+0x1ee>
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80006c0:	0030      	movs	r0, r6
 80006c2:	f7ff ffdb 	bl	800067c <LL_ADC_REG_IsConversionOngoing>
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80006c6:	2310      	movs	r3, #16
 80006c8:	6da6      	ldr	r6, [r4, #88]	; 0x58
 80006ca:	401e      	ands	r6, r3
 80006cc:	d000      	beq.n	80006d0 <HAL_ADC_Init+0x4c>
 80006ce:	e0be      	b.n	800084e <HAL_ADC_Init+0x1ca>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80006d0:	2800      	cmp	r0, #0
 80006d2:	d000      	beq.n	80006d6 <HAL_ADC_Init+0x52>
 80006d4:	e0bb      	b.n	800084e <HAL_ADC_Init+0x1ca>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80006d8:	4a7c      	ldr	r2, [pc, #496]	; (80008cc <HAL_ADC_Init+0x248>)
 80006da:	401a      	ands	r2, r3
 80006dc:	2302      	movs	r3, #2
 80006de:	4313      	orrs	r3, r2
 80006e0:	65a3      	str	r3, [r4, #88]	; 0x58
    /*  - Clock configuration                                                 */
    /*  - ADC resolution                                                      */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80006e2:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80006e4:	689a      	ldr	r2, [r3, #8]
 80006e6:	07d2      	lsls	r2, r2, #31
 80006e8:	d400      	bmi.n	80006ec <HAL_ADC_Init+0x68>
 80006ea:	e0cb      	b.n	8000884 <HAL_ADC_Init+0x200>
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80006ec:	6b27      	ldr	r7, [r4, #48]	; 0x30
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80006ee:	7e21      	ldrb	r1, [r4, #24]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80006f0:	1e78      	subs	r0, r7, #1
 80006f2:	4187      	sbcs	r7, r0
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80006f4:	7e62      	ldrb	r2, [r4, #25]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80006f6:	0338      	lsls	r0, r7, #12
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80006f8:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80006fa:	0389      	lsls	r1, r1, #14
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80006fc:	9001      	str	r0, [sp, #4]
 80006fe:	68e0      	ldr	r0, [r4, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000700:	4311      	orrs	r1, r2
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000702:	7ea2      	ldrb	r2, [r4, #26]
 8000704:	4301      	orrs	r1, r0
                 hadc->Init.DataAlign                                             |
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8000706:	6920      	ldr	r0, [r4, #16]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000708:	4694      	mov	ip, r2
 800070a:	0352      	lsls	r2, r2, #13
 800070c:	4311      	orrs	r1, r2
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 800070e:	2800      	cmp	r0, #0
 8000710:	da66      	bge.n	80007e0 <HAL_ADC_Init+0x15c>
 8000712:	0047      	lsls	r7, r0, #1
 8000714:	087f      	lsrs	r7, r7, #1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000716:	0022      	movs	r2, r4
 8000718:	322c      	adds	r2, #44	; 0x2c
 800071a:	7812      	ldrb	r2, [r2, #0]
 800071c:	0052      	lsls	r2, r2, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 800071e:	430a      	orrs	r2, r1
 8000720:	9901      	ldr	r1, [sp, #4]
 8000722:	430a      	orrs	r2, r1
 8000724:	4317      	orrs	r7, r2
 8000726:	9701      	str	r7, [sp, #4]
    
    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000728:	1c62      	adds	r2, r4, #1
 800072a:	7fd2      	ldrb	r2, [r2, #31]
 800072c:	2a01      	cmp	r2, #1
 800072e:	d107      	bne.n	8000740 <HAL_ADC_Init+0xbc>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000730:	4661      	mov	r1, ip
 8000732:	2900      	cmp	r1, #0
 8000734:	d157      	bne.n	80007e6 <HAL_ADC_Init+0x162>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000736:	2280      	movs	r2, #128	; 0x80
 8000738:	0039      	movs	r1, r7
 800073a:	0252      	lsls	r2, r2, #9
 800073c:	4311      	orrs	r1, r2
 800073e:	9101      	str	r1, [sp, #4]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000740:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000742:	2a00      	cmp	r2, #0
 8000744:	d007      	beq.n	8000756 <HAL_ADC_Init+0xd2>
    {
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000746:	21e0      	movs	r1, #224	; 0xe0
 8000748:	0049      	lsls	r1, r1, #1
 800074a:	400a      	ands	r2, r1
 800074c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800074e:	430a      	orrs	r2, r1
 8000750:	9901      	ldr	r1, [sp, #4]
 8000752:	4311      	orrs	r1, r2
 8000754:	9101      	str	r1, [sp, #4]
    /*  - oversampling enable                                                 */
    /*  - oversampling ratio                                                  */
    /*  - oversampling shift                                                  */
    /*  - oversampling discontinuous mode (triggered mode)                    */
    /*  - trigger frequency mode                                              */
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8000756:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000758:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800075a:	430a      	orrs	r2, r1
                  hadc->Init.Oversampling.RightBitShift |
 800075c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800075e:	430a      	orrs	r2, r1
                  hadc->Init.Oversampling.TriggeredMode |
 8000760:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8000762:	430a      	orrs	r2, r1
                  hadc->Init.TriggerFrequencyMode
                  );
    
    if (hadc->Init.OversamplingMode == ENABLE)
 8000764:	0021      	movs	r1, r4
 8000766:	313c      	adds	r1, #60	; 0x3c
 8000768:	7809      	ldrb	r1, [r1, #0]
 800076a:	2901      	cmp	r1, #1
 800076c:	d100      	bne.n	8000770 <HAL_ADC_Init+0xec>
    {
      SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 800076e:	430a      	orrs	r2, r1
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8000770:	68d9      	ldr	r1, [r3, #12]
 8000772:	4f57      	ldr	r7, [pc, #348]	; (80008d0 <HAL_ADC_Init+0x24c>)
 8000774:	4039      	ands	r1, r7
 8000776:	9f01      	ldr	r7, [sp, #4]
 8000778:	4339      	orrs	r1, r7
 800077a:	60d9      	str	r1, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG     ,
               tmpCFGR1              );
    
    MODIFY_REG(hadc->Instance->CFGR2,
 800077c:	6919      	ldr	r1, [r3, #16]
 800077e:	4f55      	ldr	r7, [pc, #340]	; (80008d4 <HAL_ADC_Init+0x250>)
 8000780:	4039      	ands	r1, r7
 8000782:	430a      	orrs	r2, r1
  MODIFY_REG(ADCx->SMPR,
 8000784:	2107      	movs	r1, #7
 8000786:	2770      	movs	r7, #112	; 0x70
 8000788:	611a      	str	r2, [r3, #16]
 800078a:	695a      	ldr	r2, [r3, #20]
 800078c:	438a      	bics	r2, r1
 800078e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000790:	430a      	orrs	r2, r1
 8000792:	615a      	str	r2, [r3, #20]
 8000794:	695a      	ldr	r2, [r3, #20]
 8000796:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000798:	43ba      	bics	r2, r7
 800079a:	0109      	lsls	r1, r1, #4
 800079c:	430a      	orrs	r2, r1
 800079e:	615a      	str	r2, [r3, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if(hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80007a0:	2800      	cmp	r0, #0
 80007a2:	d12a      	bne.n	80007fa <HAL_ADC_Init+0x176>
      if(ADCGroupRegularSequencerRanksCount == 1UL)
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80007a4:	2210      	movs	r2, #16
 80007a6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80007a8:	4252      	negs	r2, r2
        /*          therefore afer the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80007aa:	430a      	orrs	r2, r1
 80007ac:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80007ae:	4a4a      	ldr	r2, [pc, #296]	; (80008d8 <HAL_ADC_Init+0x254>)
 80007b0:	68db      	ldr	r3, [r3, #12]
 80007b2:	4013      	ands	r3, r2
 80007b4:	9a01      	ldr	r2, [sp, #4]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	d13d      	bne.n	8000836 <HAL_ADC_Init+0x1b2>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80007ba:	2300      	movs	r3, #0
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80007bc:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 80007be:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 80007c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80007c2:	4393      	bics	r3, r2
 80007c4:	001a      	movs	r2, r3
 80007c6:	2301      	movs	r3, #1
 80007c8:	4313      	orrs	r3, r2
 80007ca:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80007cc:	0028      	movs	r0, r5
 80007ce:	b005      	add	sp, #20
 80007d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wait_loop_index--;
 80007d2:	9b03      	ldr	r3, [sp, #12]
 80007d4:	3b01      	subs	r3, #1
 80007d6:	9303      	str	r3, [sp, #12]
    while(wait_loop_index != 0UL)
 80007d8:	9b03      	ldr	r3, [sp, #12]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d1f9      	bne.n	80007d2 <HAL_ADC_Init+0x14e>
 80007de:	e76a      	b.n	80006b6 <HAL_ADC_Init+0x32>
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 80007e0:	2780      	movs	r7, #128	; 0x80
 80007e2:	03bf      	lsls	r7, r7, #14
 80007e4:	e797      	b.n	8000716 <HAL_ADC_Init+0x92>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007e6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80007e8:	468c      	mov	ip, r1
 80007ea:	2120      	movs	r1, #32
 80007ec:	4667      	mov	r7, ip
 80007ee:	4339      	orrs	r1, r7
 80007f0:	65a1      	str	r1, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007f2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80007f4:	430a      	orrs	r2, r1
 80007f6:	65e2      	str	r2, [r4, #92]	; 0x5c
 80007f8:	e7a2      	b.n	8000740 <HAL_ADC_Init+0xbc>
    else if(hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80007fa:	2280      	movs	r2, #128	; 0x80
 80007fc:	0392      	lsls	r2, r2, #14
 80007fe:	4290      	cmp	r0, r2
 8000800:	d1d5      	bne.n	80007ae <HAL_ADC_Init+0x12a>
        if(((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) == ADC_CHSELR_SQ1)
 8000802:	200f      	movs	r0, #15
 8000804:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8000806:	000f      	movs	r7, r1
 8000808:	00b2      	lsls	r2, r6, #2
 800080a:	40d7      	lsrs	r7, r2
 800080c:	003a      	movs	r2, r7
 800080e:	4002      	ands	r2, r0
 8000810:	2a0f      	cmp	r2, #15
 8000812:	d00d      	beq.n	8000830 <HAL_ADC_Init+0x1ac>
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8000814:	3601      	adds	r6, #1
 8000816:	2e08      	cmp	r6, #8
 8000818:	d1f5      	bne.n	8000806 <HAL_ADC_Init+0x182>
        MODIFY_REG(hadc->Instance->CHSELR,
 800081a:	4830      	ldr	r0, [pc, #192]	; (80008dc <HAL_ADC_Init+0x258>)
 800081c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800081e:	69e2      	ldr	r2, [r4, #28]
 8000820:	1812      	adds	r2, r2, r0
 8000822:	201c      	movs	r0, #28
 8000824:	0092      	lsls	r2, r2, #2
 8000826:	4002      	ands	r2, r0
 8000828:	382c      	subs	r0, #44	; 0x2c
 800082a:	4090      	lsls	r0, r2
 800082c:	0002      	movs	r2, r0
 800082e:	e7bc      	b.n	80007aa <HAL_ADC_Init+0x126>
      if(ADCGroupRegularSequencerRanksCount == 1UL)
 8000830:	2e01      	cmp	r6, #1
 8000832:	d0b7      	beq.n	80007a4 <HAL_ADC_Init+0x120>
 8000834:	e7f1      	b.n	800081a <HAL_ADC_Init+0x196>
      ADC_STATE_CLR_SET(hadc->State,
 8000836:	2212      	movs	r2, #18
 8000838:	6da3      	ldr	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800083a:	2501      	movs	r5, #1
      ADC_STATE_CLR_SET(hadc->State,
 800083c:	4393      	bics	r3, r2
 800083e:	001a      	movs	r2, r3
 8000840:	2310      	movs	r3, #16
 8000842:	4313      	orrs	r3, r2
 8000844:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000846:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000848:	432b      	orrs	r3, r5
 800084a:	65e3      	str	r3, [r4, #92]	; 0x5c
 800084c:	e7be      	b.n	80007cc <HAL_ADC_Init+0x148>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800084e:	6da2      	ldr	r2, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8000850:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000852:	4313      	orrs	r3, r2
 8000854:	65a3      	str	r3, [r4, #88]	; 0x58
 8000856:	e7b9      	b.n	80007cc <HAL_ADC_Init+0x148>
  MODIFY_REG(ADCx->CR,
 8000858:	68b2      	ldr	r2, [r6, #8]
 800085a:	4921      	ldr	r1, [pc, #132]	; (80008e0 <HAL_ADC_Init+0x25c>)
 800085c:	400a      	ands	r2, r1
 800085e:	4313      	orrs	r3, r2
 8000860:	60b3      	str	r3, [r6, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000862:	4b20      	ldr	r3, [pc, #128]	; (80008e4 <HAL_ADC_Init+0x260>)
 8000864:	4920      	ldr	r1, [pc, #128]	; (80008e8 <HAL_ADC_Init+0x264>)
 8000866:	6818      	ldr	r0, [r3, #0]
 8000868:	f7ff fc62 	bl	8000130 <__udivsi3>
 800086c:	0040      	lsls	r0, r0, #1
 800086e:	9003      	str	r0, [sp, #12]
    while(wait_loop_index != 0UL)
 8000870:	e7b2      	b.n	80007d8 <HAL_ADC_Init+0x154>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000872:	2310      	movs	r3, #16
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000874:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000876:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8000878:	4313      	orrs	r3, r2
 800087a:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800087c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800087e:	432b      	orrs	r3, r5
 8000880:	65e3      	str	r3, [r4, #92]	; 0x5c
 8000882:	e71d      	b.n	80006c0 <HAL_ADC_Init+0x3c>
      MODIFY_REG(hadc->Instance->CFGR1,
 8000884:	2118      	movs	r1, #24
 8000886:	68da      	ldr	r2, [r3, #12]
 8000888:	438a      	bics	r2, r1
 800088a:	68a1      	ldr	r1, [r4, #8]
 800088c:	430a      	orrs	r2, r1
 800088e:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 8000890:	6861      	ldr	r1, [r4, #4]
 8000892:	691a      	ldr	r2, [r3, #16]
 8000894:	0f88      	lsrs	r0, r1, #30
 8000896:	0092      	lsls	r2, r2, #2
 8000898:	0780      	lsls	r0, r0, #30
 800089a:	0892      	lsrs	r2, r2, #2
 800089c:	4302      	orrs	r2, r0
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800089e:	2080      	movs	r0, #128	; 0x80
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 80008a0:	611a      	str	r2, [r3, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80008a2:	004a      	lsls	r2, r1, #1
 80008a4:	0852      	lsrs	r2, r2, #1
 80008a6:	05c0      	lsls	r0, r0, #23
 80008a8:	4282      	cmp	r2, r0
 80008aa:	d100      	bne.n	80008ae <HAL_ADC_Init+0x22a>
 80008ac:	e71e      	b.n	80006ec <HAL_ADC_Init+0x68>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80008ae:	2280      	movs	r2, #128	; 0x80
 80008b0:	0612      	lsls	r2, r2, #24
 80008b2:	4291      	cmp	r1, r2
 80008b4:	d100      	bne.n	80008b8 <HAL_ADC_Init+0x234>
 80008b6:	e719      	b.n	80006ec <HAL_ADC_Init+0x68>
        MODIFY_REG(ADC1_COMMON->CCR                         ,
 80008b8:	480c      	ldr	r0, [pc, #48]	; (80008ec <HAL_ADC_Init+0x268>)
 80008ba:	4f0d      	ldr	r7, [pc, #52]	; (80008f0 <HAL_ADC_Init+0x26c>)
 80008bc:	6802      	ldr	r2, [r0, #0]
 80008be:	403a      	ands	r2, r7
 80008c0:	27f0      	movs	r7, #240	; 0xf0
 80008c2:	03bf      	lsls	r7, r7, #14
 80008c4:	4039      	ands	r1, r7
 80008c6:	430a      	orrs	r2, r1
 80008c8:	6002      	str	r2, [r0, #0]
 80008ca:	e70f      	b.n	80006ec <HAL_ADC_Init+0x68>
 80008cc:	fffffefd 	.word	0xfffffefd
 80008d0:	fffe0219 	.word	0xfffe0219
 80008d4:	dffffc02 	.word	0xdffffc02
 80008d8:	833fffe7 	.word	0x833fffe7
 80008dc:	3fffffff 	.word	0x3fffffff
 80008e0:	6fffffe8 	.word	0x6fffffe8
 80008e4:	20000008 	.word	0x20000008
 80008e8:	00030d40 	.word	0x00030d40
 80008ec:	40012708 	.word	0x40012708
 80008f0:	ffc3ffff 	.word	0xffc3ffff

080008f4 <HAL_ADC_ConfigChannel>:
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80008f4:	2300      	movs	r3, #0
{
 80008f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008f8:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t wait_loop_index = 0UL;
 80008fa:	9307      	str	r3, [sp, #28]
    
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80008fc:	0003      	movs	r3, r0
 80008fe:	3354      	adds	r3, #84	; 0x54
 8000900:	781a      	ldrb	r2, [r3, #0]
{
 8000902:	0005      	movs	r5, r0
 8000904:	000f      	movs	r7, r1
  __HAL_LOCK(hadc);
 8000906:	2402      	movs	r4, #2
 8000908:	2a01      	cmp	r2, #1
 800090a:	d100      	bne.n	800090e <HAL_ADC_ConfigChannel+0x1a>
 800090c:	e0c1      	b.n	8000a92 <HAL_ADC_ConfigChannel+0x19e>
 800090e:	2601      	movs	r6, #1
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000910:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hadc);
 8000912:	701e      	strb	r6, [r3, #0]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000914:	f7ff feb2 	bl	800067c <LL_ADC_REG_IsConversionOngoing>
 8000918:	9003      	str	r0, [sp, #12]
 800091a:	2800      	cmp	r0, #0
 800091c:	d000      	beq.n	8000920 <HAL_ADC_ConfigChannel+0x2c>
 800091e:	e0ef      	b.n	8000b00 <HAL_ADC_ConfigChannel+0x20c>
 8000920:	2204      	movs	r2, #4
 8000922:	2180      	movs	r1, #128	; 0x80
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if(sConfig->Rank != ADC_RANK_NONE)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4694      	mov	ip, r2
 8000928:	9301      	str	r3, [sp, #4]
 800092a:	9801      	ldr	r0, [sp, #4]
 800092c:	692b      	ldr	r3, [r5, #16]
 800092e:	0609      	lsls	r1, r1, #24
 8000930:	683a      	ldr	r2, [r7, #0]
 8000932:	42a0      	cmp	r0, r4
 8000934:	d100      	bne.n	8000938 <HAL_ADC_ConfigChannel+0x44>
 8000936:	e0b6      	b.n	8000aa6 <HAL_ADC_ConfigChannel+0x1b2>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8000938:	4660      	mov	r0, ip
 800093a:	4383      	bics	r3, r0
 800093c:	428b      	cmp	r3, r1
 800093e:	d113      	bne.n	8000968 <HAL_ADC_ConfigChannel+0x74>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8000940:	6829      	ldr	r1, [r5, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000942:	0353      	lsls	r3, r2, #13
 8000944:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8000946:	0b5b      	lsrs	r3, r3, #13
  MODIFY_REG(ADCx->CHSELR,
 8000948:	4303      	orrs	r3, r0
 800094a:	628b      	str	r3, [r1, #40]	; 0x28
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
        }
      }
      
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800094c:	6828      	ldr	r0, [r5, #0]
  MODIFY_REG(ADCx->SMPR,
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	496e      	ldr	r1, [pc, #440]	; (8000b0c <HAL_ADC_ConfigChannel+0x218>)
 8000952:	6944      	ldr	r4, [r0, #20]
 8000954:	4019      	ands	r1, r3
 8000956:	4061      	eors	r1, r4
 8000958:	0213      	lsls	r3, r2, #8
 800095a:	400b      	ands	r3, r1
 800095c:	4063      	eors	r3, r4
 800095e:	6143      	str	r3, [r0, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000960:	2a00      	cmp	r2, #0
 8000962:	db65      	blt.n	8000a30 <HAL_ADC_ConfigChannel+0x13c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000964:	2400      	movs	r4, #0
 8000966:	e091      	b.n	8000a8c <HAL_ADC_ConfigChannel+0x198>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8000968:	211f      	movs	r1, #31
 800096a:	9b01      	ldr	r3, [sp, #4]
 800096c:	400b      	ands	r3, r1
 800096e:	9302      	str	r3, [sp, #8]
 8000970:	230f      	movs	r3, #15
 8000972:	9802      	ldr	r0, [sp, #8]
 8000974:	4083      	lsls	r3, r0
 8000976:	43db      	mvns	r3, r3
 8000978:	9304      	str	r3, [sp, #16]
 800097a:	9804      	ldr	r0, [sp, #16]
 800097c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800097e:	4003      	ands	r3, r0
 8000980:	9305      	str	r3, [sp, #20]
 8000982:	0350      	lsls	r0, r2, #13
 8000984:	0013      	movs	r3, r2
 8000986:	2800      	cmp	r0, #0
 8000988:	d115      	bne.n	80009b6 <HAL_ADC_ConfigChannel+0xc2>
 800098a:	0e90      	lsrs	r0, r2, #26
 800098c:	4008      	ands	r0, r1
 800098e:	9902      	ldr	r1, [sp, #8]
 8000990:	4088      	lsls	r0, r1
 8000992:	9905      	ldr	r1, [sp, #20]
 8000994:	4308      	orrs	r0, r1
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8000996:	9901      	ldr	r1, [sp, #4]
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8000998:	6628      	str	r0, [r5, #96]	; 0x60
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800099a:	0889      	lsrs	r1, r1, #2
 800099c:	69e8      	ldr	r0, [r5, #28]
 800099e:	3101      	adds	r1, #1
 80009a0:	4281      	cmp	r1, r0
 80009a2:	d8d3      	bhi.n	800094c <HAL_ADC_ConfigChannel+0x58>
  MODIFY_REG(ADCx->CHSELR,
 80009a4:	9c02      	ldr	r4, [sp, #8]
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80009a6:	6829      	ldr	r1, [r5, #0]
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	0f1b      	lsrs	r3, r3, #28
 80009ac:	6a88      	ldr	r0, [r1, #40]	; 0x28
 80009ae:	40a3      	lsls	r3, r4
 80009b0:	9c04      	ldr	r4, [sp, #16]
 80009b2:	4020      	ands	r0, r4
 80009b4:	e7c8      	b.n	8000948 <HAL_ADC_ConfigChannel+0x54>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80009b6:	9803      	ldr	r0, [sp, #12]
 80009b8:	4232      	tst	r2, r6
 80009ba:	d1e8      	bne.n	800098e <HAL_ADC_ConfigChannel+0x9a>
 80009bc:	0030      	movs	r0, r6
 80009be:	4222      	tst	r2, r4
 80009c0:	d1e5      	bne.n	800098e <HAL_ADC_ConfigChannel+0x9a>
 80009c2:	4661      	mov	r1, ip
 80009c4:	0020      	movs	r0, r4
 80009c6:	420a      	tst	r2, r1
 80009c8:	d1e1      	bne.n	800098e <HAL_ADC_ConfigChannel+0x9a>
 80009ca:	2003      	movs	r0, #3
 80009cc:	0711      	lsls	r1, r2, #28
 80009ce:	d4de      	bmi.n	800098e <HAL_ADC_ConfigChannel+0x9a>
 80009d0:	4660      	mov	r0, ip
 80009d2:	06d1      	lsls	r1, r2, #27
 80009d4:	d4db      	bmi.n	800098e <HAL_ADC_ConfigChannel+0x9a>
 80009d6:	2005      	movs	r0, #5
 80009d8:	0691      	lsls	r1, r2, #26
 80009da:	d4d8      	bmi.n	800098e <HAL_ADC_ConfigChannel+0x9a>
 80009dc:	3001      	adds	r0, #1
 80009de:	0651      	lsls	r1, r2, #25
 80009e0:	d4d5      	bmi.n	800098e <HAL_ADC_ConfigChannel+0x9a>
 80009e2:	3001      	adds	r0, #1
 80009e4:	0611      	lsls	r1, r2, #24
 80009e6:	d4d2      	bmi.n	800098e <HAL_ADC_ConfigChannel+0x9a>
 80009e8:	3001      	adds	r0, #1
 80009ea:	05d1      	lsls	r1, r2, #23
 80009ec:	d4cf      	bmi.n	800098e <HAL_ADC_ConfigChannel+0x9a>
 80009ee:	3001      	adds	r0, #1
 80009f0:	0591      	lsls	r1, r2, #22
 80009f2:	d4cc      	bmi.n	800098e <HAL_ADC_ConfigChannel+0x9a>
 80009f4:	3001      	adds	r0, #1
 80009f6:	0551      	lsls	r1, r2, #21
 80009f8:	d4c9      	bmi.n	800098e <HAL_ADC_ConfigChannel+0x9a>
 80009fa:	3001      	adds	r0, #1
 80009fc:	0511      	lsls	r1, r2, #20
 80009fe:	d4c6      	bmi.n	800098e <HAL_ADC_ConfigChannel+0x9a>
 8000a00:	3001      	adds	r0, #1
 8000a02:	04d1      	lsls	r1, r2, #19
 8000a04:	d4c3      	bmi.n	800098e <HAL_ADC_ConfigChannel+0x9a>
 8000a06:	3001      	adds	r0, #1
 8000a08:	0491      	lsls	r1, r2, #18
 8000a0a:	d4c0      	bmi.n	800098e <HAL_ADC_ConfigChannel+0x9a>
 8000a0c:	3001      	adds	r0, #1
 8000a0e:	0451      	lsls	r1, r2, #17
 8000a10:	d4bd      	bmi.n	800098e <HAL_ADC_ConfigChannel+0x9a>
 8000a12:	3001      	adds	r0, #1
 8000a14:	0411      	lsls	r1, r2, #16
 8000a16:	d4ba      	bmi.n	800098e <HAL_ADC_ConfigChannel+0x9a>
 8000a18:	3001      	adds	r0, #1
 8000a1a:	03d1      	lsls	r1, r2, #15
 8000a1c:	d4b7      	bmi.n	800098e <HAL_ADC_ConfigChannel+0x9a>
 8000a1e:	3001      	adds	r0, #1
 8000a20:	0391      	lsls	r1, r2, #14
 8000a22:	d4b4      	bmi.n	800098e <HAL_ADC_ConfigChannel+0x9a>
 8000a24:	2080      	movs	r0, #128	; 0x80
 8000a26:	02c0      	lsls	r0, r0, #11
 8000a28:	4010      	ands	r0, r2
 8000a2a:	d0b0      	beq.n	800098e <HAL_ADC_ConfigChannel+0x9a>
 8000a2c:	2012      	movs	r0, #18
 8000a2e:	e7ae      	b.n	800098e <HAL_ADC_ConfigChannel+0x9a>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000a30:	21e0      	movs	r1, #224	; 0xe0
 8000a32:	4b37      	ldr	r3, [pc, #220]	; (8000b10 <HAL_ADC_ConfigChannel+0x21c>)
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
        
        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8000a34:	4837      	ldr	r0, [pc, #220]	; (8000b14 <HAL_ADC_ConfigChannel+0x220>)
 8000a36:	681c      	ldr	r4, [r3, #0]
 8000a38:	0449      	lsls	r1, r1, #17
 8000a3a:	4021      	ands	r1, r4
 8000a3c:	4282      	cmp	r2, r0
 8000a3e:	d117      	bne.n	8000a70 <HAL_ADC_ConfigChannel+0x17c>
 8000a40:	2080      	movs	r0, #128	; 0x80
 8000a42:	0400      	lsls	r0, r0, #16
 8000a44:	4204      	tst	r4, r0
 8000a46:	d18d      	bne.n	8000964 <HAL_ADC_ConfigChannel+0x70>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	4c33      	ldr	r4, [pc, #204]	; (8000b18 <HAL_ADC_ConfigChannel+0x224>)
 8000a4c:	4022      	ands	r2, r4
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	4302      	orrs	r2, r0
 8000a52:	601a      	str	r2, [r3, #0]
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000a54:	4b31      	ldr	r3, [pc, #196]	; (8000b1c <HAL_ADC_ConfigChannel+0x228>)
 8000a56:	4932      	ldr	r1, [pc, #200]	; (8000b20 <HAL_ADC_ConfigChannel+0x22c>)
 8000a58:	6818      	ldr	r0, [r3, #0]
 8000a5a:	f7ff fb69 	bl	8000130 <__udivsi3>
 8000a5e:	9007      	str	r0, [sp, #28]
          while(wait_loop_index != 0UL)
 8000a60:	9b07      	ldr	r3, [sp, #28]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d100      	bne.n	8000a68 <HAL_ADC_ConfigChannel+0x174>
 8000a66:	e77d      	b.n	8000964 <HAL_ADC_ConfigChannel+0x70>
          {
            wait_loop_index--;
 8000a68:	9b07      	ldr	r3, [sp, #28]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	9307      	str	r3, [sp, #28]
 8000a6e:	e7f7      	b.n	8000a60 <HAL_ADC_ConfigChannel+0x16c>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8000a70:	482c      	ldr	r0, [pc, #176]	; (8000b24 <HAL_ADC_ConfigChannel+0x230>)
 8000a72:	4282      	cmp	r2, r0
 8000a74:	d110      	bne.n	8000a98 <HAL_ADC_ConfigChannel+0x1a4>
 8000a76:	2080      	movs	r0, #128	; 0x80
 8000a78:	0440      	lsls	r0, r0, #17
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8000a7a:	4004      	ands	r4, r0
 8000a7c:	d000      	beq.n	8000a80 <HAL_ADC_ConfigChannel+0x18c>
 8000a7e:	e771      	b.n	8000964 <HAL_ADC_ConfigChannel+0x70>
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	4e25      	ldr	r6, [pc, #148]	; (8000b18 <HAL_ADC_ConfigChannel+0x224>)
 8000a84:	4032      	ands	r2, r6
 8000a86:	430a      	orrs	r2, r1
 8000a88:	4302      	orrs	r2, r0
 8000a8a:	601a      	str	r2, [r3, #0]
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	3554      	adds	r5, #84	; 0x54
 8000a90:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
}
 8000a92:	0020      	movs	r0, r4
 8000a94:	b009      	add	sp, #36	; 0x24
 8000a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8000a98:	4823      	ldr	r0, [pc, #140]	; (8000b28 <HAL_ADC_ConfigChannel+0x234>)
 8000a9a:	4282      	cmp	r2, r0
 8000a9c:	d000      	beq.n	8000aa0 <HAL_ADC_ConfigChannel+0x1ac>
 8000a9e:	e761      	b.n	8000964 <HAL_ADC_ConfigChannel+0x70>
 8000aa0:	2080      	movs	r0, #128	; 0x80
 8000aa2:	03c0      	lsls	r0, r0, #15
 8000aa4:	e7e9      	b.n	8000a7a <HAL_ADC_ConfigChannel+0x186>
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8000aa6:	4660      	mov	r0, ip
 8000aa8:	4383      	bics	r3, r0
 8000aaa:	428b      	cmp	r3, r1
 8000aac:	d105      	bne.n	8000aba <HAL_ADC_ConfigChannel+0x1c6>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8000aae:	6828      	ldr	r0, [r5, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000ab0:	0351      	lsls	r1, r2, #13
 8000ab2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000ab4:	0b49      	lsrs	r1, r1, #13
 8000ab6:	438b      	bics	r3, r1
 8000ab8:	6283      	str	r3, [r0, #40]	; 0x28
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000aba:	2a00      	cmp	r2, #0
 8000abc:	db00      	blt.n	8000ac0 <HAL_ADC_ConfigChannel+0x1cc>
 8000abe:	e751      	b.n	8000964 <HAL_ADC_ConfigChannel+0x70>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000ac0:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <HAL_ADC_ConfigChannel+0x21c>)
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000ac2:	4914      	ldr	r1, [pc, #80]	; (8000b14 <HAL_ADC_ConfigChannel+0x220>)
 8000ac4:	6818      	ldr	r0, [r3, #0]
 8000ac6:	428a      	cmp	r2, r1
 8000ac8:	d108      	bne.n	8000adc <HAL_ADC_ConfigChannel+0x1e8>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
 8000aca:	22a0      	movs	r2, #160	; 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000acc:	681c      	ldr	r4, [r3, #0]
 8000ace:	0452      	lsls	r2, r2, #17
 8000ad0:	4911      	ldr	r1, [pc, #68]	; (8000b18 <HAL_ADC_ConfigChannel+0x224>)
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 8000ad2:	4002      	ands	r2, r0
 8000ad4:	4021      	ands	r1, r4
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	e743      	b.n	8000964 <HAL_ADC_ConfigChannel+0x70>
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8000adc:	4911      	ldr	r1, [pc, #68]	; (8000b24 <HAL_ADC_ConfigChannel+0x230>)
 8000ade:	428a      	cmp	r2, r1
 8000ae0:	d103      	bne.n	8000aea <HAL_ADC_ConfigChannel+0x1f6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 8000ae2:	22c0      	movs	r2, #192	; 0xc0
 8000ae4:	681c      	ldr	r4, [r3, #0]
 8000ae6:	0412      	lsls	r2, r2, #16
 8000ae8:	e7f2      	b.n	8000ad0 <HAL_ADC_ConfigChannel+0x1dc>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8000aea:	490f      	ldr	r1, [pc, #60]	; (8000b28 <HAL_ADC_ConfigChannel+0x234>)
 8000aec:	428a      	cmp	r2, r1
 8000aee:	d000      	beq.n	8000af2 <HAL_ADC_ConfigChannel+0x1fe>
 8000af0:	e738      	b.n	8000964 <HAL_ADC_ConfigChannel+0x70>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
 8000af2:	22c0      	movs	r2, #192	; 0xc0
 8000af4:	0452      	lsls	r2, r2, #17
 8000af6:	6819      	ldr	r1, [r3, #0]
 8000af8:	4002      	ands	r2, r0
 8000afa:	4807      	ldr	r0, [pc, #28]	; (8000b18 <HAL_ADC_ConfigChannel+0x224>)
 8000afc:	4001      	ands	r1, r0
 8000afe:	e7ea      	b.n	8000ad6 <HAL_ADC_ConfigChannel+0x1e2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b00:	2320      	movs	r3, #32
 8000b02:	6daa      	ldr	r2, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8000b04:	0034      	movs	r4, r6
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b06:	4313      	orrs	r3, r2
 8000b08:	65ab      	str	r3, [r5, #88]	; 0x58
 8000b0a:	e7bf      	b.n	8000a8c <HAL_ADC_ConfigChannel+0x198>
 8000b0c:	07ffff00 	.word	0x07ffff00
 8000b10:	40012708 	.word	0x40012708
 8000b14:	b0001000 	.word	0xb0001000
 8000b18:	fe3fffff 	.word	0xfe3fffff
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	00030d40 	.word	0x00030d40
 8000b24:	b8004000 	.word	0xb8004000
 8000b28:	b4002000 	.word	0xb4002000

08000b2c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b2c:	b570      	push	{r4, r5, r6, lr}
 8000b2e:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000b30:	2800      	cmp	r0, #0
 8000b32:	da14      	bge.n	8000b5e <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b34:	230f      	movs	r3, #15
 8000b36:	b2c0      	uxtb	r0, r0
 8000b38:	4003      	ands	r3, r0
 8000b3a:	3b08      	subs	r3, #8
 8000b3c:	4a11      	ldr	r2, [pc, #68]	; (8000b84 <HAL_NVIC_SetPriority+0x58>)
 8000b3e:	089b      	lsrs	r3, r3, #2
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	189b      	adds	r3, r3, r2
 8000b44:	2203      	movs	r2, #3
 8000b46:	4010      	ands	r0, r2
 8000b48:	4090      	lsls	r0, r2
 8000b4a:	32fc      	adds	r2, #252	; 0xfc
 8000b4c:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b4e:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b50:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b52:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b54:	69dc      	ldr	r4, [r3, #28]
 8000b56:	43ac      	bics	r4, r5
 8000b58:	4321      	orrs	r1, r4
 8000b5a:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000b5c:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b5e:	2503      	movs	r5, #3
 8000b60:	0883      	lsrs	r3, r0, #2
 8000b62:	4028      	ands	r0, r5
 8000b64:	40a8      	lsls	r0, r5
 8000b66:	35fc      	adds	r5, #252	; 0xfc
 8000b68:	002e      	movs	r6, r5
 8000b6a:	4a07      	ldr	r2, [pc, #28]	; (8000b88 <HAL_NVIC_SetPriority+0x5c>)
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	189b      	adds	r3, r3, r2
 8000b70:	22c0      	movs	r2, #192	; 0xc0
 8000b72:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b74:	4029      	ands	r1, r5
 8000b76:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b78:	0092      	lsls	r2, r2, #2
 8000b7a:	589c      	ldr	r4, [r3, r2]
 8000b7c:	43b4      	bics	r4, r6
 8000b7e:	4321      	orrs	r1, r4
 8000b80:	5099      	str	r1, [r3, r2]
 8000b82:	e7eb      	b.n	8000b5c <HAL_NVIC_SetPriority+0x30>
 8000b84:	e000ed00 	.word	0xe000ed00
 8000b88:	e000e100 	.word	0xe000e100

08000b8c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000b8c:	231f      	movs	r3, #31
 8000b8e:	4018      	ands	r0, r3
 8000b90:	3b1e      	subs	r3, #30
 8000b92:	4083      	lsls	r3, r0
 8000b94:	4a01      	ldr	r2, [pc, #4]	; (8000b9c <HAL_NVIC_EnableIRQ+0x10>)
 8000b96:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000b98:	4770      	bx	lr
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	e000e100 	.word	0xe000e100

08000ba0 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
  __HAL_LOCK(hdma);
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	1d41      	adds	r1, r0, #5
 8000ba6:	77cb      	strb	r3, [r1, #31]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000ba8:	1d84      	adds	r4, r0, #6
 8000baa:	7fe2      	ldrb	r2, [r4, #31]
 8000bac:	2a02      	cmp	r2, #2
 8000bae:	d003      	beq.n	8000bb8 <HAL_DMA_Abort_IT+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bb0:	2204      	movs	r2, #4
 8000bb2:	63c2      	str	r2, [r0, #60]	; 0x3c
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bb8:	260e      	movs	r6, #14
 8000bba:	6802      	ldr	r2, [r0, #0]
 8000bbc:	6815      	ldr	r5, [r2, #0]
 8000bbe:	43b5      	bics	r5, r6
 8000bc0:	6015      	str	r5, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000bc2:	6815      	ldr	r5, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000bc4:	6c46      	ldr	r6, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 8000bc6:	439d      	bics	r5, r3
 8000bc8:	6015      	str	r5, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000bca:	6832      	ldr	r2, [r6, #0]
 8000bcc:	4d11      	ldr	r5, [pc, #68]	; (8000c14 <HAL_DMA_Abort_IT+0x74>)
 8000bce:	402a      	ands	r2, r5
 8000bd0:	6032      	str	r2, [r6, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8000bd2:	221c      	movs	r2, #28
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000bd4:	46ac      	mov	ip, r5
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8000bd6:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000bd8:	4e0f      	ldr	r6, [pc, #60]	; (8000c18 <HAL_DMA_Abort_IT+0x78>)
 8000bda:	402a      	ands	r2, r5
 8000bdc:	4093      	lsls	r3, r2
 8000bde:	6877      	ldr	r7, [r6, #4]
 8000be0:	433b      	orrs	r3, r7
 8000be2:	6073      	str	r3, [r6, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000be4:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8000be6:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000be8:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8000bea:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d006      	beq.n	8000bfe <HAL_DMA_Abort_IT+0x5e>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000bf0:	4665      	mov	r5, ip
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	402a      	ands	r2, r5
 8000bf6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000bf8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000bfa:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8000bfc:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	77e3      	strb	r3, [r4, #31]
    __HAL_UNLOCK(hdma);
 8000c02:	2400      	movs	r4, #0
    if (hdma->XferAbortCallback != NULL)
 8000c04:	6b82      	ldr	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8000c06:	77cc      	strb	r4, [r1, #31]
  HAL_StatusTypeDef status = HAL_OK;
 8000c08:	0013      	movs	r3, r2
    if (hdma->XferAbortCallback != NULL)
 8000c0a:	42a2      	cmp	r2, r4
 8000c0c:	d0d2      	beq.n	8000bb4 <HAL_DMA_Abort_IT+0x14>
      hdma->XferAbortCallback(hdma);
 8000c0e:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8000c10:	0023      	movs	r3, r4
 8000c12:	e7cf      	b.n	8000bb4 <HAL_DMA_Abort_IT+0x14>
 8000c14:	fffffeff 	.word	0xfffffeff
 8000c18:	40020000 	.word	0x40020000

08000c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c1e:	680b      	ldr	r3, [r1, #0]
{
 8000c20:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c22:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00u;
 8000c24:	2300      	movs	r3, #0
{
 8000c26:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c28:	9a02      	ldr	r2, [sp, #8]
 8000c2a:	40da      	lsrs	r2, r3
 8000c2c:	d101      	bne.n	8000c32 <HAL_GPIO_Init+0x16>
      }
    }

    position++;
  }
}
 8000c2e:	b005      	add	sp, #20
 8000c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c32:	2201      	movs	r2, #1
 8000c34:	409a      	lsls	r2, r3
 8000c36:	9203      	str	r2, [sp, #12]
 8000c38:	9903      	ldr	r1, [sp, #12]
 8000c3a:	9a02      	ldr	r2, [sp, #8]
 8000c3c:	400a      	ands	r2, r1
 8000c3e:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 8000c40:	d100      	bne.n	8000c44 <HAL_GPIO_Init+0x28>
 8000c42:	e085      	b.n	8000d50 <HAL_GPIO_Init+0x134>
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c44:	9a01      	ldr	r2, [sp, #4]
 8000c46:	2110      	movs	r1, #16
 8000c48:	6852      	ldr	r2, [r2, #4]
 8000c4a:	0016      	movs	r6, r2
 8000c4c:	438e      	bics	r6, r1
 8000c4e:	2e02      	cmp	r6, #2
 8000c50:	d10e      	bne.n	8000c70 <HAL_GPIO_Init+0x54>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c52:	2507      	movs	r5, #7
 8000c54:	401d      	ands	r5, r3
 8000c56:	00ad      	lsls	r5, r5, #2
 8000c58:	3901      	subs	r1, #1
 8000c5a:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3u];
 8000c5c:	08dc      	lsrs	r4, r3, #3
 8000c5e:	00a4      	lsls	r4, r4, #2
 8000c60:	1904      	adds	r4, r0, r4
 8000c62:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c64:	438f      	bics	r7, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c66:	9901      	ldr	r1, [sp, #4]
 8000c68:	6909      	ldr	r1, [r1, #16]
 8000c6a:	40a9      	lsls	r1, r5
 8000c6c:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 8000c6e:	6227      	str	r7, [r4, #32]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c70:	2403      	movs	r4, #3
 8000c72:	005f      	lsls	r7, r3, #1
 8000c74:	40bc      	lsls	r4, r7
 8000c76:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8000c78:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c7a:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c7c:	4025      	ands	r5, r4
 8000c7e:	46ac      	mov	ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c80:	2503      	movs	r5, #3
 8000c82:	4015      	ands	r5, r2
 8000c84:	40bd      	lsls	r5, r7
 8000c86:	4661      	mov	r1, ip
 8000c88:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 8000c8a:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c8c:	2e01      	cmp	r6, #1
 8000c8e:	d80f      	bhi.n	8000cb0 <HAL_GPIO_Init+0x94>
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c90:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR;
 8000c92:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c94:	68cd      	ldr	r5, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c96:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c98:	40bd      	lsls	r5, r7
 8000c9a:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8000c9c:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8000c9e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ca0:	9903      	ldr	r1, [sp, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ca2:	0915      	lsrs	r5, r2, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ca4:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	400d      	ands	r5, r1
 8000caa:	409d      	lsls	r5, r3
 8000cac:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8000cae:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8000cb0:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cb2:	9901      	ldr	r1, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000cb4:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cb6:	688d      	ldr	r5, [r1, #8]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cb8:	2180      	movs	r1, #128	; 0x80
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cba:	40bd      	lsls	r5, r7
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cbc:	0549      	lsls	r1, r1, #21
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cbe:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000cc0:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cc2:	420a      	tst	r2, r1
 8000cc4:	d044      	beq.n	8000d50 <HAL_GPIO_Init+0x134>
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000cc6:	2603      	movs	r6, #3
 8000cc8:	240f      	movs	r4, #15
 8000cca:	4922      	ldr	r1, [pc, #136]	; (8000d54 <HAL_GPIO_Init+0x138>)
        temp = EXTI->EXTICR[position >> 2u];
 8000ccc:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000cce:	401e      	ands	r6, r3
 8000cd0:	00ad      	lsls	r5, r5, #2
 8000cd2:	00f6      	lsls	r6, r6, #3
 8000cd4:	186d      	adds	r5, r5, r1
 8000cd6:	40b4      	lsls	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000cd8:	21a0      	movs	r1, #160	; 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 8000cda:	6e2f      	ldr	r7, [r5, #96]	; 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000cdc:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000cde:	43a7      	bics	r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000ce0:	2400      	movs	r4, #0
 8000ce2:	4288      	cmp	r0, r1
 8000ce4:	d00c      	beq.n	8000d00 <HAL_GPIO_Init+0xe4>
 8000ce6:	491c      	ldr	r1, [pc, #112]	; (8000d58 <HAL_GPIO_Init+0x13c>)
 8000ce8:	3401      	adds	r4, #1
 8000cea:	4288      	cmp	r0, r1
 8000cec:	d008      	beq.n	8000d00 <HAL_GPIO_Init+0xe4>
 8000cee:	491b      	ldr	r1, [pc, #108]	; (8000d5c <HAL_GPIO_Init+0x140>)
 8000cf0:	3401      	adds	r4, #1
 8000cf2:	4288      	cmp	r0, r1
 8000cf4:	d004      	beq.n	8000d00 <HAL_GPIO_Init+0xe4>
 8000cf6:	491a      	ldr	r1, [pc, #104]	; (8000d60 <HAL_GPIO_Init+0x144>)
 8000cf8:	3403      	adds	r4, #3
 8000cfa:	4288      	cmp	r0, r1
 8000cfc:	d100      	bne.n	8000d00 <HAL_GPIO_Init+0xe4>
 8000cfe:	3c02      	subs	r4, #2
 8000d00:	40b4      	lsls	r4, r6
        temp &= ~(iocurrent);
 8000d02:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000d04:	433c      	orrs	r4, r7
          temp |= iocurrent;
 8000d06:	000e      	movs	r6, r1
        EXTI->EXTICR[position >> 2u] = temp;
 8000d08:	662c      	str	r4, [r5, #96]	; 0x60
        temp = EXTI->IMR1;
 8000d0a:	4c16      	ldr	r4, [pc, #88]	; (8000d64 <HAL_GPIO_Init+0x148>)
        temp &= ~(iocurrent);
 8000d0c:	43cd      	mvns	r5, r1
        temp = EXTI->IMR1;
 8000d0e:	6fe7      	ldr	r7, [r4, #124]	; 0x7c
          temp |= iocurrent;
 8000d10:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d12:	03d1      	lsls	r1, r2, #15
 8000d14:	d401      	bmi.n	8000d1a <HAL_GPIO_Init+0xfe>
        temp &= ~(iocurrent);
 8000d16:	003e      	movs	r6, r7
 8000d18:	402e      	ands	r6, r5
        EXTI->IMR1 = temp;
 8000d1a:	67e6      	str	r6, [r4, #124]	; 0x7c
        temp = EXTI->EMR1;
 8000d1c:	4e12      	ldr	r6, [pc, #72]	; (8000d68 <HAL_GPIO_Init+0x14c>)
          temp |= iocurrent;
 8000d1e:	9f00      	ldr	r7, [sp, #0]
        temp = EXTI->EMR1;
 8000d20:	6ff4      	ldr	r4, [r6, #124]	; 0x7c
          temp |= iocurrent;
 8000d22:	4327      	orrs	r7, r4
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d24:	0391      	lsls	r1, r2, #14
 8000d26:	d401      	bmi.n	8000d2c <HAL_GPIO_Init+0x110>
        temp &= ~(iocurrent);
 8000d28:	402c      	ands	r4, r5
 8000d2a:	0027      	movs	r7, r4
        EXTI->EMR1 = temp;
 8000d2c:	4c09      	ldr	r4, [pc, #36]	; (8000d54 <HAL_GPIO_Init+0x138>)
 8000d2e:	67f7      	str	r7, [r6, #124]	; 0x7c
        temp = EXTI->RTSR1;
 8000d30:	6827      	ldr	r7, [r4, #0]
          temp |= iocurrent;
 8000d32:	9e00      	ldr	r6, [sp, #0]
 8000d34:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d36:	02d1      	lsls	r1, r2, #11
 8000d38:	d401      	bmi.n	8000d3e <HAL_GPIO_Init+0x122>
        temp &= ~(iocurrent);
 8000d3a:	003e      	movs	r6, r7
 8000d3c:	402e      	ands	r6, r5
        EXTI->RTSR1 = temp;
 8000d3e:	6026      	str	r6, [r4, #0]
        temp = EXTI->FTSR1;
 8000d40:	6866      	ldr	r6, [r4, #4]
          temp |= iocurrent;
 8000d42:	9f00      	ldr	r7, [sp, #0]
 8000d44:	4337      	orrs	r7, r6
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d46:	0292      	lsls	r2, r2, #10
 8000d48:	d401      	bmi.n	8000d4e <HAL_GPIO_Init+0x132>
        temp &= ~(iocurrent);
 8000d4a:	402e      	ands	r6, r5
 8000d4c:	0037      	movs	r7, r6
        EXTI->FTSR1 = temp;
 8000d4e:	6067      	str	r7, [r4, #4]
    position++;
 8000d50:	3301      	adds	r3, #1
 8000d52:	e769      	b.n	8000c28 <HAL_GPIO_Init+0xc>
 8000d54:	40021800 	.word	0x40021800
 8000d58:	50000400 	.word	0x50000400
 8000d5c:	50000800 	.word	0x50000800
 8000d60:	50000c00 	.word	0x50000c00
 8000d64:	40021804 	.word	0x40021804
 8000d68:	40021808 	.word	0x40021808

08000d6c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d6c:	2a00      	cmp	r2, #0
 8000d6e:	d001      	beq.n	8000d74 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d70:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d72:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d74:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000d76:	e7fc      	b.n	8000d72 <HAL_GPIO_WritePin+0x6>

08000d78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d78:	b570      	push	{r4, r5, r6, lr}
 8000d7a:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 8000d7c:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8000d7e:	2c00      	cmp	r4, #0
 8000d80:	d03f      	beq.n	8000e02 <HAL_I2C_Init+0x8a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d82:	0025      	movs	r5, r4
 8000d84:	3541      	adds	r5, #65	; 0x41
 8000d86:	782b      	ldrb	r3, [r5, #0]
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d105      	bne.n	8000d9a <HAL_I2C_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d8e:	0022      	movs	r2, r4
 8000d90:	3240      	adds	r2, #64	; 0x40
 8000d92:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000d94:	0020      	movs	r0, r4
 8000d96:	f002 fd1f 	bl	80037d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d9a:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d9c:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d9e:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8000da0:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000da2:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	68a6      	ldr	r6, [r4, #8]
 8000da8:	438a      	bics	r2, r1
 8000daa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000dac:	6861      	ldr	r1, [r4, #4]
 8000dae:	4a1a      	ldr	r2, [pc, #104]	; (8000e18 <HAL_I2C_Init+0xa0>)
 8000db0:	400a      	ands	r2, r1
 8000db2:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000db4:	6899      	ldr	r1, [r3, #8]
 8000db6:	4a19      	ldr	r2, [pc, #100]	; (8000e1c <HAL_I2C_Init+0xa4>)
 8000db8:	4011      	ands	r1, r2
 8000dba:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000dbc:	2801      	cmp	r0, #1
 8000dbe:	d121      	bne.n	8000e04 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000dc0:	2180      	movs	r1, #128	; 0x80
 8000dc2:	0209      	lsls	r1, r1, #8
 8000dc4:	4331      	orrs	r1, r6
 8000dc6:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000dc8:	6858      	ldr	r0, [r3, #4]
 8000dca:	4915      	ldr	r1, [pc, #84]	; (8000e20 <HAL_I2C_Init+0xa8>)
 8000dcc:	4301      	orrs	r1, r0
 8000dce:	6059      	str	r1, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000dd0:	68d9      	ldr	r1, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000dd2:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000dd4:	400a      	ands	r2, r1
 8000dd6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000dd8:	6961      	ldr	r1, [r4, #20]
 8000dda:	6922      	ldr	r2, [r4, #16]
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	69a1      	ldr	r1, [r4, #24]
 8000de0:	0209      	lsls	r1, r1, #8
 8000de2:	430a      	orrs	r2, r1
 8000de4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000de6:	6a21      	ldr	r1, [r4, #32]
 8000de8:	69e2      	ldr	r2, [r4, #28]
 8000dea:	430a      	orrs	r2, r1
 8000dec:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000dee:	2201      	movs	r2, #1
 8000df0:	6819      	ldr	r1, [r3, #0]
 8000df2:	430a      	orrs	r2, r1
 8000df4:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000df6:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000df8:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000dfa:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000dfc:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dfe:	3442      	adds	r4, #66	; 0x42
 8000e00:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8000e02:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e04:	2184      	movs	r1, #132	; 0x84
 8000e06:	0209      	lsls	r1, r1, #8
 8000e08:	4331      	orrs	r1, r6
 8000e0a:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e0c:	2802      	cmp	r0, #2
 8000e0e:	d1db      	bne.n	8000dc8 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000e10:	2180      	movs	r1, #128	; 0x80
 8000e12:	0109      	lsls	r1, r1, #4
 8000e14:	6059      	str	r1, [r3, #4]
 8000e16:	e7d7      	b.n	8000dc8 <HAL_I2C_Init+0x50>
 8000e18:	f0ffffff 	.word	0xf0ffffff
 8000e1c:	ffff7fff 	.word	0xffff7fff
 8000e20:	02008000 	.word	0x02008000

08000e24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000e24:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e26:	0004      	movs	r4, r0
 8000e28:	3441      	adds	r4, #65	; 0x41
 8000e2a:	7822      	ldrb	r2, [r4, #0]
{
 8000e2c:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e2e:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000e30:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e32:	2a20      	cmp	r2, #32
 8000e34:	d118      	bne.n	8000e68 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 8000e36:	001d      	movs	r5, r3
 8000e38:	3540      	adds	r5, #64	; 0x40
 8000e3a:	782e      	ldrb	r6, [r5, #0]
 8000e3c:	2e01      	cmp	r6, #1
 8000e3e:	d013      	beq.n	8000e68 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8000e40:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000e42:	3022      	adds	r0, #34	; 0x22
 8000e44:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000e46:	681e      	ldr	r6, [r3, #0]
 8000e48:	3823      	subs	r0, #35	; 0x23
 8000e4a:	4386      	bics	r6, r0
 8000e4c:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000e4e:	681e      	ldr	r6, [r3, #0]
 8000e50:	4f06      	ldr	r7, [pc, #24]	; (8000e6c <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8000e52:	403e      	ands	r6, r7
 8000e54:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8000e56:	681e      	ldr	r6, [r3, #0]
 8000e58:	4331      	orrs	r1, r6
 8000e5a:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000e5c:	6819      	ldr	r1, [r3, #0]
 8000e5e:	4308      	orrs	r0, r1
 8000e60:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000e62:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000e64:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8000e66:	7028      	strb	r0, [r5, #0]
  }
}
 8000e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	ffffefff 	.word	0xffffefff

08000e70 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000e70:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e72:	0005      	movs	r5, r0
 8000e74:	3541      	adds	r5, #65	; 0x41
 8000e76:	782a      	ldrb	r2, [r5, #0]
{
 8000e78:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e7a:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000e7c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e7e:	2a20      	cmp	r2, #32
 8000e80:	d117      	bne.n	8000eb2 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8000e82:	001c      	movs	r4, r3
 8000e84:	3440      	adds	r4, #64	; 0x40
 8000e86:	7826      	ldrb	r6, [r4, #0]
 8000e88:	2e01      	cmp	r6, #1
 8000e8a:	d012      	beq.n	8000eb2 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8000e8c:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000e8e:	3022      	adds	r0, #34	; 0x22
 8000e90:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000e92:	681e      	ldr	r6, [r3, #0]
 8000e94:	3823      	subs	r0, #35	; 0x23
 8000e96:	4386      	bics	r6, r0
 8000e98:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8000e9a:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8000e9c:	4f05      	ldr	r7, [pc, #20]	; (8000eb4 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8000e9e:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8000ea0:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8000ea2:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8000ea4:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000ea6:	6819      	ldr	r1, [r3, #0]
 8000ea8:	4308      	orrs	r0, r1
 8000eaa:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000eac:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000eae:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8000eb0:	7020      	strb	r0, [r4, #0]
  }
}
 8000eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eb4:	fffff0ff 	.word	0xfffff0ff

08000eb8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000eb8:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000eba:	4c10      	ldr	r4, [pc, #64]	; (8000efc <HAL_PWREx_ControlVoltageScaling+0x44>)
 8000ebc:	4910      	ldr	r1, [pc, #64]	; (8000f00 <HAL_PWREx_ControlVoltageScaling+0x48>)
 8000ebe:	6823      	ldr	r3, [r4, #0]
{
 8000ec0:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000ec2:	400b      	ands	r3, r1
 8000ec4:	4303      	orrs	r3, r0
 8000ec6:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ec8:	2380      	movs	r3, #128	; 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000eca:	2000      	movs	r0, #0
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d10c      	bne.n	8000eec <HAL_PWREx_ControlVoltageScaling+0x34>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8000ed4:	490c      	ldr	r1, [pc, #48]	; (8000f08 <HAL_PWREx_ControlVoltageScaling+0x50>)
 8000ed6:	6818      	ldr	r0, [r3, #0]
 8000ed8:	2306      	movs	r3, #6
 8000eda:	4358      	muls	r0, r3
 8000edc:	f7ff f928 	bl	8000130 <__udivsi3>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ee0:	2280      	movs	r2, #128	; 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8000ee2:	1c43      	adds	r3, r0, #1
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ee4:	00d2      	lsls	r2, r2, #3
 8000ee6:	6960      	ldr	r0, [r4, #20]
 8000ee8:	4010      	ands	r0, r2
 8000eea:	d100      	bne.n	8000eee <HAL_PWREx_ControlVoltageScaling+0x36>
}
 8000eec:	bd10      	pop	{r4, pc}
      if(wait_loop_index != 0U)
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_PWREx_ControlVoltageScaling+0x3e>
        wait_loop_index--;
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	e7f7      	b.n	8000ee6 <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 8000ef6:	2003      	movs	r0, #3
 8000ef8:	e7f8      	b.n	8000eec <HAL_PWREx_ControlVoltageScaling+0x34>
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	40007000 	.word	0x40007000
 8000f00:	fffff9ff 	.word	0xfffff9ff
 8000f04:	20000008 	.word	0x20000008
 8000f08:	000f4240 	.word	0x000f4240

08000f0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f0e:	0004      	movs	r4, r0
 8000f10:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f12:	2800      	cmp	r0, #0
 8000f14:	d102      	bne.n	8000f1c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000f16:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000f18:	b005      	add	sp, #20
 8000f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f1c:	6803      	ldr	r3, [r0, #0]
 8000f1e:	07db      	lsls	r3, r3, #31
 8000f20:	d410      	bmi.n	8000f44 <HAL_RCC_OscConfig+0x38>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f22:	6823      	ldr	r3, [r4, #0]
 8000f24:	079b      	lsls	r3, r3, #30
 8000f26:	d45c      	bmi.n	8000fe2 <HAL_RCC_OscConfig+0xd6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f28:	6823      	ldr	r3, [r4, #0]
 8000f2a:	071b      	lsls	r3, r3, #28
 8000f2c:	d500      	bpl.n	8000f30 <HAL_RCC_OscConfig+0x24>
 8000f2e:	e0c1      	b.n	80010b4 <HAL_RCC_OscConfig+0x1a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f30:	6823      	ldr	r3, [r4, #0]
 8000f32:	075b      	lsls	r3, r3, #29
 8000f34:	d500      	bpl.n	8000f38 <HAL_RCC_OscConfig+0x2c>
 8000f36:	e0f3      	b.n	8001120 <HAL_RCC_OscConfig+0x214>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000f38:	69e1      	ldr	r1, [r4, #28]
 8000f3a:	2900      	cmp	r1, #0
 8000f3c:	d000      	beq.n	8000f40 <HAL_RCC_OscConfig+0x34>
 8000f3e:	e171      	b.n	8001224 <HAL_RCC_OscConfig+0x318>
  return HAL_OK;
 8000f40:	2000      	movs	r0, #0
 8000f42:	e7e9      	b.n	8000f18 <HAL_RCC_OscConfig+0xc>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f44:	2238      	movs	r2, #56	; 0x38
 8000f46:	4dac      	ldr	r5, [pc, #688]	; (80011f8 <HAL_RCC_OscConfig+0x2ec>)
 8000f48:	68ab      	ldr	r3, [r5, #8]
 8000f4a:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f4c:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000f4e:	2b10      	cmp	r3, #16
 8000f50:	d109      	bne.n	8000f66 <HAL_RCC_OscConfig+0x5a>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f52:	43d2      	mvns	r2, r2
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000f54:	0793      	lsls	r3, r2, #30
 8000f56:	d108      	bne.n	8000f6a <HAL_RCC_OscConfig+0x5e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f58:	682b      	ldr	r3, [r5, #0]
 8000f5a:	039b      	lsls	r3, r3, #14
 8000f5c:	d5e1      	bpl.n	8000f22 <HAL_RCC_OscConfig+0x16>
 8000f5e:	6863      	ldr	r3, [r4, #4]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d1de      	bne.n	8000f22 <HAL_RCC_OscConfig+0x16>
 8000f64:	e7d7      	b.n	8000f16 <HAL_RCC_OscConfig+0xa>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000f66:	2b08      	cmp	r3, #8
 8000f68:	d0f6      	beq.n	8000f58 <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f6a:	2280      	movs	r2, #128	; 0x80
 8000f6c:	6863      	ldr	r3, [r4, #4]
 8000f6e:	0252      	lsls	r2, r2, #9
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d111      	bne.n	8000f98 <HAL_RCC_OscConfig+0x8c>
 8000f74:	682a      	ldr	r2, [r5, #0]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f7a:	f7ff fb79 	bl	8000670 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f7e:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000f80:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f82:	02b6      	lsls	r6, r6, #10
 8000f84:	682b      	ldr	r3, [r5, #0]
 8000f86:	4233      	tst	r3, r6
 8000f88:	d1cb      	bne.n	8000f22 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f8a:	f7ff fb71 	bl	8000670 <HAL_GetTick>
 8000f8e:	1bc0      	subs	r0, r0, r7
 8000f90:	2864      	cmp	r0, #100	; 0x64
 8000f92:	d9f7      	bls.n	8000f84 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8000f94:	2003      	movs	r0, #3
 8000f96:	e7bf      	b.n	8000f18 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f98:	21a0      	movs	r1, #160	; 0xa0
 8000f9a:	02c9      	lsls	r1, r1, #11
 8000f9c:	428b      	cmp	r3, r1
 8000f9e:	d108      	bne.n	8000fb2 <HAL_RCC_OscConfig+0xa6>
 8000fa0:	2380      	movs	r3, #128	; 0x80
 8000fa2:	6829      	ldr	r1, [r5, #0]
 8000fa4:	02db      	lsls	r3, r3, #11
 8000fa6:	430b      	orrs	r3, r1
 8000fa8:	602b      	str	r3, [r5, #0]
 8000faa:	682b      	ldr	r3, [r5, #0]
 8000fac:	431a      	orrs	r2, r3
 8000fae:	602a      	str	r2, [r5, #0]
 8000fb0:	e7e3      	b.n	8000f7a <HAL_RCC_OscConfig+0x6e>
 8000fb2:	682a      	ldr	r2, [r5, #0]
 8000fb4:	4991      	ldr	r1, [pc, #580]	; (80011fc <HAL_RCC_OscConfig+0x2f0>)
 8000fb6:	400a      	ands	r2, r1
 8000fb8:	602a      	str	r2, [r5, #0]
 8000fba:	682a      	ldr	r2, [r5, #0]
 8000fbc:	4990      	ldr	r1, [pc, #576]	; (8001200 <HAL_RCC_OscConfig+0x2f4>)
 8000fbe:	400a      	ands	r2, r1
 8000fc0:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d1d9      	bne.n	8000f7a <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8000fc6:	f7ff fb53 	bl	8000670 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fca:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000fcc:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fce:	02b6      	lsls	r6, r6, #10
 8000fd0:	682b      	ldr	r3, [r5, #0]
 8000fd2:	4233      	tst	r3, r6
 8000fd4:	d0a5      	beq.n	8000f22 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fd6:	f7ff fb4b 	bl	8000670 <HAL_GetTick>
 8000fda:	1bc0      	subs	r0, r0, r7
 8000fdc:	2864      	cmp	r0, #100	; 0x64
 8000fde:	d9f7      	bls.n	8000fd0 <HAL_RCC_OscConfig+0xc4>
 8000fe0:	e7d8      	b.n	8000f94 <HAL_RCC_OscConfig+0x88>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fe2:	2338      	movs	r3, #56	; 0x38
 8000fe4:	4d84      	ldr	r5, [pc, #528]	; (80011f8 <HAL_RCC_OscConfig+0x2ec>)
 8000fe6:	68aa      	ldr	r2, [r5, #8]
 8000fe8:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fea:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000fec:	2b10      	cmp	r3, #16
 8000fee:	d128      	bne.n	8001042 <HAL_RCC_OscConfig+0x136>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ff0:	2103      	movs	r1, #3
 8000ff2:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000ff4:	2a02      	cmp	r2, #2
 8000ff6:	d126      	bne.n	8001046 <HAL_RCC_OscConfig+0x13a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ff8:	682a      	ldr	r2, [r5, #0]
 8000ffa:	0552      	lsls	r2, r2, #21
 8000ffc:	d503      	bpl.n	8001006 <HAL_RCC_OscConfig+0xfa>
 8000ffe:	68e2      	ldr	r2, [r4, #12]
 8001000:	2a00      	cmp	r2, #0
 8001002:	d100      	bne.n	8001006 <HAL_RCC_OscConfig+0xfa>
 8001004:	e787      	b.n	8000f16 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001006:	6869      	ldr	r1, [r5, #4]
 8001008:	6962      	ldr	r2, [r4, #20]
 800100a:	487e      	ldr	r0, [pc, #504]	; (8001204 <HAL_RCC_OscConfig+0x2f8>)
 800100c:	0212      	lsls	r2, r2, #8
 800100e:	4001      	ands	r1, r0
 8001010:	430a      	orrs	r2, r1
 8001012:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001014:	2b00      	cmp	r3, #0
 8001016:	d10d      	bne.n	8001034 <HAL_RCC_OscConfig+0x128>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001018:	682b      	ldr	r3, [r5, #0]
 800101a:	4a7b      	ldr	r2, [pc, #492]	; (8001208 <HAL_RCC_OscConfig+0x2fc>)
 800101c:	4013      	ands	r3, r2
 800101e:	6922      	ldr	r2, [r4, #16]
 8001020:	4313      	orrs	r3, r2
 8001022:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001024:	682b      	ldr	r3, [r5, #0]
 8001026:	4a79      	ldr	r2, [pc, #484]	; (800120c <HAL_RCC_OscConfig+0x300>)
 8001028:	049b      	lsls	r3, r3, #18
 800102a:	0f5b      	lsrs	r3, r3, #29
 800102c:	40da      	lsrs	r2, r3
 800102e:	0013      	movs	r3, r2
 8001030:	4a77      	ldr	r2, [pc, #476]	; (8001210 <HAL_RCC_OscConfig+0x304>)
 8001032:	6013      	str	r3, [r2, #0]
        if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001034:	2000      	movs	r0, #0
 8001036:	f002 fc61 	bl	80038fc <HAL_InitTick>
 800103a:	2800      	cmp	r0, #0
 800103c:	d100      	bne.n	8001040 <HAL_RCC_OscConfig+0x134>
 800103e:	e773      	b.n	8000f28 <HAL_RCC_OscConfig+0x1c>
 8001040:	e769      	b.n	8000f16 <HAL_RCC_OscConfig+0xa>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001042:	2b00      	cmp	r3, #0
 8001044:	d0d8      	beq.n	8000ff8 <HAL_RCC_OscConfig+0xec>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001046:	68e3      	ldr	r3, [r4, #12]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d020      	beq.n	800108e <HAL_RCC_OscConfig+0x182>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800104c:	682b      	ldr	r3, [r5, #0]
 800104e:	4a6e      	ldr	r2, [pc, #440]	; (8001208 <HAL_RCC_OscConfig+0x2fc>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001050:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001052:	4013      	ands	r3, r2
 8001054:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001056:	00f6      	lsls	r6, r6, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001058:	4313      	orrs	r3, r2
 800105a:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 800105c:	2380      	movs	r3, #128	; 0x80
 800105e:	682a      	ldr	r2, [r5, #0]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	4313      	orrs	r3, r2
 8001064:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001066:	f7ff fb03 	bl	8000670 <HAL_GetTick>
 800106a:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800106c:	682b      	ldr	r3, [r5, #0]
 800106e:	4233      	tst	r3, r6
 8001070:	d007      	beq.n	8001082 <HAL_RCC_OscConfig+0x176>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001072:	686a      	ldr	r2, [r5, #4]
 8001074:	6963      	ldr	r3, [r4, #20]
 8001076:	4963      	ldr	r1, [pc, #396]	; (8001204 <HAL_RCC_OscConfig+0x2f8>)
 8001078:	021b      	lsls	r3, r3, #8
 800107a:	400a      	ands	r2, r1
 800107c:	4313      	orrs	r3, r2
 800107e:	606b      	str	r3, [r5, #4]
 8001080:	e752      	b.n	8000f28 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001082:	f7ff faf5 	bl	8000670 <HAL_GetTick>
 8001086:	1bc0      	subs	r0, r0, r7
 8001088:	2802      	cmp	r0, #2
 800108a:	d9ef      	bls.n	800106c <HAL_RCC_OscConfig+0x160>
 800108c:	e782      	b.n	8000f94 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 800108e:	682b      	ldr	r3, [r5, #0]
 8001090:	4a60      	ldr	r2, [pc, #384]	; (8001214 <HAL_RCC_OscConfig+0x308>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001092:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 8001094:	4013      	ands	r3, r2
 8001096:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001098:	f7ff faea 	bl	8000670 <HAL_GetTick>
 800109c:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800109e:	00f6      	lsls	r6, r6, #3
 80010a0:	682b      	ldr	r3, [r5, #0]
 80010a2:	4233      	tst	r3, r6
 80010a4:	d100      	bne.n	80010a8 <HAL_RCC_OscConfig+0x19c>
 80010a6:	e73f      	b.n	8000f28 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010a8:	f7ff fae2 	bl	8000670 <HAL_GetTick>
 80010ac:	1bc0      	subs	r0, r0, r7
 80010ae:	2802      	cmp	r0, #2
 80010b0:	d9f6      	bls.n	80010a0 <HAL_RCC_OscConfig+0x194>
 80010b2:	e76f      	b.n	8000f94 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80010b4:	2138      	movs	r1, #56	; 0x38
 80010b6:	4b50      	ldr	r3, [pc, #320]	; (80011f8 <HAL_RCC_OscConfig+0x2ec>)
 80010b8:	689a      	ldr	r2, [r3, #8]
 80010ba:	001d      	movs	r5, r3
 80010bc:	400a      	ands	r2, r1
 80010be:	2a18      	cmp	r2, #24
 80010c0:	d108      	bne.n	80010d4 <HAL_RCC_OscConfig+0x1c8>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80010c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c4:	079b      	lsls	r3, r3, #30
 80010c6:	d400      	bmi.n	80010ca <HAL_RCC_OscConfig+0x1be>
 80010c8:	e732      	b.n	8000f30 <HAL_RCC_OscConfig+0x24>
 80010ca:	69a3      	ldr	r3, [r4, #24]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d000      	beq.n	80010d2 <HAL_RCC_OscConfig+0x1c6>
 80010d0:	e72e      	b.n	8000f30 <HAL_RCC_OscConfig+0x24>
 80010d2:	e720      	b.n	8000f16 <HAL_RCC_OscConfig+0xa>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010d4:	69a2      	ldr	r2, [r4, #24]
 80010d6:	2301      	movs	r3, #1
 80010d8:	2a00      	cmp	r2, #0
 80010da:	d010      	beq.n	80010fe <HAL_RCC_OscConfig+0x1f2>
        __HAL_RCC_LSI_ENABLE();
 80010dc:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010de:	2602      	movs	r6, #2
        __HAL_RCC_LSI_ENABLE();
 80010e0:	4313      	orrs	r3, r2
 80010e2:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 80010e4:	f7ff fac4 	bl	8000670 <HAL_GetTick>
 80010e8:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010ea:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80010ec:	4233      	tst	r3, r6
 80010ee:	d000      	beq.n	80010f2 <HAL_RCC_OscConfig+0x1e6>
 80010f0:	e71e      	b.n	8000f30 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010f2:	f7ff fabd 	bl	8000670 <HAL_GetTick>
 80010f6:	1bc0      	subs	r0, r0, r7
 80010f8:	2802      	cmp	r0, #2
 80010fa:	d9f6      	bls.n	80010ea <HAL_RCC_OscConfig+0x1de>
 80010fc:	e74a      	b.n	8000f94 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_LSI_DISABLE();
 80010fe:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001100:	2602      	movs	r6, #2
        __HAL_RCC_LSI_DISABLE();
 8001102:	439a      	bics	r2, r3
 8001104:	662a      	str	r2, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001106:	f7ff fab3 	bl	8000670 <HAL_GetTick>
 800110a:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800110c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800110e:	4233      	tst	r3, r6
 8001110:	d100      	bne.n	8001114 <HAL_RCC_OscConfig+0x208>
 8001112:	e70d      	b.n	8000f30 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001114:	f7ff faac 	bl	8000670 <HAL_GetTick>
 8001118:	1bc0      	subs	r0, r0, r7
 800111a:	2802      	cmp	r0, #2
 800111c:	d9f6      	bls.n	800110c <HAL_RCC_OscConfig+0x200>
 800111e:	e739      	b.n	8000f94 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001120:	2138      	movs	r1, #56	; 0x38
 8001122:	4b35      	ldr	r3, [pc, #212]	; (80011f8 <HAL_RCC_OscConfig+0x2ec>)
 8001124:	689a      	ldr	r2, [r3, #8]
 8001126:	001d      	movs	r5, r3
 8001128:	400a      	ands	r2, r1
 800112a:	2a20      	cmp	r2, #32
 800112c:	d108      	bne.n	8001140 <HAL_RCC_OscConfig+0x234>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800112e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001130:	079b      	lsls	r3, r3, #30
 8001132:	d400      	bmi.n	8001136 <HAL_RCC_OscConfig+0x22a>
 8001134:	e700      	b.n	8000f38 <HAL_RCC_OscConfig+0x2c>
 8001136:	68a3      	ldr	r3, [r4, #8]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d000      	beq.n	800113e <HAL_RCC_OscConfig+0x232>
 800113c:	e6fc      	b.n	8000f38 <HAL_RCC_OscConfig+0x2c>
 800113e:	e6ea      	b.n	8000f16 <HAL_RCC_OscConfig+0xa>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001140:	2280      	movs	r2, #128	; 0x80
 8001142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001144:	0552      	lsls	r2, r2, #21
 8001146:	4213      	tst	r3, r2
 8001148:	d100      	bne.n	800114c <HAL_RCC_OscConfig+0x240>
 800114a:	e0c3      	b.n	80012d4 <HAL_RCC_OscConfig+0x3c8>
    FlagStatus       pwrclkchanged = RESET;
 800114c:	2300      	movs	r3, #0
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800114e:	2780      	movs	r7, #128	; 0x80
 8001150:	4e31      	ldr	r6, [pc, #196]	; (8001218 <HAL_RCC_OscConfig+0x30c>)
    FlagStatus       pwrclkchanged = RESET;
 8001152:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001154:	6833      	ldr	r3, [r6, #0]
 8001156:	007f      	lsls	r7, r7, #1
 8001158:	423b      	tst	r3, r7
 800115a:	d015      	beq.n	8001188 <HAL_RCC_OscConfig+0x27c>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800115c:	68a3      	ldr	r3, [r4, #8]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d122      	bne.n	80011a8 <HAL_RCC_OscConfig+0x29c>
 8001162:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001164:	4313      	orrs	r3, r2
 8001166:	65eb      	str	r3, [r5, #92]	; 0x5c
        tickstart = HAL_GetTick();
 8001168:	f7ff fa82 	bl	8000670 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800116c:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 800116e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001170:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8001172:	423b      	tst	r3, r7
 8001174:	d038      	beq.n	80011e8 <HAL_RCC_OscConfig+0x2dc>
      if (pwrclkchanged == SET)
 8001176:	9b00      	ldr	r3, [sp, #0]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d000      	beq.n	800117e <HAL_RCC_OscConfig+0x272>
 800117c:	e6dc      	b.n	8000f38 <HAL_RCC_OscConfig+0x2c>
        __HAL_RCC_PWR_CLK_DISABLE();
 800117e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001180:	4a26      	ldr	r2, [pc, #152]	; (800121c <HAL_RCC_OscConfig+0x310>)
 8001182:	4013      	ands	r3, r2
 8001184:	63eb      	str	r3, [r5, #60]	; 0x3c
 8001186:	e6d7      	b.n	8000f38 <HAL_RCC_OscConfig+0x2c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001188:	6833      	ldr	r3, [r6, #0]
 800118a:	433b      	orrs	r3, r7
 800118c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800118e:	f7ff fa6f 	bl	8000670 <HAL_GetTick>
 8001192:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001194:	6833      	ldr	r3, [r6, #0]
 8001196:	423b      	tst	r3, r7
 8001198:	d1e0      	bne.n	800115c <HAL_RCC_OscConfig+0x250>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800119a:	f7ff fa69 	bl	8000670 <HAL_GetTick>
 800119e:	9b01      	ldr	r3, [sp, #4]
 80011a0:	1ac0      	subs	r0, r0, r3
 80011a2:	2802      	cmp	r0, #2
 80011a4:	d9f6      	bls.n	8001194 <HAL_RCC_OscConfig+0x288>
 80011a6:	e6f5      	b.n	8000f94 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011a8:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80011aa:	2b05      	cmp	r3, #5
 80011ac:	d105      	bne.n	80011ba <HAL_RCC_OscConfig+0x2ae>
 80011ae:	3b01      	subs	r3, #1
 80011b0:	4313      	orrs	r3, r2
 80011b2:	65eb      	str	r3, [r5, #92]	; 0x5c
 80011b4:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80011b6:	2301      	movs	r3, #1
 80011b8:	e7d4      	b.n	8001164 <HAL_RCC_OscConfig+0x258>
 80011ba:	2101      	movs	r1, #1
 80011bc:	438a      	bics	r2, r1
 80011be:	65ea      	str	r2, [r5, #92]	; 0x5c
 80011c0:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80011c2:	3103      	adds	r1, #3
 80011c4:	438a      	bics	r2, r1
 80011c6:	65ea      	str	r2, [r5, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1cd      	bne.n	8001168 <HAL_RCC_OscConfig+0x25c>
        tickstart = HAL_GetTick();
 80011cc:	f7ff fa50 	bl	8000670 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011d0:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 80011d2:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011d4:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80011d6:	423b      	tst	r3, r7
 80011d8:	d0cd      	beq.n	8001176 <HAL_RCC_OscConfig+0x26a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011da:	f7ff fa49 	bl	8000670 <HAL_GetTick>
 80011de:	4b10      	ldr	r3, [pc, #64]	; (8001220 <HAL_RCC_OscConfig+0x314>)
 80011e0:	1b80      	subs	r0, r0, r6
 80011e2:	4298      	cmp	r0, r3
 80011e4:	d9f6      	bls.n	80011d4 <HAL_RCC_OscConfig+0x2c8>
 80011e6:	e6d5      	b.n	8000f94 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011e8:	f7ff fa42 	bl	8000670 <HAL_GetTick>
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <HAL_RCC_OscConfig+0x314>)
 80011ee:	1b80      	subs	r0, r0, r6
 80011f0:	4298      	cmp	r0, r3
 80011f2:	d9bd      	bls.n	8001170 <HAL_RCC_OscConfig+0x264>
 80011f4:	e6ce      	b.n	8000f94 <HAL_RCC_OscConfig+0x88>
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	40021000 	.word	0x40021000
 80011fc:	fffeffff 	.word	0xfffeffff
 8001200:	fffbffff 	.word	0xfffbffff
 8001204:	ffff80ff 	.word	0xffff80ff
 8001208:	ffffc7ff 	.word	0xffffc7ff
 800120c:	00f42400 	.word	0x00f42400
 8001210:	20000008 	.word	0x20000008
 8001214:	fffffeff 	.word	0xfffffeff
 8001218:	40007000 	.word	0x40007000
 800121c:	efffffff 	.word	0xefffffff
 8001220:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001224:	2238      	movs	r2, #56	; 0x38
 8001226:	4d30      	ldr	r5, [pc, #192]	; (80012e8 <HAL_RCC_OscConfig+0x3dc>)
 8001228:	68ab      	ldr	r3, [r5, #8]
 800122a:	4013      	ands	r3, r2
 800122c:	2b10      	cmp	r3, #16
 800122e:	d100      	bne.n	8001232 <HAL_RCC_OscConfig+0x326>
 8001230:	e671      	b.n	8000f16 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_PLL_DISABLE();
 8001232:	682b      	ldr	r3, [r5, #0]
 8001234:	4a2d      	ldr	r2, [pc, #180]	; (80012ec <HAL_RCC_OscConfig+0x3e0>)
 8001236:	4013      	ands	r3, r2
 8001238:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800123a:	2902      	cmp	r1, #2
 800123c:	d133      	bne.n	80012a6 <HAL_RCC_OscConfig+0x39a>
        tickstart = HAL_GetTick();
 800123e:	f7ff fa17 	bl	8000670 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001242:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8001244:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001246:	04b6      	lsls	r6, r6, #18
 8001248:	682b      	ldr	r3, [r5, #0]
 800124a:	4233      	tst	r3, r6
 800124c:	d125      	bne.n	800129a <HAL_RCC_OscConfig+0x38e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800124e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001250:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001252:	4313      	orrs	r3, r2
 8001254:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001256:	4313      	orrs	r3, r2
 8001258:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800125a:	4313      	orrs	r3, r2
 800125c:	6a22      	ldr	r2, [r4, #32]
 800125e:	4313      	orrs	r3, r2
 8001260:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001262:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001264:	0212      	lsls	r2, r2, #8
 8001266:	4313      	orrs	r3, r2
 8001268:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800126a:	2380      	movs	r3, #128	; 0x80
 800126c:	682a      	ldr	r2, [r5, #0]
 800126e:	045b      	lsls	r3, r3, #17
 8001270:	4313      	orrs	r3, r2
 8001272:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001274:	2380      	movs	r3, #128	; 0x80
 8001276:	68ea      	ldr	r2, [r5, #12]
 8001278:	055b      	lsls	r3, r3, #21
 800127a:	4313      	orrs	r3, r2
 800127c:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 800127e:	f7ff f9f7 	bl	8000670 <HAL_GetTick>
 8001282:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001284:	04a4      	lsls	r4, r4, #18
 8001286:	682b      	ldr	r3, [r5, #0]
 8001288:	4223      	tst	r3, r4
 800128a:	d000      	beq.n	800128e <HAL_RCC_OscConfig+0x382>
 800128c:	e658      	b.n	8000f40 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800128e:	f7ff f9ef 	bl	8000670 <HAL_GetTick>
 8001292:	1b80      	subs	r0, r0, r6
 8001294:	2802      	cmp	r0, #2
 8001296:	d9f6      	bls.n	8001286 <HAL_RCC_OscConfig+0x37a>
 8001298:	e67c      	b.n	8000f94 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800129a:	f7ff f9e9 	bl	8000670 <HAL_GetTick>
 800129e:	1bc0      	subs	r0, r0, r7
 80012a0:	2802      	cmp	r0, #2
 80012a2:	d9d1      	bls.n	8001248 <HAL_RCC_OscConfig+0x33c>
 80012a4:	e676      	b.n	8000f94 <HAL_RCC_OscConfig+0x88>
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80012a6:	2203      	movs	r2, #3
 80012a8:	68eb      	ldr	r3, [r5, #12]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012aa:	2480      	movs	r4, #128	; 0x80
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80012ac:	4393      	bics	r3, r2
 80012ae:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80012b0:	68eb      	ldr	r3, [r5, #12]
 80012b2:	4a0f      	ldr	r2, [pc, #60]	; (80012f0 <HAL_RCC_OscConfig+0x3e4>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012b4:	04a4      	lsls	r4, r4, #18
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80012b6:	4013      	ands	r3, r2
 80012b8:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80012ba:	f7ff f9d9 	bl	8000670 <HAL_GetTick>
 80012be:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012c0:	682b      	ldr	r3, [r5, #0]
 80012c2:	4223      	tst	r3, r4
 80012c4:	d100      	bne.n	80012c8 <HAL_RCC_OscConfig+0x3bc>
 80012c6:	e63b      	b.n	8000f40 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012c8:	f7ff f9d2 	bl	8000670 <HAL_GetTick>
 80012cc:	1b80      	subs	r0, r0, r6
 80012ce:	2802      	cmp	r0, #2
 80012d0:	d9f6      	bls.n	80012c0 <HAL_RCC_OscConfig+0x3b4>
 80012d2:	e65f      	b.n	8000f94 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_PWR_CLK_ENABLE();
 80012d4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80012d6:	4313      	orrs	r3, r2
 80012d8:	63eb      	str	r3, [r5, #60]	; 0x3c
 80012da:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80012dc:	4013      	ands	r3, r2
 80012de:	9303      	str	r3, [sp, #12]
 80012e0:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e733      	b.n	800114e <HAL_RCC_OscConfig+0x242>
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	40021000 	.word	0x40021000
 80012ec:	feffffff 	.word	0xfeffffff
 80012f0:	eefeffff 	.word	0xeefeffff

080012f4 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80012f4:	2338      	movs	r3, #56	; 0x38
 80012f6:	4a1f      	ldr	r2, [pc, #124]	; (8001374 <HAL_RCC_GetSysClockFreq+0x80>)
{
 80012f8:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80012fa:	6891      	ldr	r1, [r2, #8]
 80012fc:	0014      	movs	r4, r2
 80012fe:	4219      	tst	r1, r3
 8001300:	d108      	bne.n	8001314 <HAL_RCC_GetSysClockFreq+0x20>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001302:	2101      	movs	r1, #1
 8001304:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001306:	481c      	ldr	r0, [pc, #112]	; (8001378 <HAL_RCC_GetSysClockFreq+0x84>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001308:	049b      	lsls	r3, r3, #18
 800130a:	0f5b      	lsrs	r3, r3, #29
 800130c:	4099      	lsls	r1, r3
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
        break;
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
    sysclockfreq = pllvco / pllr;
 800130e:	f7fe ff0f 	bl	8000130 <__udivsi3>
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8001312:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001314:	6891      	ldr	r1, [r2, #8]
 8001316:	4019      	ands	r1, r3
 8001318:	2908      	cmp	r1, #8
 800131a:	d025      	beq.n	8001368 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800131c:	6891      	ldr	r1, [r2, #8]
 800131e:	4019      	ands	r1, r3
 8001320:	2910      	cmp	r1, #16
 8001322:	d115      	bne.n	8001350 <HAL_RCC_GetSysClockFreq+0x5c>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001324:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001326:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001328:	43db      	mvns	r3, r3
 800132a:	227f      	movs	r2, #127	; 0x7f
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800132c:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800132e:	0649      	lsls	r1, r1, #25
 8001330:	0f49      	lsrs	r1, r1, #29
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001332:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001334:	3101      	adds	r1, #1
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001336:	4015      	ands	r5, r2
    switch (pllsource)
 8001338:	079b      	lsls	r3, r3, #30
 800133a:	d107      	bne.n	800134c <HAL_RCC_GetSysClockFreq+0x58>
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800133c:	480f      	ldr	r0, [pc, #60]	; (800137c <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800133e:	f7fe fef7 	bl	8000130 <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001342:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001344:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001346:	0f49      	lsrs	r1, r1, #29
 8001348:	3101      	adds	r1, #1
 800134a:	e7e0      	b.n	800130e <HAL_RCC_GetSysClockFreq+0x1a>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800134c:	480a      	ldr	r0, [pc, #40]	; (8001378 <HAL_RCC_GetSysClockFreq+0x84>)
 800134e:	e7f6      	b.n	800133e <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001350:	6891      	ldr	r1, [r2, #8]
 8001352:	4019      	ands	r1, r3
 8001354:	2920      	cmp	r1, #32
 8001356:	d009      	beq.n	800136c <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001358:	6892      	ldr	r2, [r2, #8]
    sysclockfreq = 0U;
 800135a:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800135c:	4013      	ands	r3, r2
 800135e:	2b18      	cmp	r3, #24
 8001360:	d1d7      	bne.n	8001312 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSI_VALUE;
 8001362:	20fa      	movs	r0, #250	; 0xfa
 8001364:	01c0      	lsls	r0, r0, #7
  return sysclockfreq;
 8001366:	e7d4      	b.n	8001312 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = HSE_VALUE;
 8001368:	4804      	ldr	r0, [pc, #16]	; (800137c <HAL_RCC_GetSysClockFreq+0x88>)
 800136a:	e7d2      	b.n	8001312 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSE_VALUE;
 800136c:	2080      	movs	r0, #128	; 0x80
 800136e:	0200      	lsls	r0, r0, #8
 8001370:	e7cf      	b.n	8001312 <HAL_RCC_GetSysClockFreq+0x1e>
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	40021000 	.word	0x40021000
 8001378:	00f42400 	.word	0x00f42400
 800137c:	007a1200 	.word	0x007a1200

08001380 <HAL_RCC_ClockConfig>:
{
 8001380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001382:	0005      	movs	r5, r0
 8001384:	000e      	movs	r6, r1
  if (RCC_ClkInitStruct == NULL)
 8001386:	2800      	cmp	r0, #0
 8001388:	d101      	bne.n	800138e <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 800138a:	2001      	movs	r0, #1
}
 800138c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800138e:	2707      	movs	r7, #7
 8001390:	4c49      	ldr	r4, [pc, #292]	; (80014b8 <HAL_RCC_ClockConfig+0x138>)
 8001392:	6823      	ldr	r3, [r4, #0]
 8001394:	403b      	ands	r3, r7
 8001396:	428b      	cmp	r3, r1
 8001398:	d329      	bcc.n	80013ee <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800139a:	6829      	ldr	r1, [r5, #0]
 800139c:	078b      	lsls	r3, r1, #30
 800139e:	d43a      	bmi.n	8001416 <HAL_RCC_ClockConfig+0x96>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013a0:	07cb      	lsls	r3, r1, #31
 80013a2:	d447      	bmi.n	8001434 <HAL_RCC_ClockConfig+0xb4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013a4:	2707      	movs	r7, #7
 80013a6:	6823      	ldr	r3, [r4, #0]
 80013a8:	403b      	ands	r3, r7
 80013aa:	429e      	cmp	r6, r3
 80013ac:	d20a      	bcs.n	80013c4 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ae:	6823      	ldr	r3, [r4, #0]
 80013b0:	43bb      	bics	r3, r7
 80013b2:	4333      	orrs	r3, r6
 80013b4:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80013b6:	f7ff f95b 	bl	8000670 <HAL_GetTick>
 80013ba:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013bc:	6823      	ldr	r3, [r4, #0]
 80013be:	403b      	ands	r3, r7
 80013c0:	429e      	cmp	r6, r3
 80013c2:	d16a      	bne.n	800149a <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013c4:	682b      	ldr	r3, [r5, #0]
 80013c6:	4c3d      	ldr	r4, [pc, #244]	; (80014bc <HAL_RCC_ClockConfig+0x13c>)
 80013c8:	075b      	lsls	r3, r3, #29
 80013ca:	d46e      	bmi.n	80014aa <HAL_RCC_ClockConfig+0x12a>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80013cc:	f7ff ff92 	bl	80012f4 <HAL_RCC_GetSysClockFreq>
 80013d0:	68a3      	ldr	r3, [r4, #8]
 80013d2:	4a3b      	ldr	r2, [pc, #236]	; (80014c0 <HAL_RCC_ClockConfig+0x140>)
 80013d4:	051b      	lsls	r3, r3, #20
 80013d6:	0f1b      	lsrs	r3, r3, #28
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	589b      	ldr	r3, [r3, r2]
 80013dc:	221f      	movs	r2, #31
 80013de:	4013      	ands	r3, r2
 80013e0:	40d8      	lsrs	r0, r3
 80013e2:	4b38      	ldr	r3, [pc, #224]	; (80014c4 <HAL_RCC_ClockConfig+0x144>)
 80013e4:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(TICK_INT_PRIORITY);
 80013e6:	2000      	movs	r0, #0
 80013e8:	f002 fa88 	bl	80038fc <HAL_InitTick>
 80013ec:	e7ce      	b.n	800138c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ee:	6823      	ldr	r3, [r4, #0]
 80013f0:	43bb      	bics	r3, r7
 80013f2:	430b      	orrs	r3, r1
 80013f4:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80013f6:	f7ff f93b 	bl	8000670 <HAL_GetTick>
 80013fa:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013fc:	6823      	ldr	r3, [r4, #0]
 80013fe:	403b      	ands	r3, r7
 8001400:	429e      	cmp	r6, r3
 8001402:	d0ca      	beq.n	800139a <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001404:	f7ff f934 	bl	8000670 <HAL_GetTick>
 8001408:	9b01      	ldr	r3, [sp, #4]
 800140a:	1ac0      	subs	r0, r0, r3
 800140c:	4b2e      	ldr	r3, [pc, #184]	; (80014c8 <HAL_RCC_ClockConfig+0x148>)
 800140e:	4298      	cmp	r0, r3
 8001410:	d9f4      	bls.n	80013fc <HAL_RCC_ClockConfig+0x7c>
        return HAL_TIMEOUT;
 8001412:	2003      	movs	r0, #3
 8001414:	e7ba      	b.n	800138c <HAL_RCC_ClockConfig+0xc>
 8001416:	4a29      	ldr	r2, [pc, #164]	; (80014bc <HAL_RCC_ClockConfig+0x13c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001418:	074b      	lsls	r3, r1, #29
 800141a:	d504      	bpl.n	8001426 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800141c:	23e0      	movs	r3, #224	; 0xe0
 800141e:	6890      	ldr	r0, [r2, #8]
 8001420:	01db      	lsls	r3, r3, #7
 8001422:	4303      	orrs	r3, r0
 8001424:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001426:	6893      	ldr	r3, [r2, #8]
 8001428:	4828      	ldr	r0, [pc, #160]	; (80014cc <HAL_RCC_ClockConfig+0x14c>)
 800142a:	4003      	ands	r3, r0
 800142c:	68a8      	ldr	r0, [r5, #8]
 800142e:	4303      	orrs	r3, r0
 8001430:	6093      	str	r3, [r2, #8]
 8001432:	e7b5      	b.n	80013a0 <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001434:	686a      	ldr	r2, [r5, #4]
 8001436:	4f21      	ldr	r7, [pc, #132]	; (80014bc <HAL_RCC_ClockConfig+0x13c>)
 8001438:	2a01      	cmp	r2, #1
 800143a:	d119      	bne.n	8001470 <HAL_RCC_ClockConfig+0xf0>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	039b      	lsls	r3, r3, #14
 8001440:	d5a3      	bpl.n	800138a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001442:	2107      	movs	r1, #7
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	438b      	bics	r3, r1
 8001448:	4313      	orrs	r3, r2
 800144a:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 800144c:	f7ff f910 	bl	8000670 <HAL_GetTick>
 8001450:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001452:	2338      	movs	r3, #56	; 0x38
 8001454:	68ba      	ldr	r2, [r7, #8]
 8001456:	401a      	ands	r2, r3
 8001458:	686b      	ldr	r3, [r5, #4]
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	429a      	cmp	r2, r3
 800145e:	d0a1      	beq.n	80013a4 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001460:	f7ff f906 	bl	8000670 <HAL_GetTick>
 8001464:	9b01      	ldr	r3, [sp, #4]
 8001466:	1ac0      	subs	r0, r0, r3
 8001468:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <HAL_RCC_ClockConfig+0x148>)
 800146a:	4298      	cmp	r0, r3
 800146c:	d9f1      	bls.n	8001452 <HAL_RCC_ClockConfig+0xd2>
 800146e:	e7d0      	b.n	8001412 <HAL_RCC_ClockConfig+0x92>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001470:	2a02      	cmp	r2, #2
 8001472:	d103      	bne.n	800147c <HAL_RCC_ClockConfig+0xfc>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	019b      	lsls	r3, r3, #6
 8001478:	d4e3      	bmi.n	8001442 <HAL_RCC_ClockConfig+0xc2>
 800147a:	e786      	b.n	800138a <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800147c:	2a00      	cmp	r2, #0
 800147e:	d103      	bne.n	8001488 <HAL_RCC_ClockConfig+0x108>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	055b      	lsls	r3, r3, #21
 8001484:	d4dd      	bmi.n	8001442 <HAL_RCC_ClockConfig+0xc2>
 8001486:	e780      	b.n	800138a <HAL_RCC_ClockConfig+0xa>
 8001488:	2302      	movs	r3, #2
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800148a:	2a03      	cmp	r2, #3
 800148c:	d103      	bne.n	8001496 <HAL_RCC_ClockConfig+0x116>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800148e:	6e39      	ldr	r1, [r7, #96]	; 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001490:	4219      	tst	r1, r3
 8001492:	d1d6      	bne.n	8001442 <HAL_RCC_ClockConfig+0xc2>
 8001494:	e779      	b.n	800138a <HAL_RCC_ClockConfig+0xa>
 8001496:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001498:	e7fa      	b.n	8001490 <HAL_RCC_ClockConfig+0x110>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800149a:	f7ff f8e9 	bl	8000670 <HAL_GetTick>
 800149e:	9b01      	ldr	r3, [sp, #4]
 80014a0:	1ac0      	subs	r0, r0, r3
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <HAL_RCC_ClockConfig+0x148>)
 80014a4:	4298      	cmp	r0, r3
 80014a6:	d989      	bls.n	80013bc <HAL_RCC_ClockConfig+0x3c>
 80014a8:	e7b3      	b.n	8001412 <HAL_RCC_ClockConfig+0x92>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80014aa:	68a3      	ldr	r3, [r4, #8]
 80014ac:	4a08      	ldr	r2, [pc, #32]	; (80014d0 <HAL_RCC_ClockConfig+0x150>)
 80014ae:	4013      	ands	r3, r2
 80014b0:	68ea      	ldr	r2, [r5, #12]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	60a3      	str	r3, [r4, #8]
 80014b6:	e789      	b.n	80013cc <HAL_RCC_ClockConfig+0x4c>
 80014b8:	40022000 	.word	0x40022000
 80014bc:	40021000 	.word	0x40021000
 80014c0:	08003acc 	.word	0x08003acc
 80014c4:	20000008 	.word	0x20000008
 80014c8:	00001388 	.word	0x00001388
 80014cc:	fffff0ff 	.word	0xfffff0ff
 80014d0:	ffff8fff 	.word	0xffff8fff

080014d4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80014d6:	4a07      	ldr	r2, [pc, #28]	; (80014f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	045b      	lsls	r3, r3, #17
 80014dc:	0f5b      	lsrs	r3, r3, #29
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	589b      	ldr	r3, [r3, r2]
 80014e2:	221f      	movs	r2, #31
 80014e4:	4013      	ands	r3, r2
 80014e6:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014e8:	6810      	ldr	r0, [r2, #0]
 80014ea:	40d8      	lsrs	r0, r3
}
 80014ec:	4770      	bx	lr
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	40021000 	.word	0x40021000
 80014f4:	08003b0c 	.word	0x08003b0c
 80014f8:	20000008 	.word	0x20000008

080014fc <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80014fc:	2207      	movs	r2, #7
{
 80014fe:	b530      	push	{r4, r5, lr}

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001500:	25f0      	movs	r5, #240	; 0xf0
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001502:	4b09      	ldr	r3, [pc, #36]	; (8001528 <HAL_RCC_GetClockConfig+0x2c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001504:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001506:	689c      	ldr	r4, [r3, #8]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001508:	012d      	lsls	r5, r5, #4
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800150a:	4014      	ands	r4, r2
 800150c:	6044      	str	r4, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800150e:	689c      	ldr	r4, [r3, #8]
 8001510:	402c      	ands	r4, r5
 8001512:	6084      	str	r4, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8001514:	24e0      	movs	r4, #224	; 0xe0
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	01e4      	lsls	r4, r4, #7
 800151a:	4023      	ands	r3, r4
 800151c:	60c3      	str	r3, [r0, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800151e:	4b03      	ldr	r3, [pc, #12]	; (800152c <HAL_RCC_GetClockConfig+0x30>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4013      	ands	r3, r2
 8001524:	600b      	str	r3, [r1, #0]
}
 8001526:	bd30      	pop	{r4, r5, pc}
 8001528:	40021000 	.word	0x40021000
 800152c:	40022000 	.word	0x40022000

08001530 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001532:	0005      	movs	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001534:	682b      	ldr	r3, [r5, #0]
{
 8001536:	b085      	sub	sp, #20
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001538:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800153a:	039b      	lsls	r3, r3, #14
 800153c:	d550      	bpl.n	80015e0 <HAL_RCCEx_PeriphCLKConfig+0xb0>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800153e:	2280      	movs	r2, #128	; 0x80
 8001540:	4c6f      	ldr	r4, [pc, #444]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001542:	0552      	lsls	r2, r2, #21
 8001544:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8001546:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001548:	4213      	tst	r3, r2
 800154a:	d108      	bne.n	800155e <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800154c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800154e:	4313      	orrs	r3, r2
 8001550:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001552:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001554:	4013      	ands	r3, r2
 8001556:	9303      	str	r3, [sp, #12]
 8001558:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800155a:	2301      	movs	r3, #1
 800155c:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800155e:	2780      	movs	r7, #128	; 0x80
 8001560:	4e68      	ldr	r6, [pc, #416]	; (8001704 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001562:	007f      	lsls	r7, r7, #1
 8001564:	6833      	ldr	r3, [r6, #0]
 8001566:	433b      	orrs	r3, r7
 8001568:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800156a:	f7ff f881 	bl	8000670 <HAL_GetTick>
 800156e:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001570:	6833      	ldr	r3, [r6, #0]
 8001572:	423b      	tst	r3, r7
 8001574:	d026      	beq.n	80015c4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001576:	23c0      	movs	r3, #192	; 0xc0
 8001578:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4013      	ands	r3, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800157e:	d00f      	beq.n	80015a0 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8001580:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001582:	4293      	cmp	r3, r2
 8001584:	d00c      	beq.n	80015a0 <HAL_RCCEx_PeriphCLKConfig+0x70>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001586:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001588:	4b5f      	ldr	r3, [pc, #380]	; (8001708 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800158a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800158c:	4013      	ands	r3, r2
        __HAL_RCC_BACKUPRESET_FORCE();
 800158e:	2280      	movs	r2, #128	; 0x80
 8001590:	0252      	lsls	r2, r2, #9
 8001592:	430a      	orrs	r2, r1
 8001594:	65e2      	str	r2, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001596:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001598:	495c      	ldr	r1, [pc, #368]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800159a:	400a      	ands	r2, r1
 800159c:	65e2      	str	r2, [r4, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800159e:	65e3      	str	r3, [r4, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80015a0:	07db      	lsls	r3, r3, #31
 80015a2:	d507      	bpl.n	80015b4 <HAL_RCCEx_PeriphCLKConfig+0x84>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a4:	f7ff f864 	bl	8000670 <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015a8:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 80015aa:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015ac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80015ae:	423b      	tst	r3, r7
 80015b0:	d100      	bne.n	80015b4 <HAL_RCCEx_PeriphCLKConfig+0x84>
 80015b2:	e09d      	b.n	80016f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80015b4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80015b6:	4a54      	ldr	r2, [pc, #336]	; (8001708 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80015b8:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80015ba:	4013      	ands	r3, r2
 80015bc:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80015be:	4313      	orrs	r3, r2
 80015c0:	65e3      	str	r3, [r4, #92]	; 0x5c
 80015c2:	e006      	b.n	80015d2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015c4:	f7ff f854 	bl	8000670 <HAL_GetTick>
 80015c8:	9b01      	ldr	r3, [sp, #4]
 80015ca:	1ac0      	subs	r0, r0, r3
 80015cc:	2802      	cmp	r0, #2
 80015ce:	d9cf      	bls.n	8001570 <HAL_RCCEx_PeriphCLKConfig+0x40>
        ret = HAL_TIMEOUT;
 80015d0:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015d2:	9b00      	ldr	r3, [sp, #0]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d103      	bne.n	80015e0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80015da:	4a4d      	ldr	r2, [pc, #308]	; (8001710 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80015dc:	4013      	ands	r3, r2
 80015de:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80015e0:	682b      	ldr	r3, [r5, #0]
 80015e2:	07da      	lsls	r2, r3, #31
 80015e4:	d506      	bpl.n	80015f4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80015e6:	2403      	movs	r4, #3
 80015e8:	4945      	ldr	r1, [pc, #276]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80015ea:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80015ec:	43a2      	bics	r2, r4
 80015ee:	686c      	ldr	r4, [r5, #4]
 80015f0:	4322      	orrs	r2, r4
 80015f2:	654a      	str	r2, [r1, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80015f4:	079a      	lsls	r2, r3, #30
 80015f6:	d506      	bpl.n	8001606 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80015f8:	240c      	movs	r4, #12
 80015fa:	4941      	ldr	r1, [pc, #260]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80015fc:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80015fe:	43a2      	bics	r2, r4
 8001600:	68ac      	ldr	r4, [r5, #8]
 8001602:	4322      	orrs	r2, r4
 8001604:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001606:	069a      	lsls	r2, r3, #26
 8001608:	d506      	bpl.n	8001618 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800160a:	493d      	ldr	r1, [pc, #244]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800160c:	4c41      	ldr	r4, [pc, #260]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800160e:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8001610:	4022      	ands	r2, r4
 8001612:	68ec      	ldr	r4, [r5, #12]
 8001614:	4322      	orrs	r2, r4
 8001616:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001618:	059a      	lsls	r2, r3, #22
 800161a:	d506      	bpl.n	800162a <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800161c:	4938      	ldr	r1, [pc, #224]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800161e:	4c3e      	ldr	r4, [pc, #248]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001620:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8001622:	4022      	ands	r2, r4
 8001624:	69ac      	ldr	r4, [r5, #24]
 8001626:	4322      	orrs	r2, r4
 8001628:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800162a:	055a      	lsls	r2, r3, #21
 800162c:	d506      	bpl.n	800163c <HAL_RCCEx_PeriphCLKConfig+0x10c>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800162e:	4934      	ldr	r1, [pc, #208]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001630:	4c3a      	ldr	r4, [pc, #232]	; (800171c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001632:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8001634:	4022      	ands	r2, r4
 8001636:	69ec      	ldr	r4, [r5, #28]
 8001638:	4322      	orrs	r2, r4
 800163a:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800163c:	065a      	lsls	r2, r3, #25
 800163e:	d506      	bpl.n	800164e <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001640:	492f      	ldr	r1, [pc, #188]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001642:	4c37      	ldr	r4, [pc, #220]	; (8001720 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001644:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8001646:	4022      	ands	r2, r4
 8001648:	692c      	ldr	r4, [r5, #16]
 800164a:	4322      	orrs	r2, r4
 800164c:	654a      	str	r2, [r1, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800164e:	045a      	lsls	r2, r3, #17
 8001650:	d50f      	bpl.n	8001672 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001652:	492b      	ldr	r1, [pc, #172]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001654:	6a2c      	ldr	r4, [r5, #32]
 8001656:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8001658:	0092      	lsls	r2, r2, #2
 800165a:	0892      	lsrs	r2, r2, #2
 800165c:	4322      	orrs	r2, r4
 800165e:	654a      	str	r2, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001660:	2280      	movs	r2, #128	; 0x80
 8001662:	05d2      	lsls	r2, r2, #23
 8001664:	4294      	cmp	r4, r2
 8001666:	d104      	bne.n	8001672 <HAL_RCCEx_PeriphCLKConfig+0x142>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001668:	2280      	movs	r2, #128	; 0x80
 800166a:	68cc      	ldr	r4, [r1, #12]
 800166c:	0252      	lsls	r2, r2, #9
 800166e:	4322      	orrs	r2, r4
 8001670:	60ca      	str	r2, [r1, #12]
    }
  }

#if defined(RCC_CCIPR_CECSEL)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001672:	031a      	lsls	r2, r3, #12
 8001674:	d506      	bpl.n	8001684 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001676:	2440      	movs	r4, #64	; 0x40
 8001678:	4921      	ldr	r1, [pc, #132]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800167a:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800167c:	43a2      	bics	r2, r4
 800167e:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8001680:	4322      	orrs	r2, r4
 8001682:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001684:	029a      	lsls	r2, r3, #10
 8001686:	d50f      	bpl.n	80016a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001688:	491d      	ldr	r1, [pc, #116]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800168a:	4e26      	ldr	r6, [pc, #152]	; (8001724 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800168c:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800168e:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8001690:	4032      	ands	r2, r6
 8001692:	4322      	orrs	r2, r4
 8001694:	654a      	str	r2, [r1, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001696:	2280      	movs	r2, #128	; 0x80
 8001698:	03d2      	lsls	r2, r2, #15
 800169a:	4294      	cmp	r4, r2
 800169c:	d104      	bne.n	80016a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800169e:	2280      	movs	r2, #128	; 0x80
 80016a0:	68cc      	ldr	r4, [r1, #12]
 80016a2:	0452      	lsls	r2, r2, #17
 80016a4:	4322      	orrs	r2, r4
 80016a6:	60ca      	str	r2, [r1, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80016a8:	025a      	lsls	r2, r3, #9
 80016aa:	d50d      	bpl.n	80016c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80016ac:	4c14      	ldr	r4, [pc, #80]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80016ae:	4e1e      	ldr	r6, [pc, #120]	; (8001728 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016b0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80016b2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80016b4:	4031      	ands	r1, r6
 80016b6:	4311      	orrs	r1, r2
 80016b8:	6561      	str	r1, [r4, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80016ba:	2180      	movs	r1, #128	; 0x80
 80016bc:	0449      	lsls	r1, r1, #17
 80016be:	428a      	cmp	r2, r1
 80016c0:	d102      	bne.n	80016c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80016c2:	68e1      	ldr	r1, [r4, #12]
 80016c4:	430a      	orrs	r2, r1
 80016c6:	60e2      	str	r2, [r4, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80016c8:	051b      	lsls	r3, r3, #20
 80016ca:	d50f      	bpl.n	80016ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80016cc:	490c      	ldr	r1, [pc, #48]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80016ce:	4c17      	ldr	r4, [pc, #92]	; (800172c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80016d0:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80016d2:	696a      	ldr	r2, [r5, #20]
 80016d4:	4023      	ands	r3, r4
 80016d6:	4313      	orrs	r3, r2
 80016d8:	654b      	str	r3, [r1, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80016da:	2380      	movs	r3, #128	; 0x80
 80016dc:	01db      	lsls	r3, r3, #7
 80016de:	429a      	cmp	r2, r3
 80016e0:	d104      	bne.n	80016ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80016e2:	2380      	movs	r3, #128	; 0x80
 80016e4:	68ca      	ldr	r2, [r1, #12]
 80016e6:	025b      	lsls	r3, r3, #9
 80016e8:	4313      	orrs	r3, r2
 80016ea:	60cb      	str	r3, [r1, #12]
    }
  }

  return status;
}
 80016ec:	b005      	add	sp, #20
 80016ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f0:	f7fe ffbe 	bl	8000670 <HAL_GetTick>
 80016f4:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80016f6:	1b80      	subs	r0, r0, r6
 80016f8:	4298      	cmp	r0, r3
 80016fa:	d800      	bhi.n	80016fe <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80016fc:	e756      	b.n	80015ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80016fe:	e767      	b.n	80015d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8001700:	40021000 	.word	0x40021000
 8001704:	40007000 	.word	0x40007000
 8001708:	fffffcff 	.word	0xfffffcff
 800170c:	fffeffff 	.word	0xfffeffff
 8001710:	efffffff 	.word	0xefffffff
 8001714:	fffff3ff 	.word	0xfffff3ff
 8001718:	fff3ffff 	.word	0xfff3ffff
 800171c:	ffcfffff 	.word	0xffcfffff
 8001720:	ffffcfff 	.word	0xffffcfff
 8001724:	ffbfffff 	.word	0xffbfffff
 8001728:	feffffff 	.word	0xfeffffff
 800172c:	ffff3fff 	.word	0xffff3fff
 8001730:	00001388 	.word	0x00001388

08001734 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001734:	2201      	movs	r2, #1
 8001736:	6803      	ldr	r3, [r0, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001738:	4807      	ldr	r0, [pc, #28]	; (8001758 <HAL_TIM_Base_Start_IT+0x24>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800173a:	68d9      	ldr	r1, [r3, #12]
 800173c:	4311      	orrs	r1, r2
 800173e:	60d9      	str	r1, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001740:	6899      	ldr	r1, [r3, #8]
 8001742:	4001      	ands	r1, r0
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001744:	2906      	cmp	r1, #6
 8001746:	d005      	beq.n	8001754 <HAL_TIM_Base_Start_IT+0x20>
 8001748:	3807      	subs	r0, #7
 800174a:	4281      	cmp	r1, r0
 800174c:	d002      	beq.n	8001754 <HAL_TIM_Base_Start_IT+0x20>
  {
  __HAL_TIM_ENABLE(htim);
 800174e:	6819      	ldr	r1, [r3, #0]
 8001750:	430a      	orrs	r2, r1
 8001752:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8001754:	2000      	movs	r0, #0
 8001756:	4770      	bx	lr
 8001758:	00010007 	.word	0x00010007

0800175c <HAL_TIM_OC_DelayElapsedCallback>:
 800175c:	4770      	bx	lr

0800175e <HAL_TIM_IC_CaptureCallback>:
 800175e:	4770      	bx	lr

08001760 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001760:	4770      	bx	lr

08001762 <HAL_TIM_TriggerCallback>:
 8001762:	4770      	bx	lr

08001764 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001764:	2202      	movs	r2, #2
 8001766:	6803      	ldr	r3, [r0, #0]
{
 8001768:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800176a:	6919      	ldr	r1, [r3, #16]
{
 800176c:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800176e:	4211      	tst	r1, r2
 8001770:	d00e      	beq.n	8001790 <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001772:	68d9      	ldr	r1, [r3, #12]
 8001774:	4211      	tst	r1, r2
 8001776:	d00b      	beq.n	8001790 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001778:	3a05      	subs	r2, #5
 800177a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800177c:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800177e:	3204      	adds	r2, #4
 8001780:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001782:	079b      	lsls	r3, r3, #30
 8001784:	d100      	bne.n	8001788 <HAL_TIM_IRQHandler+0x24>
 8001786:	e086      	b.n	8001896 <HAL_TIM_IRQHandler+0x132>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001788:	f7ff ffe9 	bl	800175e <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800178c:	2300      	movs	r3, #0
 800178e:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001790:	2204      	movs	r2, #4
 8001792:	6823      	ldr	r3, [r4, #0]
 8001794:	6919      	ldr	r1, [r3, #16]
 8001796:	4211      	tst	r1, r2
 8001798:	d011      	beq.n	80017be <HAL_TIM_IRQHandler+0x5a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800179a:	68d9      	ldr	r1, [r3, #12]
 800179c:	4211      	tst	r1, r2
 800179e:	d00e      	beq.n	80017be <HAL_TIM_IRQHandler+0x5a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80017a0:	3a09      	subs	r2, #9
 80017a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017a4:	3207      	adds	r2, #7
 80017a6:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017a8:	699a      	ldr	r2, [r3, #24]
 80017aa:	23c0      	movs	r3, #192	; 0xc0
 80017ac:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017ae:	0020      	movs	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017b0:	421a      	tst	r2, r3
 80017b2:	d100      	bne.n	80017b6 <HAL_TIM_IRQHandler+0x52>
 80017b4:	e075      	b.n	80018a2 <HAL_TIM_IRQHandler+0x13e>
        HAL_TIM_IC_CaptureCallback(htim);
 80017b6:	f7ff ffd2 	bl	800175e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017ba:	2300      	movs	r3, #0
 80017bc:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017be:	2208      	movs	r2, #8
 80017c0:	6823      	ldr	r3, [r4, #0]
 80017c2:	6919      	ldr	r1, [r3, #16]
 80017c4:	4211      	tst	r1, r2
 80017c6:	d00e      	beq.n	80017e6 <HAL_TIM_IRQHandler+0x82>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80017c8:	68d9      	ldr	r1, [r3, #12]
 80017ca:	4211      	tst	r1, r2
 80017cc:	d00b      	beq.n	80017e6 <HAL_TIM_IRQHandler+0x82>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80017ce:	3a11      	subs	r2, #17
 80017d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017d2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017d4:	320d      	adds	r2, #13
 80017d6:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017d8:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017da:	079b      	lsls	r3, r3, #30
 80017dc:	d067      	beq.n	80018ae <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_IC_CaptureCallback(htim);
 80017de:	f7ff ffbe 	bl	800175e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017e2:	2300      	movs	r3, #0
 80017e4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017e6:	2210      	movs	r2, #16
 80017e8:	6823      	ldr	r3, [r4, #0]
 80017ea:	6919      	ldr	r1, [r3, #16]
 80017ec:	4211      	tst	r1, r2
 80017ee:	d010      	beq.n	8001812 <HAL_TIM_IRQHandler+0xae>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80017f0:	68d9      	ldr	r1, [r3, #12]
 80017f2:	4211      	tst	r1, r2
 80017f4:	d00d      	beq.n	8001812 <HAL_TIM_IRQHandler+0xae>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80017f6:	3a21      	subs	r2, #33	; 0x21
 80017f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017fa:	3219      	adds	r2, #25
 80017fc:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017fe:	69da      	ldr	r2, [r3, #28]
 8001800:	23c0      	movs	r3, #192	; 0xc0
 8001802:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001804:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001806:	421a      	tst	r2, r3
 8001808:	d057      	beq.n	80018ba <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_IC_CaptureCallback(htim);
 800180a:	f7ff ffa8 	bl	800175e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800180e:	2300      	movs	r3, #0
 8001810:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001812:	2201      	movs	r2, #1
 8001814:	6823      	ldr	r3, [r4, #0]
 8001816:	6919      	ldr	r1, [r3, #16]
 8001818:	4211      	tst	r1, r2
 800181a:	d007      	beq.n	800182c <HAL_TIM_IRQHandler+0xc8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800181c:	68d9      	ldr	r1, [r3, #12]
 800181e:	4211      	tst	r1, r2
 8001820:	d004      	beq.n	800182c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001822:	3a03      	subs	r2, #3
 8001824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001826:	0020      	movs	r0, r4
 8001828:	f001 ff82 	bl	8003730 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800182c:	2280      	movs	r2, #128	; 0x80
 800182e:	6823      	ldr	r3, [r4, #0]
 8001830:	6919      	ldr	r1, [r3, #16]
 8001832:	4211      	tst	r1, r2
 8001834:	d008      	beq.n	8001848 <HAL_TIM_IRQHandler+0xe4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001836:	68d9      	ldr	r1, [r3, #12]
 8001838:	4211      	tst	r1, r2
 800183a:	d005      	beq.n	8001848 <HAL_TIM_IRQHandler+0xe4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800183c:	3a02      	subs	r2, #2
 800183e:	3aff      	subs	r2, #255	; 0xff
 8001840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001842:	0020      	movs	r0, r4
 8001844:	f000 f8d9 	bl	80019fa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001848:	6823      	ldr	r3, [r4, #0]
 800184a:	691a      	ldr	r2, [r3, #16]
 800184c:	05d2      	lsls	r2, r2, #23
 800184e:	d507      	bpl.n	8001860 <HAL_TIM_IRQHandler+0xfc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001850:	68da      	ldr	r2, [r3, #12]
 8001852:	0612      	lsls	r2, r2, #24
 8001854:	d504      	bpl.n	8001860 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001856:	4a1c      	ldr	r2, [pc, #112]	; (80018c8 <HAL_TIM_IRQHandler+0x164>)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001858:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800185a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800185c:	f000 f8ce 	bl	80019fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001860:	2240      	movs	r2, #64	; 0x40
 8001862:	6823      	ldr	r3, [r4, #0]
 8001864:	6919      	ldr	r1, [r3, #16]
 8001866:	4211      	tst	r1, r2
 8001868:	d007      	beq.n	800187a <HAL_TIM_IRQHandler+0x116>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800186a:	68d9      	ldr	r1, [r3, #12]
 800186c:	4211      	tst	r1, r2
 800186e:	d004      	beq.n	800187a <HAL_TIM_IRQHandler+0x116>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001870:	3a81      	subs	r2, #129	; 0x81
 8001872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001874:	0020      	movs	r0, r4
 8001876:	f7ff ff74 	bl	8001762 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800187a:	2220      	movs	r2, #32
 800187c:	6823      	ldr	r3, [r4, #0]
 800187e:	6919      	ldr	r1, [r3, #16]
 8001880:	4211      	tst	r1, r2
 8001882:	d007      	beq.n	8001894 <HAL_TIM_IRQHandler+0x130>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001884:	68d9      	ldr	r1, [r3, #12]
 8001886:	4211      	tst	r1, r2
 8001888:	d004      	beq.n	8001894 <HAL_TIM_IRQHandler+0x130>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800188a:	3a41      	subs	r2, #65	; 0x41
 800188c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800188e:	0020      	movs	r0, r4
 8001890:	f000 f8b2 	bl	80019f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001894:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001896:	f7ff ff61 	bl	800175c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800189a:	0020      	movs	r0, r4
 800189c:	f7ff ff60 	bl	8001760 <HAL_TIM_PWM_PulseFinishedCallback>
 80018a0:	e774      	b.n	800178c <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018a2:	f7ff ff5b 	bl	800175c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018a6:	0020      	movs	r0, r4
 80018a8:	f7ff ff5a 	bl	8001760 <HAL_TIM_PWM_PulseFinishedCallback>
 80018ac:	e785      	b.n	80017ba <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018ae:	f7ff ff55 	bl	800175c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018b2:	0020      	movs	r0, r4
 80018b4:	f7ff ff54 	bl	8001760 <HAL_TIM_PWM_PulseFinishedCallback>
 80018b8:	e793      	b.n	80017e2 <HAL_TIM_IRQHandler+0x7e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018ba:	f7ff ff4f 	bl	800175c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018be:	0020      	movs	r0, r4
 80018c0:	f7ff ff4e 	bl	8001760 <HAL_TIM_PWM_PulseFinishedCallback>
 80018c4:	e7a3      	b.n	800180e <HAL_TIM_IRQHandler+0xaa>
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	fffffeff 	.word	0xfffffeff

080018cc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018cc:	4a20      	ldr	r2, [pc, #128]	; (8001950 <TIM_Base_SetConfig+0x84>)
{
 80018ce:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 80018d0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018d2:	4290      	cmp	r0, r2
 80018d4:	d006      	beq.n	80018e4 <TIM_Base_SetConfig+0x18>
 80018d6:	2480      	movs	r4, #128	; 0x80
 80018d8:	05e4      	lsls	r4, r4, #23
 80018da:	42a0      	cmp	r0, r4
 80018dc:	d002      	beq.n	80018e4 <TIM_Base_SetConfig+0x18>
 80018de:	4c1d      	ldr	r4, [pc, #116]	; (8001954 <TIM_Base_SetConfig+0x88>)
 80018e0:	42a0      	cmp	r0, r4
 80018e2:	d10c      	bne.n	80018fe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018e4:	2470      	movs	r4, #112	; 0x70
 80018e6:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 80018e8:	684c      	ldr	r4, [r1, #4]
 80018ea:	4323      	orrs	r3, r4
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018ec:	4290      	cmp	r0, r2
 80018ee:	d012      	beq.n	8001916 <TIM_Base_SetConfig+0x4a>
 80018f0:	2480      	movs	r4, #128	; 0x80
 80018f2:	05e4      	lsls	r4, r4, #23
 80018f4:	42a0      	cmp	r0, r4
 80018f6:	d00e      	beq.n	8001916 <TIM_Base_SetConfig+0x4a>
 80018f8:	4c16      	ldr	r4, [pc, #88]	; (8001954 <TIM_Base_SetConfig+0x88>)
 80018fa:	42a0      	cmp	r0, r4
 80018fc:	d00b      	beq.n	8001916 <TIM_Base_SetConfig+0x4a>
 80018fe:	4c16      	ldr	r4, [pc, #88]	; (8001958 <TIM_Base_SetConfig+0x8c>)
 8001900:	42a0      	cmp	r0, r4
 8001902:	d008      	beq.n	8001916 <TIM_Base_SetConfig+0x4a>
 8001904:	4c15      	ldr	r4, [pc, #84]	; (800195c <TIM_Base_SetConfig+0x90>)
 8001906:	42a0      	cmp	r0, r4
 8001908:	d005      	beq.n	8001916 <TIM_Base_SetConfig+0x4a>
 800190a:	4c15      	ldr	r4, [pc, #84]	; (8001960 <TIM_Base_SetConfig+0x94>)
 800190c:	42a0      	cmp	r0, r4
 800190e:	d002      	beq.n	8001916 <TIM_Base_SetConfig+0x4a>
 8001910:	4c14      	ldr	r4, [pc, #80]	; (8001964 <TIM_Base_SetConfig+0x98>)
 8001912:	42a0      	cmp	r0, r4
 8001914:	d103      	bne.n	800191e <TIM_Base_SetConfig+0x52>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001916:	4c14      	ldr	r4, [pc, #80]	; (8001968 <TIM_Base_SetConfig+0x9c>)
 8001918:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800191a:	68cc      	ldr	r4, [r1, #12]
 800191c:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800191e:	2480      	movs	r4, #128	; 0x80
 8001920:	43a3      	bics	r3, r4
 8001922:	694c      	ldr	r4, [r1, #20]
 8001924:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 8001926:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001928:	688b      	ldr	r3, [r1, #8]
 800192a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800192c:	680b      	ldr	r3, [r1, #0]
 800192e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001930:	4290      	cmp	r0, r2
 8001932:	d008      	beq.n	8001946 <TIM_Base_SetConfig+0x7a>
 8001934:	4b09      	ldr	r3, [pc, #36]	; (800195c <TIM_Base_SetConfig+0x90>)
 8001936:	4298      	cmp	r0, r3
 8001938:	d005      	beq.n	8001946 <TIM_Base_SetConfig+0x7a>
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <TIM_Base_SetConfig+0x94>)
 800193c:	4298      	cmp	r0, r3
 800193e:	d002      	beq.n	8001946 <TIM_Base_SetConfig+0x7a>
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <TIM_Base_SetConfig+0x98>)
 8001942:	4298      	cmp	r0, r3
 8001944:	d101      	bne.n	800194a <TIM_Base_SetConfig+0x7e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001946:	690b      	ldr	r3, [r1, #16]
 8001948:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800194a:	2301      	movs	r3, #1
 800194c:	6143      	str	r3, [r0, #20]
}
 800194e:	bd10      	pop	{r4, pc}
 8001950:	40012c00 	.word	0x40012c00
 8001954:	40000400 	.word	0x40000400
 8001958:	40002000 	.word	0x40002000
 800195c:	40014000 	.word	0x40014000
 8001960:	40014400 	.word	0x40014400
 8001964:	40014800 	.word	0x40014800
 8001968:	fffffcff 	.word	0xfffffcff

0800196c <HAL_TIM_Base_Init>:
{
 800196c:	b570      	push	{r4, r5, r6, lr}
 800196e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001970:	2001      	movs	r0, #1
  if(htim == NULL)
 8001972:	2c00      	cmp	r4, #0
 8001974:	d014      	beq.n	80019a0 <HAL_TIM_Base_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001976:	0025      	movs	r5, r4
 8001978:	353d      	adds	r5, #61	; 0x3d
 800197a:	782b      	ldrb	r3, [r5, #0]
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d105      	bne.n	800198e <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8001982:	0022      	movs	r2, r4
 8001984:	323c      	adds	r2, #60	; 0x3c
 8001986:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 8001988:	0020      	movs	r0, r4
 800198a:	f001 ff55 	bl	8003838 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800198e:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001990:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001992:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001994:	1d21      	adds	r1, r4, #4
 8001996:	f7ff ff99 	bl	80018cc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800199a:	2301      	movs	r3, #1
  return HAL_OK;
 800199c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800199e:	702b      	strb	r3, [r5, #0]
}
 80019a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080019a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 80019a4:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80019a6:	0004      	movs	r4, r0
 80019a8:	2202      	movs	r2, #2
 80019aa:	343c      	adds	r4, #60	; 0x3c
 80019ac:	7825      	ldrb	r5, [r4, #0]
{
 80019ae:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80019b0:	0010      	movs	r0, r2
 80019b2:	2d01      	cmp	r5, #1
 80019b4:	d01a      	beq.n	80019ec <HAL_TIMEx_MasterConfigSynchronization+0x48>
  
  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019b6:	001d      	movs	r5, r3
 80019b8:	353d      	adds	r5, #61	; 0x3d
 80019ba:	702a      	strb	r2, [r5, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80019bc:	4e0c      	ldr	r6, [pc, #48]	; (80019f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
  tmpcr2 = htim->Instance->CR2;
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80019c2:	6890      	ldr	r0, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80019c4:	42b2      	cmp	r2, r6
 80019c6:	d103      	bne.n	80019d0 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80019c8:	4e0a      	ldr	r6, [pc, #40]	; (80019f4 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 80019ca:	4033      	ands	r3, r6
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80019cc:	684e      	ldr	r6, [r1, #4]
 80019ce:	4333      	orrs	r3, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80019d0:	2670      	movs	r6, #112	; 0x70
 80019d2:	43b3      	bics	r3, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80019d4:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80019d6:	6889      	ldr	r1, [r1, #8]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80019d8:	4333      	orrs	r3, r6
  tmpsmcr &= ~TIM_SMCR_MSM;
 80019da:	2680      	movs	r6, #128	; 0x80
 80019dc:	43b0      	bics	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80019de:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80019e0:	4301      	orrs	r1, r0

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80019e2:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80019e4:	2000      	movs	r0, #0
  htim->Instance->SMCR = tmpsmcr;
 80019e6:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80019e8:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 80019ea:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 80019ec:	bd70      	pop	{r4, r5, r6, pc}
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	40012c00 	.word	0x40012c00
 80019f4:	ff0fffff 	.word	0xff0fffff

080019f8 <HAL_TIMEx_CommutCallback>:
 80019f8:	4770      	bx	lr

080019fa <HAL_TIMEx_BreakCallback>:
 80019fa:	4770      	bx	lr

080019fc <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80019fc:	4770      	bx	lr
	...

08001a00 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8001a00:	6803      	ldr	r3, [r0, #0]
 8001a02:	4907      	ldr	r1, [pc, #28]	; (8001a20 <UART_EndRxTransfer+0x20>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	400a      	ands	r2, r1
 8001a08:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	4905      	ldr	r1, [pc, #20]	; (8001a24 <UART_EndRxTransfer+0x24>)
 8001a0e:	400a      	ands	r2, r1
 8001a10:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001a12:	0003      	movs	r3, r0
 8001a14:	2220      	movs	r2, #32
 8001a16:	3308      	adds	r3, #8
 8001a18:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 8001a1e:	4770      	bx	lr
 8001a20:	fffffedf 	.word	0xfffffedf
 8001a24:	effffffe 	.word	0xeffffffe

08001a28 <HAL_UART_TxCpltCallback>:
 8001a28:	4770      	bx	lr

08001a2a <HAL_UART_ErrorCallback>:
 8001a2a:	4770      	bx	lr

08001a2c <HAL_UART_IRQHandler>:
{
 8001a2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001a2e:	6802      	ldr	r2, [r0, #0]
{
 8001a30:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001a32:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001a34:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001a36:	6890      	ldr	r0, [r2, #8]
  if (errorflags == 0U)
 8001a38:	071d      	lsls	r5, r3, #28
 8001a3a:	d10d      	bne.n	8001a58 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8001a3c:	2520      	movs	r5, #32
 8001a3e:	422b      	tst	r3, r5
 8001a40:	d100      	bne.n	8001a44 <HAL_UART_IRQHandler+0x18>
 8001a42:	e080      	b.n	8001b46 <HAL_UART_IRQHandler+0x11a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8001a44:	4229      	tst	r1, r5
 8001a46:	d102      	bne.n	8001a4e <HAL_UART_IRQHandler+0x22>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8001a48:	00c5      	lsls	r5, r0, #3
 8001a4a:	d400      	bmi.n	8001a4e <HAL_UART_IRQHandler+0x22>
 8001a4c:	e07b      	b.n	8001b46 <HAL_UART_IRQHandler+0x11a>
      if (huart->RxISR != NULL)
 8001a4e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
      huart->TxISR(huart);
 8001a50:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d16d      	bne.n	8001b32 <HAL_UART_IRQHandler+0x106>
 8001a56:	e06d      	b.n	8001b34 <HAL_UART_IRQHandler+0x108>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8001a58:	4d55      	ldr	r5, [pc, #340]	; (8001bb0 <HAL_UART_IRQHandler+0x184>)
 8001a5a:	4005      	ands	r5, r0
 8001a5c:	9500      	str	r5, [sp, #0]
 8001a5e:	d104      	bne.n	8001a6a <HAL_UART_IRQHandler+0x3e>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 8001a60:	3521      	adds	r5, #33	; 0x21
 8001a62:	35ff      	adds	r5, #255	; 0xff
 8001a64:	4229      	tst	r1, r5
 8001a66:	d100      	bne.n	8001a6a <HAL_UART_IRQHandler+0x3e>
 8001a68:	e06d      	b.n	8001b46 <HAL_UART_IRQHandler+0x11a>
 8001a6a:	0025      	movs	r5, r4
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001a6c:	2601      	movs	r6, #1
 8001a6e:	3588      	adds	r5, #136	; 0x88
 8001a70:	4233      	tst	r3, r6
 8001a72:	d005      	beq.n	8001a80 <HAL_UART_IRQHandler+0x54>
 8001a74:	05cf      	lsls	r7, r1, #23
 8001a76:	d503      	bpl.n	8001a80 <HAL_UART_IRQHandler+0x54>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001a78:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001a7a:	682f      	ldr	r7, [r5, #0]
 8001a7c:	433e      	orrs	r6, r7
 8001a7e:	602e      	str	r6, [r5, #0]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001a80:	2602      	movs	r6, #2
 8001a82:	4233      	tst	r3, r6
 8001a84:	d00c      	beq.n	8001aa0 <HAL_UART_IRQHandler+0x74>
 8001a86:	07c7      	lsls	r7, r0, #31
 8001a88:	d50a      	bpl.n	8001aa0 <HAL_UART_IRQHandler+0x74>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001a8a:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001a8c:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001a8e:	3788      	adds	r7, #136	; 0x88
 8001a90:	683e      	ldr	r6, [r7, #0]
 8001a92:	9701      	str	r7, [sp, #4]
 8001a94:	46b4      	mov	ip, r6
 8001a96:	2604      	movs	r6, #4
 8001a98:	4667      	mov	r7, ip
 8001a9a:	433e      	orrs	r6, r7
 8001a9c:	9f01      	ldr	r7, [sp, #4]
 8001a9e:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001aa0:	2604      	movs	r6, #4
 8001aa2:	4233      	tst	r3, r6
 8001aa4:	d00c      	beq.n	8001ac0 <HAL_UART_IRQHandler+0x94>
 8001aa6:	07c7      	lsls	r7, r0, #31
 8001aa8:	d50a      	bpl.n	8001ac0 <HAL_UART_IRQHandler+0x94>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001aaa:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001aac:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001aae:	3788      	adds	r7, #136	; 0x88
 8001ab0:	683e      	ldr	r6, [r7, #0]
 8001ab2:	9701      	str	r7, [sp, #4]
 8001ab4:	46b4      	mov	ip, r6
 8001ab6:	2602      	movs	r6, #2
 8001ab8:	4667      	mov	r7, ip
 8001aba:	433e      	orrs	r6, r7
 8001abc:	9f01      	ldr	r7, [sp, #4]
 8001abe:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001ac0:	071e      	lsls	r6, r3, #28
 8001ac2:	d509      	bpl.n	8001ad8 <HAL_UART_IRQHandler+0xac>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8001ac4:	068e      	lsls	r6, r1, #26
 8001ac6:	d402      	bmi.n	8001ace <HAL_UART_IRQHandler+0xa2>
 8001ac8:	9e00      	ldr	r6, [sp, #0]
 8001aca:	2e00      	cmp	r6, #0
 8001acc:	d004      	beq.n	8001ad8 <HAL_UART_IRQHandler+0xac>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001ace:	2608      	movs	r6, #8
 8001ad0:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001ad2:	682a      	ldr	r2, [r5, #0]
 8001ad4:	4316      	orrs	r6, r2
 8001ad6:	602e      	str	r6, [r5, #0]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001ad8:	682a      	ldr	r2, [r5, #0]
 8001ada:	2a00      	cmp	r2, #0
 8001adc:	d02a      	beq.n	8001b34 <HAL_UART_IRQHandler+0x108>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8001ade:	2220      	movs	r2, #32
 8001ae0:	4213      	tst	r3, r2
 8001ae2:	d008      	beq.n	8001af6 <HAL_UART_IRQHandler+0xca>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8001ae4:	4211      	tst	r1, r2
 8001ae6:	d101      	bne.n	8001aec <HAL_UART_IRQHandler+0xc0>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8001ae8:	00c3      	lsls	r3, r0, #3
 8001aea:	d504      	bpl.n	8001af6 <HAL_UART_IRQHandler+0xca>
        if (huart->RxISR != NULL)
 8001aec:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_UART_IRQHandler+0xca>
          huart->RxISR(huart);
 8001af2:	0020      	movs	r0, r4
 8001af4:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001af6:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8001af8:	682e      	ldr	r6, [r5, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001afa:	689b      	ldr	r3, [r3, #8]
        UART_EndRxTransfer(huart);
 8001afc:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001afe:	065b      	lsls	r3, r3, #25
 8001b00:	d402      	bmi.n	8001b08 <HAL_UART_IRQHandler+0xdc>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8001b02:	2308      	movs	r3, #8
 8001b04:	401e      	ands	r6, r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001b06:	d01a      	beq.n	8001b3e <HAL_UART_IRQHandler+0x112>
        UART_EndRxTransfer(huart);
 8001b08:	f7ff ff7a 	bl	8001a00 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b0c:	2140      	movs	r1, #64	; 0x40
 8001b0e:	6823      	ldr	r3, [r4, #0]
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	420a      	tst	r2, r1
 8001b14:	d00f      	beq.n	8001b36 <HAL_UART_IRQHandler+0x10a>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b16:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8001b18:	6fa0      	ldr	r0, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b1a:	438a      	bics	r2, r1
 8001b1c:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8001b1e:	2800      	cmp	r0, #0
 8001b20:	d009      	beq.n	8001b36 <HAL_UART_IRQHandler+0x10a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001b22:	4b24      	ldr	r3, [pc, #144]	; (8001bb4 <HAL_UART_IRQHandler+0x188>)
 8001b24:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001b26:	f7ff f83b 	bl	8000ba0 <HAL_DMA_Abort_IT>
 8001b2a:	2800      	cmp	r0, #0
 8001b2c:	d002      	beq.n	8001b34 <HAL_UART_IRQHandler+0x108>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b2e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001b30:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001b32:	4798      	blx	r3
}
 8001b34:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8001b36:	0020      	movs	r0, r4
 8001b38:	f7ff ff77 	bl	8001a2a <HAL_UART_ErrorCallback>
 8001b3c:	e7fa      	b.n	8001b34 <HAL_UART_IRQHandler+0x108>
        HAL_UART_ErrorCallback(huart);
 8001b3e:	f7ff ff74 	bl	8001a2a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b42:	602e      	str	r6, [r5, #0]
 8001b44:	e7f6      	b.n	8001b34 <HAL_UART_IRQHandler+0x108>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001b46:	2580      	movs	r5, #128	; 0x80
 8001b48:	036d      	lsls	r5, r5, #13
 8001b4a:	422b      	tst	r3, r5
 8001b4c:	d006      	beq.n	8001b5c <HAL_UART_IRQHandler+0x130>
 8001b4e:	0246      	lsls	r6, r0, #9
 8001b50:	d504      	bpl.n	8001b5c <HAL_UART_IRQHandler+0x130>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001b52:	6215      	str	r5, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8001b54:	0020      	movs	r0, r4
 8001b56:	f000 fd95 	bl	8002684 <HAL_UARTEx_WakeupCallback>
    return;
 8001b5a:	e7eb      	b.n	8001b34 <HAL_UART_IRQHandler+0x108>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8001b5c:	2580      	movs	r5, #128	; 0x80
 8001b5e:	422b      	tst	r3, r5
 8001b60:	d005      	beq.n	8001b6e <HAL_UART_IRQHandler+0x142>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8001b62:	4229      	tst	r1, r5
 8001b64:	d101      	bne.n	8001b6a <HAL_UART_IRQHandler+0x13e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8001b66:	0200      	lsls	r0, r0, #8
 8001b68:	d501      	bpl.n	8001b6e <HAL_UART_IRQHandler+0x142>
    if (huart->TxISR != NULL)
 8001b6a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001b6c:	e770      	b.n	8001a50 <HAL_UART_IRQHandler+0x24>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001b6e:	2040      	movs	r0, #64	; 0x40
 8001b70:	4203      	tst	r3, r0
 8001b72:	d00d      	beq.n	8001b90 <HAL_UART_IRQHandler+0x164>
 8001b74:	4201      	tst	r1, r0
 8001b76:	d00b      	beq.n	8001b90 <HAL_UART_IRQHandler+0x164>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001b78:	6813      	ldr	r3, [r2, #0]
 8001b7a:	4383      	bics	r3, r0
 8001b7c:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001b7e:	2220      	movs	r2, #32
 8001b80:	1d23      	adds	r3, r4, #4
 8001b82:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8001b84:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001b86:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8001b88:	6723      	str	r3, [r4, #112]	; 0x70
  HAL_UART_TxCpltCallback(huart);
 8001b8a:	f7ff ff4d 	bl	8001a28 <HAL_UART_TxCpltCallback>
 8001b8e:	e7d1      	b.n	8001b34 <HAL_UART_IRQHandler+0x108>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8001b90:	021a      	lsls	r2, r3, #8
 8001b92:	d505      	bpl.n	8001ba0 <HAL_UART_IRQHandler+0x174>
 8001b94:	004a      	lsls	r2, r1, #1
 8001b96:	d503      	bpl.n	8001ba0 <HAL_UART_IRQHandler+0x174>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8001b98:	0020      	movs	r0, r4
 8001b9a:	f000 fd75 	bl	8002688 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8001b9e:	e7c9      	b.n	8001b34 <HAL_UART_IRQHandler+0x108>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8001ba0:	01db      	lsls	r3, r3, #7
 8001ba2:	d5c7      	bpl.n	8001b34 <HAL_UART_IRQHandler+0x108>
 8001ba4:	2900      	cmp	r1, #0
 8001ba6:	dac5      	bge.n	8001b34 <HAL_UART_IRQHandler+0x108>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8001ba8:	0020      	movs	r0, r4
 8001baa:	f000 fd6c 	bl	8002686 <HAL_UARTEx_RxFifoFullCallback>
    return;
 8001bae:	e7c1      	b.n	8001b34 <HAL_UART_IRQHandler+0x108>
 8001bb0:	10000001 	.word	0x10000001
 8001bb4:	08001bb9 	.word	0x08001bb9

08001bb8 <UART_DMAAbortOnError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001bb8:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	0002      	movs	r2, r0
{
 8001bbe:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8001bc0:	325e      	adds	r2, #94	; 0x5e
 8001bc2:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8001bc4:	3a08      	subs	r2, #8
 8001bc6:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 8001bc8:	f7ff ff2f 	bl	8001a2a <HAL_UART_ErrorCallback>
}
 8001bcc:	bd10      	pop	{r4, pc}
	...

08001bd0 <UART_SetConfig>:
{
 8001bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bd2:	0004      	movs	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8001bd4:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001bd6:	69c1      	ldr	r1, [r0, #28]
 8001bd8:	6883      	ldr	r3, [r0, #8]
 8001bda:	6900      	ldr	r0, [r0, #16]
  tmpreg |= (uint32_t)huart->FifoMode;
 8001bdc:	6e65      	ldr	r5, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001bde:	4303      	orrs	r3, r0
 8001be0:	6960      	ldr	r0, [r4, #20]
 8001be2:	4303      	orrs	r3, r0
 8001be4:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001be6:	6810      	ldr	r0, [r2, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 8001be8:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001bea:	4da4      	ldr	r5, [pc, #656]	; (8001e7c <UART_SetConfig+0x2ac>)
 8001bec:	4028      	ands	r0, r5
 8001bee:	4303      	orrs	r3, r0
 8001bf0:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bf2:	6853      	ldr	r3, [r2, #4]
 8001bf4:	48a2      	ldr	r0, [pc, #648]	; (8001e80 <UART_SetConfig+0x2b0>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001bf6:	4da3      	ldr	r5, [pc, #652]	; (8001e84 <UART_SetConfig+0x2b4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bf8:	4003      	ands	r3, r0
 8001bfa:	68e0      	ldr	r0, [r4, #12]
 8001bfc:	4303      	orrs	r3, r0
 8001bfe:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001c00:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001c02:	42aa      	cmp	r2, r5
 8001c04:	d001      	beq.n	8001c0a <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8001c06:	6a23      	ldr	r3, [r4, #32]
 8001c08:	4318      	orrs	r0, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001c0a:	6893      	ldr	r3, [r2, #8]
 8001c0c:	4e9e      	ldr	r6, [pc, #632]	; (8001e88 <UART_SetConfig+0x2b8>)
 8001c0e:	4033      	ands	r3, r6
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001c10:	260f      	movs	r6, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001c12:	4303      	orrs	r3, r0
 8001c14:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001c16:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8001c18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c1a:	43b0      	bics	r0, r6
 8001c1c:	4318      	orrs	r0, r3
 8001c1e:	62d0      	str	r0, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c20:	489a      	ldr	r0, [pc, #616]	; (8001e8c <UART_SetConfig+0x2bc>)
 8001c22:	4282      	cmp	r2, r0
 8001c24:	d117      	bne.n	8001c56 <UART_SetConfig+0x86>
 8001c26:	2003      	movs	r0, #3
 8001c28:	4a99      	ldr	r2, [pc, #612]	; (8001e90 <UART_SetConfig+0x2c0>)
 8001c2a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001c2c:	4002      	ands	r2, r0
 8001c2e:	4899      	ldr	r0, [pc, #612]	; (8001e94 <UART_SetConfig+0x2c4>)
 8001c30:	5c80      	ldrb	r0, [r0, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c32:	2280      	movs	r2, #128	; 0x80
 8001c34:	0212      	lsls	r2, r2, #8
 8001c36:	4291      	cmp	r1, r2
 8001c38:	d000      	beq.n	8001c3c <UART_SetConfig+0x6c>
 8001c3a:	e289      	b.n	8002150 <UART_SetConfig+0x580>
    switch (clocksource)
 8001c3c:	2808      	cmp	r0, #8
 8001c3e:	d82b      	bhi.n	8001c98 <UART_SetConfig+0xc8>
 8001c40:	f7fe fa6c 	bl	800011c <__gnu_thumb1_case_uhi>
 8001c44:	002a037d 	.word	0x002a037d
 8001c48:	002a021a 	.word	0x002a021a
 8001c4c:	002a024e 	.word	0x002a024e
 8001c50:	002a002a 	.word	0x002a002a
 8001c54:	0251      	.short	0x0251
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c56:	4890      	ldr	r0, [pc, #576]	; (8001e98 <UART_SetConfig+0x2c8>)
 8001c58:	4282      	cmp	r2, r0
 8001c5a:	d105      	bne.n	8001c68 <UART_SetConfig+0x98>
 8001c5c:	200c      	movs	r0, #12
 8001c5e:	4a8c      	ldr	r2, [pc, #560]	; (8001e90 <UART_SetConfig+0x2c0>)
 8001c60:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001c62:	4002      	ands	r2, r0
 8001c64:	488d      	ldr	r0, [pc, #564]	; (8001e9c <UART_SetConfig+0x2cc>)
 8001c66:	e7e3      	b.n	8001c30 <UART_SetConfig+0x60>
 8001c68:	488d      	ldr	r0, [pc, #564]	; (8001ea0 <UART_SetConfig+0x2d0>)
 8001c6a:	4282      	cmp	r2, r0
 8001c6c:	d100      	bne.n	8001c70 <UART_SetConfig+0xa0>
 8001c6e:	e361      	b.n	8002334 <UART_SetConfig+0x764>
 8001c70:	488c      	ldr	r0, [pc, #560]	; (8001ea4 <UART_SetConfig+0x2d4>)
 8001c72:	4282      	cmp	r2, r0
 8001c74:	d100      	bne.n	8001c78 <UART_SetConfig+0xa8>
 8001c76:	e35d      	b.n	8002334 <UART_SetConfig+0x764>
 8001c78:	2010      	movs	r0, #16
 8001c7a:	42aa      	cmp	r2, r5
 8001c7c:	d1d9      	bne.n	8001c32 <UART_SetConfig+0x62>
 8001c7e:	21c0      	movs	r1, #192	; 0xc0
 8001c80:	2080      	movs	r0, #128	; 0x80
 8001c82:	4a83      	ldr	r2, [pc, #524]	; (8001e90 <UART_SetConfig+0x2c0>)
 8001c84:	0109      	lsls	r1, r1, #4
 8001c86:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001c88:	00c0      	lsls	r0, r0, #3
 8001c8a:	400a      	ands	r2, r1
 8001c8c:	4282      	cmp	r2, r0
 8001c8e:	d100      	bne.n	8001c92 <UART_SetConfig+0xc2>
 8001c90:	e09c      	b.n	8001dcc <UART_SetConfig+0x1fc>
 8001c92:	d80d      	bhi.n	8001cb0 <UART_SetConfig+0xe0>
 8001c94:	2a00      	cmp	r2, #0
 8001c96:	d04e      	beq.n	8001d36 <UART_SetConfig+0x166>
        ret = HAL_ERROR;
 8001c98:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
 8001c9a:	0021      	movs	r1, r4
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	316a      	adds	r1, #106	; 0x6a
 8001ca0:	800b      	strh	r3, [r1, #0]
  huart->NbRxDataToProcess = 1;
 8001ca2:	3902      	subs	r1, #2
 8001ca4:	800b      	strh	r3, [r1, #0]
  huart->RxISR = NULL;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	0010      	movs	r0, r2
  huart->RxISR = NULL;
 8001caa:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 8001cac:	6723      	str	r3, [r4, #112]	; 0x70
}
 8001cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001cb0:	2080      	movs	r0, #128	; 0x80
 8001cb2:	0100      	lsls	r0, r0, #4
 8001cb4:	4282      	cmp	r2, r0
 8001cb6:	d06e      	beq.n	8001d96 <UART_SetConfig+0x1c6>
 8001cb8:	428a      	cmp	r2, r1
 8001cba:	d1ed      	bne.n	8001c98 <UART_SetConfig+0xc8>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d100      	bne.n	8001cc2 <UART_SetConfig+0xf2>
 8001cc0:	e0c7      	b.n	8001e52 <UART_SetConfig+0x282>
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d100      	bne.n	8001cc8 <UART_SetConfig+0xf8>
 8001cc6:	e0c7      	b.n	8001e58 <UART_SetConfig+0x288>
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d100      	bne.n	8001cce <UART_SetConfig+0xfe>
 8001ccc:	e0c8      	b.n	8001e60 <UART_SetConfig+0x290>
 8001cce:	2b03      	cmp	r3, #3
 8001cd0:	d100      	bne.n	8001cd4 <UART_SetConfig+0x104>
 8001cd2:	e0c8      	b.n	8001e66 <UART_SetConfig+0x296>
 8001cd4:	2b04      	cmp	r3, #4
 8001cd6:	d100      	bne.n	8001cda <UART_SetConfig+0x10a>
 8001cd8:	e0c7      	b.n	8001e6a <UART_SetConfig+0x29a>
 8001cda:	2b05      	cmp	r3, #5
 8001cdc:	d100      	bne.n	8001ce0 <UART_SetConfig+0x110>
 8001cde:	e0c7      	b.n	8001e70 <UART_SetConfig+0x2a0>
 8001ce0:	2b06      	cmp	r3, #6
 8001ce2:	d100      	bne.n	8001ce6 <UART_SetConfig+0x116>
 8001ce4:	e0c6      	b.n	8001e74 <UART_SetConfig+0x2a4>
 8001ce6:	2180      	movs	r1, #128	; 0x80
 8001ce8:	2b07      	cmp	r3, #7
 8001cea:	d100      	bne.n	8001cee <UART_SetConfig+0x11e>
 8001cec:	e0c4      	b.n	8001e78 <UART_SetConfig+0x2a8>
 8001cee:	2b08      	cmp	r3, #8
 8001cf0:	d100      	bne.n	8001cf4 <UART_SetConfig+0x124>
 8001cf2:	e0f7      	b.n	8001ee4 <UART_SetConfig+0x314>
 8001cf4:	2b09      	cmp	r3, #9
 8001cf6:	d100      	bne.n	8001cfa <UART_SetConfig+0x12a>
 8001cf8:	e0f6      	b.n	8001ee8 <UART_SetConfig+0x318>
 8001cfa:	2b0a      	cmp	r3, #10
 8001cfc:	d100      	bne.n	8001d00 <UART_SetConfig+0x130>
 8001cfe:	e0f5      	b.n	8001eec <UART_SetConfig+0x31c>
 8001d00:	2b0b      	cmp	r3, #11
 8001d02:	d000      	beq.n	8001d06 <UART_SetConfig+0x136>
 8001d04:	e0a6      	b.n	8001e54 <UART_SetConfig+0x284>
 8001d06:	3b03      	subs	r3, #3
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001d08:	2003      	movs	r0, #3
 8001d0a:	6862      	ldr	r2, [r4, #4]
 8001d0c:	4350      	muls	r0, r2
 8001d0e:	4288      	cmp	r0, r1
 8001d10:	d8c2      	bhi.n	8001c98 <UART_SetConfig+0xc8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8001d12:	0310      	lsls	r0, r2, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001d14:	4288      	cmp	r0, r1
 8001d16:	d3bf      	bcc.n	8001c98 <UART_SetConfig+0xc8>
        switch (clocksource)
 8001d18:	2b08      	cmp	r3, #8
 8001d1a:	d900      	bls.n	8001d1e <UART_SetConfig+0x14e>
 8001d1c:	e1a9      	b.n	8002072 <UART_SetConfig+0x4a2>
 8001d1e:	0018      	movs	r0, r3
 8001d20:	f7fe f9fc 	bl	800011c <__gnu_thumb1_case_uhi>
 8001d24:	01a700e6 	.word	0x01a700e6
 8001d28:	01a70138 	.word	0x01a70138
 8001d2c:	01a7016e 	.word	0x01a7016e
 8001d30:	01a701a7 	.word	0x01a701a7
 8001d34:	0171      	.short	0x0171
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8001d36:	f7ff fbcd 	bl	80014d4 <HAL_RCC_GetPCLK1Freq>
 8001d3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d021      	beq.n	8001d86 <UART_SetConfig+0x1b6>
 8001d42:	1849      	adds	r1, r1, r1
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d01e      	beq.n	8001d86 <UART_SetConfig+0x1b6>
 8001d48:	3102      	adds	r1, #2
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d01b      	beq.n	8001d86 <UART_SetConfig+0x1b6>
 8001d4e:	3102      	adds	r1, #2
 8001d50:	2b03      	cmp	r3, #3
 8001d52:	d018      	beq.n	8001d86 <UART_SetConfig+0x1b6>
 8001d54:	3102      	adds	r1, #2
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	d015      	beq.n	8001d86 <UART_SetConfig+0x1b6>
 8001d5a:	3102      	adds	r1, #2
 8001d5c:	2b05      	cmp	r3, #5
 8001d5e:	d012      	beq.n	8001d86 <UART_SetConfig+0x1b6>
 8001d60:	3102      	adds	r1, #2
 8001d62:	2b06      	cmp	r3, #6
 8001d64:	d00f      	beq.n	8001d86 <UART_SetConfig+0x1b6>
 8001d66:	3104      	adds	r1, #4
 8001d68:	2b07      	cmp	r3, #7
 8001d6a:	d00c      	beq.n	8001d86 <UART_SetConfig+0x1b6>
 8001d6c:	3110      	adds	r1, #16
 8001d6e:	2b08      	cmp	r3, #8
 8001d70:	d009      	beq.n	8001d86 <UART_SetConfig+0x1b6>
 8001d72:	3120      	adds	r1, #32
 8001d74:	2b09      	cmp	r3, #9
 8001d76:	d006      	beq.n	8001d86 <UART_SetConfig+0x1b6>
 8001d78:	3140      	adds	r1, #64	; 0x40
 8001d7a:	2b0a      	cmp	r3, #10
 8001d7c:	d003      	beq.n	8001d86 <UART_SetConfig+0x1b6>
 8001d7e:	397f      	subs	r1, #127	; 0x7f
 8001d80:	2b0b      	cmp	r3, #11
 8001d82:	d100      	bne.n	8001d86 <UART_SetConfig+0x1b6>
 8001d84:	31ff      	adds	r1, #255	; 0xff
 8001d86:	f7fe f9d3 	bl	8000130 <__udivsi3>
        break;
 8001d8a:	2300      	movs	r3, #0
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8001d8c:	0001      	movs	r1, r0
 8001d8e:	2200      	movs	r2, #0
    if (lpuart_ker_ck_pres != 0U)
 8001d90:	4291      	cmp	r1, r2
 8001d92:	d1b9      	bne.n	8001d08 <UART_SetConfig+0x138>
 8001d94:	e781      	b.n	8001c9a <UART_SetConfig+0xca>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d059      	beq.n	8001e4e <UART_SetConfig+0x27e>
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d043      	beq.n	8001e26 <UART_SetConfig+0x256>
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d043      	beq.n	8001e2a <UART_SetConfig+0x25a>
 8001da2:	2b03      	cmp	r3, #3
 8001da4:	d043      	beq.n	8001e2e <UART_SetConfig+0x25e>
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	d043      	beq.n	8001e32 <UART_SetConfig+0x262>
 8001daa:	2b05      	cmp	r3, #5
 8001dac:	d043      	beq.n	8001e36 <UART_SetConfig+0x266>
 8001dae:	2b06      	cmp	r3, #6
 8001db0:	d043      	beq.n	8001e3a <UART_SetConfig+0x26a>
 8001db2:	2b07      	cmp	r3, #7
 8001db4:	d043      	beq.n	8001e3e <UART_SetConfig+0x26e>
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d043      	beq.n	8001e42 <UART_SetConfig+0x272>
 8001dba:	2b09      	cmp	r3, #9
 8001dbc:	d043      	beq.n	8001e46 <UART_SetConfig+0x276>
 8001dbe:	2b0a      	cmp	r3, #10
 8001dc0:	d043      	beq.n	8001e4a <UART_SetConfig+0x27a>
 8001dc2:	2b0b      	cmp	r3, #11
 8001dc4:	d143      	bne.n	8001e4e <UART_SetConfig+0x27e>
 8001dc6:	4938      	ldr	r1, [pc, #224]	; (8001ea8 <UART_SetConfig+0x2d8>)
 8001dc8:	2302      	movs	r3, #2
 8001dca:	e79d      	b.n	8001d08 <UART_SetConfig+0x138>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8001dcc:	f7ff fa92 	bl	80012f4 <HAL_RCC_GetSysClockFreq>
 8001dd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d021      	beq.n	8001e1c <UART_SetConfig+0x24c>
 8001dd8:	1849      	adds	r1, r1, r1
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d01e      	beq.n	8001e1c <UART_SetConfig+0x24c>
 8001dde:	3102      	adds	r1, #2
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d01b      	beq.n	8001e1c <UART_SetConfig+0x24c>
 8001de4:	3102      	adds	r1, #2
 8001de6:	2b03      	cmp	r3, #3
 8001de8:	d018      	beq.n	8001e1c <UART_SetConfig+0x24c>
 8001dea:	3102      	adds	r1, #2
 8001dec:	2b04      	cmp	r3, #4
 8001dee:	d015      	beq.n	8001e1c <UART_SetConfig+0x24c>
 8001df0:	3102      	adds	r1, #2
 8001df2:	2b05      	cmp	r3, #5
 8001df4:	d012      	beq.n	8001e1c <UART_SetConfig+0x24c>
 8001df6:	3102      	adds	r1, #2
 8001df8:	2b06      	cmp	r3, #6
 8001dfa:	d00f      	beq.n	8001e1c <UART_SetConfig+0x24c>
 8001dfc:	3104      	adds	r1, #4
 8001dfe:	2b07      	cmp	r3, #7
 8001e00:	d00c      	beq.n	8001e1c <UART_SetConfig+0x24c>
 8001e02:	3110      	adds	r1, #16
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	d009      	beq.n	8001e1c <UART_SetConfig+0x24c>
 8001e08:	3120      	adds	r1, #32
 8001e0a:	2b09      	cmp	r3, #9
 8001e0c:	d006      	beq.n	8001e1c <UART_SetConfig+0x24c>
 8001e0e:	3140      	adds	r1, #64	; 0x40
 8001e10:	2b0a      	cmp	r3, #10
 8001e12:	d003      	beq.n	8001e1c <UART_SetConfig+0x24c>
 8001e14:	397f      	subs	r1, #127	; 0x7f
 8001e16:	2b0b      	cmp	r3, #11
 8001e18:	d100      	bne.n	8001e1c <UART_SetConfig+0x24c>
 8001e1a:	31ff      	adds	r1, #255	; 0xff
 8001e1c:	f7fe f988 	bl	8000130 <__udivsi3>
        break;
 8001e20:	2304      	movs	r3, #4
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8001e22:	0001      	movs	r1, r0
        break;
 8001e24:	e7b3      	b.n	8001d8e <UART_SetConfig+0x1be>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8001e26:	4921      	ldr	r1, [pc, #132]	; (8001eac <UART_SetConfig+0x2dc>)
 8001e28:	e7ce      	b.n	8001dc8 <UART_SetConfig+0x1f8>
 8001e2a:	4921      	ldr	r1, [pc, #132]	; (8001eb0 <UART_SetConfig+0x2e0>)
 8001e2c:	e76c      	b.n	8001d08 <UART_SetConfig+0x138>
 8001e2e:	4921      	ldr	r1, [pc, #132]	; (8001eb4 <UART_SetConfig+0x2e4>)
 8001e30:	e7ca      	b.n	8001dc8 <UART_SetConfig+0x1f8>
 8001e32:	4921      	ldr	r1, [pc, #132]	; (8001eb8 <UART_SetConfig+0x2e8>)
 8001e34:	e7c8      	b.n	8001dc8 <UART_SetConfig+0x1f8>
 8001e36:	4921      	ldr	r1, [pc, #132]	; (8001ebc <UART_SetConfig+0x2ec>)
 8001e38:	e7c6      	b.n	8001dc8 <UART_SetConfig+0x1f8>
 8001e3a:	4921      	ldr	r1, [pc, #132]	; (8001ec0 <UART_SetConfig+0x2f0>)
 8001e3c:	e7c4      	b.n	8001dc8 <UART_SetConfig+0x1f8>
 8001e3e:	4921      	ldr	r1, [pc, #132]	; (8001ec4 <UART_SetConfig+0x2f4>)
 8001e40:	e7c2      	b.n	8001dc8 <UART_SetConfig+0x1f8>
 8001e42:	4921      	ldr	r1, [pc, #132]	; (8001ec8 <UART_SetConfig+0x2f8>)
 8001e44:	e7c0      	b.n	8001dc8 <UART_SetConfig+0x1f8>
 8001e46:	4921      	ldr	r1, [pc, #132]	; (8001ecc <UART_SetConfig+0x2fc>)
 8001e48:	e7be      	b.n	8001dc8 <UART_SetConfig+0x1f8>
 8001e4a:	4921      	ldr	r1, [pc, #132]	; (8001ed0 <UART_SetConfig+0x300>)
 8001e4c:	e7bc      	b.n	8001dc8 <UART_SetConfig+0x1f8>
 8001e4e:	4921      	ldr	r1, [pc, #132]	; (8001ed4 <UART_SetConfig+0x304>)
 8001e50:	e7ba      	b.n	8001dc8 <UART_SetConfig+0x1f8>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8001e52:	2180      	movs	r1, #128	; 0x80
 8001e54:	0209      	lsls	r1, r1, #8
 8001e56:	e001      	b.n	8001e5c <UART_SetConfig+0x28c>
 8001e58:	2180      	movs	r1, #128	; 0x80
 8001e5a:	01c9      	lsls	r1, r1, #7
 8001e5c:	2308      	movs	r3, #8
 8001e5e:	e753      	b.n	8001d08 <UART_SetConfig+0x138>
 8001e60:	2180      	movs	r1, #128	; 0x80
 8001e62:	0189      	lsls	r1, r1, #6
 8001e64:	e7fa      	b.n	8001e5c <UART_SetConfig+0x28c>
 8001e66:	491c      	ldr	r1, [pc, #112]	; (8001ed8 <UART_SetConfig+0x308>)
 8001e68:	e7f8      	b.n	8001e5c <UART_SetConfig+0x28c>
 8001e6a:	2180      	movs	r1, #128	; 0x80
 8001e6c:	0149      	lsls	r1, r1, #5
 8001e6e:	e7f5      	b.n	8001e5c <UART_SetConfig+0x28c>
 8001e70:	491a      	ldr	r1, [pc, #104]	; (8001edc <UART_SetConfig+0x30c>)
 8001e72:	e7f3      	b.n	8001e5c <UART_SetConfig+0x28c>
 8001e74:	491a      	ldr	r1, [pc, #104]	; (8001ee0 <UART_SetConfig+0x310>)
 8001e76:	e7f1      	b.n	8001e5c <UART_SetConfig+0x28c>
 8001e78:	0109      	lsls	r1, r1, #4
 8001e7a:	e7ef      	b.n	8001e5c <UART_SetConfig+0x28c>
 8001e7c:	cfff69f3 	.word	0xcfff69f3
 8001e80:	ffffcfff 	.word	0xffffcfff
 8001e84:	40008000 	.word	0x40008000
 8001e88:	11fff4ff 	.word	0x11fff4ff
 8001e8c:	40013800 	.word	0x40013800
 8001e90:	40021000 	.word	0x40021000
 8001e94:	08003aa4 	.word	0x08003aa4
 8001e98:	40004400 	.word	0x40004400
 8001e9c:	08003aa8 	.word	0x08003aa8
 8001ea0:	40004800 	.word	0x40004800
 8001ea4:	40004c00 	.word	0x40004c00
 8001ea8:	0000f424 	.word	0x0000f424
 8001eac:	007a1200 	.word	0x007a1200
 8001eb0:	003d0900 	.word	0x003d0900
 8001eb4:	0028b0aa 	.word	0x0028b0aa
 8001eb8:	001e8480 	.word	0x001e8480
 8001ebc:	00186a00 	.word	0x00186a00
 8001ec0:	00145855 	.word	0x00145855
 8001ec4:	000f4240 	.word	0x000f4240
 8001ec8:	0007a120 	.word	0x0007a120
 8001ecc:	0003d090 	.word	0x0003d090
 8001ed0:	0001e848 	.word	0x0001e848
 8001ed4:	00f42400 	.word	0x00f42400
 8001ed8:	00001555 	.word	0x00001555
 8001edc:	00000ccc 	.word	0x00000ccc
 8001ee0:	00000aaa 	.word	0x00000aaa
 8001ee4:	00c9      	lsls	r1, r1, #3
 8001ee6:	e70f      	b.n	8001d08 <UART_SetConfig+0x138>
 8001ee8:	0089      	lsls	r1, r1, #2
 8001eea:	e7b7      	b.n	8001e5c <UART_SetConfig+0x28c>
 8001eec:	0049      	lsls	r1, r1, #1
 8001eee:	e7b5      	b.n	8001e5c <UART_SetConfig+0x28c>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001ef0:	f7ff faf0 	bl	80014d4 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001ef4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	2300      	movs	r3, #0
 8001efa:	2900      	cmp	r1, #0
 8001efc:	d02e      	beq.n	8001f5c <UART_SetConfig+0x38c>
 8001efe:	2202      	movs	r2, #2
 8001f00:	2300      	movs	r3, #0
 8001f02:	2901      	cmp	r1, #1
 8001f04:	d02a      	beq.n	8001f5c <UART_SetConfig+0x38c>
 8001f06:	2204      	movs	r2, #4
 8001f08:	2300      	movs	r3, #0
 8001f0a:	2902      	cmp	r1, #2
 8001f0c:	d026      	beq.n	8001f5c <UART_SetConfig+0x38c>
 8001f0e:	2206      	movs	r2, #6
 8001f10:	2300      	movs	r3, #0
 8001f12:	2903      	cmp	r1, #3
 8001f14:	d022      	beq.n	8001f5c <UART_SetConfig+0x38c>
 8001f16:	2208      	movs	r2, #8
 8001f18:	2300      	movs	r3, #0
 8001f1a:	2904      	cmp	r1, #4
 8001f1c:	d01e      	beq.n	8001f5c <UART_SetConfig+0x38c>
 8001f1e:	220a      	movs	r2, #10
 8001f20:	2300      	movs	r3, #0
 8001f22:	2905      	cmp	r1, #5
 8001f24:	d01a      	beq.n	8001f5c <UART_SetConfig+0x38c>
 8001f26:	220c      	movs	r2, #12
 8001f28:	2300      	movs	r3, #0
 8001f2a:	2906      	cmp	r1, #6
 8001f2c:	d016      	beq.n	8001f5c <UART_SetConfig+0x38c>
 8001f2e:	2210      	movs	r2, #16
 8001f30:	2300      	movs	r3, #0
 8001f32:	2907      	cmp	r1, #7
 8001f34:	d012      	beq.n	8001f5c <UART_SetConfig+0x38c>
 8001f36:	2220      	movs	r2, #32
 8001f38:	2300      	movs	r3, #0
 8001f3a:	2908      	cmp	r1, #8
 8001f3c:	d00e      	beq.n	8001f5c <UART_SetConfig+0x38c>
 8001f3e:	2240      	movs	r2, #64	; 0x40
 8001f40:	2300      	movs	r3, #0
 8001f42:	2909      	cmp	r1, #9
 8001f44:	d00a      	beq.n	8001f5c <UART_SetConfig+0x38c>
 8001f46:	2280      	movs	r2, #128	; 0x80
 8001f48:	2300      	movs	r3, #0
 8001f4a:	290a      	cmp	r1, #10
 8001f4c:	d006      	beq.n	8001f5c <UART_SetConfig+0x38c>
 8001f4e:	2201      	movs	r2, #1
 8001f50:	2300      	movs	r3, #0
 8001f52:	290b      	cmp	r1, #11
 8001f54:	d102      	bne.n	8001f5c <UART_SetConfig+0x38c>
 8001f56:	2280      	movs	r2, #128	; 0x80
 8001f58:	2300      	movs	r3, #0
 8001f5a:	0052      	lsls	r2, r2, #1
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	f7fe fa5d 	bl	800041c <__aeabi_uldivmod>
 8001f62:	2700      	movs	r7, #0
 8001f64:	6865      	ldr	r5, [r4, #4]
 8001f66:	0e06      	lsrs	r6, r0, #24
 8001f68:	020b      	lsls	r3, r1, #8
 8001f6a:	4333      	orrs	r3, r6
 8001f6c:	0202      	lsls	r2, r0, #8
 8001f6e:	086e      	lsrs	r6, r5, #1
 8001f70:	1992      	adds	r2, r2, r6
 8001f72:	417b      	adcs	r3, r7
 8001f74:	0010      	movs	r0, r2
 8001f76:	0019      	movs	r1, r3
 8001f78:	002a      	movs	r2, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001f7a:	003b      	movs	r3, r7
 8001f7c:	f7fe fa4e 	bl	800041c <__aeabi_uldivmod>
            break;
 8001f80:	003a      	movs	r2, r7
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001f82:	4b96      	ldr	r3, [pc, #600]	; (80021dc <UART_SetConfig+0x60c>)
 8001f84:	4996      	ldr	r1, [pc, #600]	; (80021e0 <UART_SetConfig+0x610>)
 8001f86:	18c3      	adds	r3, r0, r3
 8001f88:	428b      	cmp	r3, r1
 8001f8a:	d900      	bls.n	8001f8e <UART_SetConfig+0x3be>
 8001f8c:	e684      	b.n	8001c98 <UART_SetConfig+0xc8>
          huart->Instance->BRR = usartdiv;
 8001f8e:	6823      	ldr	r3, [r4, #0]
 8001f90:	60d8      	str	r0, [r3, #12]
 8001f92:	e682      	b.n	8001c9a <UART_SetConfig+0xca>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001f94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d030      	beq.n	8001ffc <UART_SetConfig+0x42c>
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d01a      	beq.n	8001fd4 <UART_SetConfig+0x404>
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d01a      	beq.n	8001fd8 <UART_SetConfig+0x408>
 8001fa2:	2b03      	cmp	r3, #3
 8001fa4:	d01a      	beq.n	8001fdc <UART_SetConfig+0x40c>
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	d01a      	beq.n	8001fe0 <UART_SetConfig+0x410>
 8001faa:	2b05      	cmp	r3, #5
 8001fac:	d01a      	beq.n	8001fe4 <UART_SetConfig+0x414>
 8001fae:	2b06      	cmp	r3, #6
 8001fb0:	d01a      	beq.n	8001fe8 <UART_SetConfig+0x418>
 8001fb2:	2b07      	cmp	r3, #7
 8001fb4:	d01a      	beq.n	8001fec <UART_SetConfig+0x41c>
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	d01a      	beq.n	8001ff0 <UART_SetConfig+0x420>
 8001fba:	2b09      	cmp	r3, #9
 8001fbc:	d01a      	beq.n	8001ff4 <UART_SetConfig+0x424>
 8001fbe:	2b0a      	cmp	r3, #10
 8001fc0:	d01a      	beq.n	8001ff8 <UART_SetConfig+0x428>
 8001fc2:	2b0b      	cmp	r3, #11
 8001fc4:	d11a      	bne.n	8001ffc <UART_SetConfig+0x42c>
 8001fc6:	4887      	ldr	r0, [pc, #540]	; (80021e4 <UART_SetConfig+0x614>)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001fc8:	2100      	movs	r1, #0
 8001fca:	2700      	movs	r7, #0
 8001fcc:	0856      	lsrs	r6, r2, #1
 8001fce:	1980      	adds	r0, r0, r6
 8001fd0:	4179      	adcs	r1, r7
 8001fd2:	e7d2      	b.n	8001f7a <UART_SetConfig+0x3aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001fd4:	4884      	ldr	r0, [pc, #528]	; (80021e8 <UART_SetConfig+0x618>)
 8001fd6:	e7f7      	b.n	8001fc8 <UART_SetConfig+0x3f8>
 8001fd8:	4884      	ldr	r0, [pc, #528]	; (80021ec <UART_SetConfig+0x61c>)
 8001fda:	e7f5      	b.n	8001fc8 <UART_SetConfig+0x3f8>
 8001fdc:	4884      	ldr	r0, [pc, #528]	; (80021f0 <UART_SetConfig+0x620>)
 8001fde:	e7f3      	b.n	8001fc8 <UART_SetConfig+0x3f8>
 8001fe0:	4884      	ldr	r0, [pc, #528]	; (80021f4 <UART_SetConfig+0x624>)
 8001fe2:	e7f1      	b.n	8001fc8 <UART_SetConfig+0x3f8>
 8001fe4:	4884      	ldr	r0, [pc, #528]	; (80021f8 <UART_SetConfig+0x628>)
 8001fe6:	e7ef      	b.n	8001fc8 <UART_SetConfig+0x3f8>
 8001fe8:	4884      	ldr	r0, [pc, #528]	; (80021fc <UART_SetConfig+0x62c>)
 8001fea:	e7ed      	b.n	8001fc8 <UART_SetConfig+0x3f8>
 8001fec:	4884      	ldr	r0, [pc, #528]	; (8002200 <UART_SetConfig+0x630>)
 8001fee:	e7eb      	b.n	8001fc8 <UART_SetConfig+0x3f8>
 8001ff0:	4884      	ldr	r0, [pc, #528]	; (8002204 <UART_SetConfig+0x634>)
 8001ff2:	e7e9      	b.n	8001fc8 <UART_SetConfig+0x3f8>
 8001ff4:	4884      	ldr	r0, [pc, #528]	; (8002208 <UART_SetConfig+0x638>)
 8001ff6:	e7e7      	b.n	8001fc8 <UART_SetConfig+0x3f8>
 8001ff8:	4884      	ldr	r0, [pc, #528]	; (800220c <UART_SetConfig+0x63c>)
 8001ffa:	e7e5      	b.n	8001fc8 <UART_SetConfig+0x3f8>
 8001ffc:	4884      	ldr	r0, [pc, #528]	; (8002210 <UART_SetConfig+0x640>)
 8001ffe:	e7e3      	b.n	8001fc8 <UART_SetConfig+0x3f8>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002000:	f7ff f978 	bl	80012f4 <HAL_RCC_GetSysClockFreq>
 8002004:	e776      	b.n	8001ef4 <UART_SetConfig+0x324>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002006:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002008:	2b00      	cmp	r3, #0
 800200a:	d018      	beq.n	800203e <UART_SetConfig+0x46e>
 800200c:	2b01      	cmp	r3, #1
 800200e:	d019      	beq.n	8002044 <UART_SetConfig+0x474>
 8002010:	2b02      	cmp	r3, #2
 8002012:	d01a      	beq.n	800204a <UART_SetConfig+0x47a>
 8002014:	2b03      	cmp	r3, #3
 8002016:	d01b      	beq.n	8002050 <UART_SetConfig+0x480>
 8002018:	2b04      	cmp	r3, #4
 800201a:	d01b      	beq.n	8002054 <UART_SetConfig+0x484>
 800201c:	2b05      	cmp	r3, #5
 800201e:	d01c      	beq.n	800205a <UART_SetConfig+0x48a>
 8002020:	2b06      	cmp	r3, #6
 8002022:	d01c      	beq.n	800205e <UART_SetConfig+0x48e>
 8002024:	2080      	movs	r0, #128	; 0x80
 8002026:	2b07      	cmp	r3, #7
 8002028:	d01b      	beq.n	8002062 <UART_SetConfig+0x492>
 800202a:	2b08      	cmp	r3, #8
 800202c:	d01b      	beq.n	8002066 <UART_SetConfig+0x496>
 800202e:	2b09      	cmp	r3, #9
 8002030:	d01b      	beq.n	800206a <UART_SetConfig+0x49a>
 8002032:	2b0a      	cmp	r3, #10
 8002034:	d01b      	beq.n	800206e <UART_SetConfig+0x49e>
 8002036:	2b0b      	cmp	r3, #11
 8002038:	d102      	bne.n	8002040 <UART_SetConfig+0x470>
 800203a:	0200      	lsls	r0, r0, #8
 800203c:	e7c4      	b.n	8001fc8 <UART_SetConfig+0x3f8>
 800203e:	2080      	movs	r0, #128	; 0x80
 8002040:	0400      	lsls	r0, r0, #16
 8002042:	e7c1      	b.n	8001fc8 <UART_SetConfig+0x3f8>
 8002044:	2080      	movs	r0, #128	; 0x80
 8002046:	03c0      	lsls	r0, r0, #15
 8002048:	e7be      	b.n	8001fc8 <UART_SetConfig+0x3f8>
 800204a:	2080      	movs	r0, #128	; 0x80
 800204c:	0380      	lsls	r0, r0, #14
 800204e:	e7bb      	b.n	8001fc8 <UART_SetConfig+0x3f8>
 8002050:	4870      	ldr	r0, [pc, #448]	; (8002214 <UART_SetConfig+0x644>)
 8002052:	e7b9      	b.n	8001fc8 <UART_SetConfig+0x3f8>
 8002054:	2080      	movs	r0, #128	; 0x80
 8002056:	0340      	lsls	r0, r0, #13
 8002058:	e7b6      	b.n	8001fc8 <UART_SetConfig+0x3f8>
 800205a:	486f      	ldr	r0, [pc, #444]	; (8002218 <UART_SetConfig+0x648>)
 800205c:	e7b4      	b.n	8001fc8 <UART_SetConfig+0x3f8>
 800205e:	486f      	ldr	r0, [pc, #444]	; (800221c <UART_SetConfig+0x64c>)
 8002060:	e7b2      	b.n	8001fc8 <UART_SetConfig+0x3f8>
 8002062:	0300      	lsls	r0, r0, #12
 8002064:	e7b0      	b.n	8001fc8 <UART_SetConfig+0x3f8>
 8002066:	02c0      	lsls	r0, r0, #11
 8002068:	e7ae      	b.n	8001fc8 <UART_SetConfig+0x3f8>
 800206a:	0280      	lsls	r0, r0, #10
 800206c:	e7ac      	b.n	8001fc8 <UART_SetConfig+0x3f8>
 800206e:	0240      	lsls	r0, r0, #9
 8002070:	e7aa      	b.n	8001fc8 <UART_SetConfig+0x3f8>
            ret = HAL_ERROR;
 8002072:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002074:	2000      	movs	r0, #0
 8002076:	e784      	b.n	8001f82 <UART_SetConfig+0x3b2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002078:	2b00      	cmp	r3, #0
 800207a:	d02f      	beq.n	80020dc <UART_SetConfig+0x50c>
 800207c:	2b01      	cmp	r3, #1
 800207e:	d019      	beq.n	80020b4 <UART_SetConfig+0x4e4>
 8002080:	2b02      	cmp	r3, #2
 8002082:	d019      	beq.n	80020b8 <UART_SetConfig+0x4e8>
 8002084:	2b03      	cmp	r3, #3
 8002086:	d019      	beq.n	80020bc <UART_SetConfig+0x4ec>
 8002088:	2b04      	cmp	r3, #4
 800208a:	d019      	beq.n	80020c0 <UART_SetConfig+0x4f0>
 800208c:	2b05      	cmp	r3, #5
 800208e:	d019      	beq.n	80020c4 <UART_SetConfig+0x4f4>
 8002090:	2b06      	cmp	r3, #6
 8002092:	d019      	beq.n	80020c8 <UART_SetConfig+0x4f8>
 8002094:	2b07      	cmp	r3, #7
 8002096:	d019      	beq.n	80020cc <UART_SetConfig+0x4fc>
 8002098:	2b08      	cmp	r3, #8
 800209a:	d019      	beq.n	80020d0 <UART_SetConfig+0x500>
 800209c:	2b09      	cmp	r3, #9
 800209e:	d019      	beq.n	80020d4 <UART_SetConfig+0x504>
 80020a0:	2b0a      	cmp	r3, #10
 80020a2:	d019      	beq.n	80020d8 <UART_SetConfig+0x508>
 80020a4:	2b0b      	cmp	r3, #11
 80020a6:	d119      	bne.n	80020dc <UART_SetConfig+0x50c>
 80020a8:	485d      	ldr	r0, [pc, #372]	; (8002220 <UART_SetConfig+0x650>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80020aa:	6863      	ldr	r3, [r4, #4]
 80020ac:	6861      	ldr	r1, [r4, #4]
 80020ae:	085b      	lsrs	r3, r3, #1
 80020b0:	1818      	adds	r0, r3, r0
 80020b2:	e173      	b.n	800239c <UART_SetConfig+0x7cc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80020b4:	484b      	ldr	r0, [pc, #300]	; (80021e4 <UART_SetConfig+0x614>)
 80020b6:	e7f8      	b.n	80020aa <UART_SetConfig+0x4da>
 80020b8:	485a      	ldr	r0, [pc, #360]	; (8002224 <UART_SetConfig+0x654>)
 80020ba:	e7f6      	b.n	80020aa <UART_SetConfig+0x4da>
 80020bc:	485a      	ldr	r0, [pc, #360]	; (8002228 <UART_SetConfig+0x658>)
 80020be:	e7f4      	b.n	80020aa <UART_SetConfig+0x4da>
 80020c0:	485a      	ldr	r0, [pc, #360]	; (800222c <UART_SetConfig+0x65c>)
 80020c2:	e7f2      	b.n	80020aa <UART_SetConfig+0x4da>
 80020c4:	485a      	ldr	r0, [pc, #360]	; (8002230 <UART_SetConfig+0x660>)
 80020c6:	e7f0      	b.n	80020aa <UART_SetConfig+0x4da>
 80020c8:	485a      	ldr	r0, [pc, #360]	; (8002234 <UART_SetConfig+0x664>)
 80020ca:	e7ee      	b.n	80020aa <UART_SetConfig+0x4da>
 80020cc:	485a      	ldr	r0, [pc, #360]	; (8002238 <UART_SetConfig+0x668>)
 80020ce:	e7ec      	b.n	80020aa <UART_SetConfig+0x4da>
 80020d0:	485a      	ldr	r0, [pc, #360]	; (800223c <UART_SetConfig+0x66c>)
 80020d2:	e7ea      	b.n	80020aa <UART_SetConfig+0x4da>
 80020d4:	485a      	ldr	r0, [pc, #360]	; (8002240 <UART_SetConfig+0x670>)
 80020d6:	e7e8      	b.n	80020aa <UART_SetConfig+0x4da>
 80020d8:	485a      	ldr	r0, [pc, #360]	; (8002244 <UART_SetConfig+0x674>)
 80020da:	e7e6      	b.n	80020aa <UART_SetConfig+0x4da>
 80020dc:	484b      	ldr	r0, [pc, #300]	; (800220c <UART_SetConfig+0x63c>)
 80020de:	e7e4      	b.n	80020aa <UART_SetConfig+0x4da>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80020e0:	f7ff f908 	bl	80012f4 <HAL_RCC_GetSysClockFreq>
 80020e4:	e12d      	b.n	8002342 <UART_SetConfig+0x772>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d018      	beq.n	800211c <UART_SetConfig+0x54c>
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d019      	beq.n	8002122 <UART_SetConfig+0x552>
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d01a      	beq.n	8002128 <UART_SetConfig+0x558>
 80020f2:	2b03      	cmp	r3, #3
 80020f4:	d01b      	beq.n	800212e <UART_SetConfig+0x55e>
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d01b      	beq.n	8002132 <UART_SetConfig+0x562>
 80020fa:	2b05      	cmp	r3, #5
 80020fc:	d01c      	beq.n	8002138 <UART_SetConfig+0x568>
 80020fe:	2b06      	cmp	r3, #6
 8002100:	d01c      	beq.n	800213c <UART_SetConfig+0x56c>
 8002102:	2080      	movs	r0, #128	; 0x80
 8002104:	2b07      	cmp	r3, #7
 8002106:	d01b      	beq.n	8002140 <UART_SetConfig+0x570>
 8002108:	2b08      	cmp	r3, #8
 800210a:	d01b      	beq.n	8002144 <UART_SetConfig+0x574>
 800210c:	2b09      	cmp	r3, #9
 800210e:	d01b      	beq.n	8002148 <UART_SetConfig+0x578>
 8002110:	2b0a      	cmp	r3, #10
 8002112:	d01b      	beq.n	800214c <UART_SetConfig+0x57c>
 8002114:	2b0b      	cmp	r3, #11
 8002116:	d102      	bne.n	800211e <UART_SetConfig+0x54e>
 8002118:	0040      	lsls	r0, r0, #1
 800211a:	e7c6      	b.n	80020aa <UART_SetConfig+0x4da>
 800211c:	2080      	movs	r0, #128	; 0x80
 800211e:	0240      	lsls	r0, r0, #9
 8002120:	e7c3      	b.n	80020aa <UART_SetConfig+0x4da>
 8002122:	2080      	movs	r0, #128	; 0x80
 8002124:	0200      	lsls	r0, r0, #8
 8002126:	e7c0      	b.n	80020aa <UART_SetConfig+0x4da>
 8002128:	2080      	movs	r0, #128	; 0x80
 800212a:	01c0      	lsls	r0, r0, #7
 800212c:	e7bd      	b.n	80020aa <UART_SetConfig+0x4da>
 800212e:	4846      	ldr	r0, [pc, #280]	; (8002248 <UART_SetConfig+0x678>)
 8002130:	e7bb      	b.n	80020aa <UART_SetConfig+0x4da>
 8002132:	2080      	movs	r0, #128	; 0x80
 8002134:	0180      	lsls	r0, r0, #6
 8002136:	e7b8      	b.n	80020aa <UART_SetConfig+0x4da>
 8002138:	4844      	ldr	r0, [pc, #272]	; (800224c <UART_SetConfig+0x67c>)
 800213a:	e7b6      	b.n	80020aa <UART_SetConfig+0x4da>
 800213c:	4844      	ldr	r0, [pc, #272]	; (8002250 <UART_SetConfig+0x680>)
 800213e:	e7b4      	b.n	80020aa <UART_SetConfig+0x4da>
 8002140:	0140      	lsls	r0, r0, #5
 8002142:	e7b2      	b.n	80020aa <UART_SetConfig+0x4da>
 8002144:	0100      	lsls	r0, r0, #4
 8002146:	e7b0      	b.n	80020aa <UART_SetConfig+0x4da>
 8002148:	00c0      	lsls	r0, r0, #3
 800214a:	e7ae      	b.n	80020aa <UART_SetConfig+0x4da>
 800214c:	0080      	lsls	r0, r0, #2
 800214e:	e7ac      	b.n	80020aa <UART_SetConfig+0x4da>
    switch (clocksource)
 8002150:	2808      	cmp	r0, #8
 8002152:	d900      	bls.n	8002156 <UART_SetConfig+0x586>
 8002154:	e0eb      	b.n	800232e <UART_SetConfig+0x75e>
 8002156:	f7fd ffd7 	bl	8000108 <__gnu_thumb1_case_uqi>
 800215a:	ea05      	.short	0xea05
 800215c:	eab3ea7f 	.word	0xeab3ea7f
 8002160:	eaea      	.short	0xeaea
 8002162:	b6          	.byte	0xb6
 8002163:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002164:	f7ff f9b6 	bl	80014d4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002168:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800216a:	2101      	movs	r1, #1
 800216c:	2b00      	cmp	r3, #0
 800216e:	d021      	beq.n	80021b4 <UART_SetConfig+0x5e4>
 8002170:	1849      	adds	r1, r1, r1
 8002172:	2b01      	cmp	r3, #1
 8002174:	d01e      	beq.n	80021b4 <UART_SetConfig+0x5e4>
 8002176:	3102      	adds	r1, #2
 8002178:	2b02      	cmp	r3, #2
 800217a:	d01b      	beq.n	80021b4 <UART_SetConfig+0x5e4>
 800217c:	3102      	adds	r1, #2
 800217e:	2b03      	cmp	r3, #3
 8002180:	d018      	beq.n	80021b4 <UART_SetConfig+0x5e4>
 8002182:	3102      	adds	r1, #2
 8002184:	2b04      	cmp	r3, #4
 8002186:	d015      	beq.n	80021b4 <UART_SetConfig+0x5e4>
 8002188:	3102      	adds	r1, #2
 800218a:	2b05      	cmp	r3, #5
 800218c:	d012      	beq.n	80021b4 <UART_SetConfig+0x5e4>
 800218e:	3102      	adds	r1, #2
 8002190:	2b06      	cmp	r3, #6
 8002192:	d00f      	beq.n	80021b4 <UART_SetConfig+0x5e4>
 8002194:	3104      	adds	r1, #4
 8002196:	2b07      	cmp	r3, #7
 8002198:	d00c      	beq.n	80021b4 <UART_SetConfig+0x5e4>
 800219a:	3110      	adds	r1, #16
 800219c:	2b08      	cmp	r3, #8
 800219e:	d009      	beq.n	80021b4 <UART_SetConfig+0x5e4>
 80021a0:	3120      	adds	r1, #32
 80021a2:	2b09      	cmp	r3, #9
 80021a4:	d006      	beq.n	80021b4 <UART_SetConfig+0x5e4>
 80021a6:	3140      	adds	r1, #64	; 0x40
 80021a8:	2b0a      	cmp	r3, #10
 80021aa:	d003      	beq.n	80021b4 <UART_SetConfig+0x5e4>
 80021ac:	397f      	subs	r1, #127	; 0x7f
 80021ae:	2b0b      	cmp	r3, #11
 80021b0:	d100      	bne.n	80021b4 <UART_SetConfig+0x5e4>
 80021b2:	31ff      	adds	r1, #255	; 0xff
 80021b4:	6865      	ldr	r5, [r4, #4]
 80021b6:	f7fd ffbb 	bl	8000130 <__udivsi3>
 80021ba:	0029      	movs	r1, r5
 80021bc:	086b      	lsrs	r3, r5, #1
 80021be:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80021c0:	f7fd ffb6 	bl	8000130 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 80021c4:	2200      	movs	r2, #0
 80021c6:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80021c8:	0019      	movs	r1, r3
 80021ca:	4822      	ldr	r0, [pc, #136]	; (8002254 <UART_SetConfig+0x684>)
 80021cc:	3910      	subs	r1, #16
 80021ce:	4281      	cmp	r1, r0
 80021d0:	d900      	bls.n	80021d4 <UART_SetConfig+0x604>
 80021d2:	e561      	b.n	8001c98 <UART_SetConfig+0xc8>
      huart->Instance->BRR = usartdiv;
 80021d4:	6821      	ldr	r1, [r4, #0]
 80021d6:	60cb      	str	r3, [r1, #12]
 80021d8:	e55f      	b.n	8001c9a <UART_SetConfig+0xca>
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	fffffd00 	.word	0xfffffd00
 80021e0:	000ffcff 	.word	0x000ffcff
 80021e4:	00f42400 	.word	0x00f42400
 80021e8:	7a120000 	.word	0x7a120000
 80021ec:	3d090000 	.word	0x3d090000
 80021f0:	28b0aa00 	.word	0x28b0aa00
 80021f4:	1e848000 	.word	0x1e848000
 80021f8:	186a0000 	.word	0x186a0000
 80021fc:	14585500 	.word	0x14585500
 8002200:	0f424000 	.word	0x0f424000
 8002204:	07a12000 	.word	0x07a12000
 8002208:	03d09000 	.word	0x03d09000
 800220c:	01e84800 	.word	0x01e84800
 8002210:	f4240000 	.word	0xf4240000
 8002214:	00155500 	.word	0x00155500
 8002218:	000ccc00 	.word	0x000ccc00
 800221c:	000aaa00 	.word	0x000aaa00
 8002220:	0001e848 	.word	0x0001e848
 8002224:	007a1200 	.word	0x007a1200
 8002228:	00516154 	.word	0x00516154
 800222c:	003d0900 	.word	0x003d0900
 8002230:	0030d400 	.word	0x0030d400
 8002234:	0028b0aa 	.word	0x0028b0aa
 8002238:	001e8480 	.word	0x001e8480
 800223c:	000f4240 	.word	0x000f4240
 8002240:	0007a120 	.word	0x0007a120
 8002244:	0003d090 	.word	0x0003d090
 8002248:	00002aaa 	.word	0x00002aaa
 800224c:	00001998 	.word	0x00001998
 8002250:	00001554 	.word	0x00001554
 8002254:	0000ffef 	.word	0x0000ffef
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002258:	2b00      	cmp	r3, #0
 800225a:	d02f      	beq.n	80022bc <UART_SetConfig+0x6ec>
 800225c:	2b01      	cmp	r3, #1
 800225e:	d019      	beq.n	8002294 <UART_SetConfig+0x6c4>
 8002260:	2b02      	cmp	r3, #2
 8002262:	d019      	beq.n	8002298 <UART_SetConfig+0x6c8>
 8002264:	2b03      	cmp	r3, #3
 8002266:	d019      	beq.n	800229c <UART_SetConfig+0x6cc>
 8002268:	2b04      	cmp	r3, #4
 800226a:	d019      	beq.n	80022a0 <UART_SetConfig+0x6d0>
 800226c:	2b05      	cmp	r3, #5
 800226e:	d019      	beq.n	80022a4 <UART_SetConfig+0x6d4>
 8002270:	2b06      	cmp	r3, #6
 8002272:	d019      	beq.n	80022a8 <UART_SetConfig+0x6d8>
 8002274:	2b07      	cmp	r3, #7
 8002276:	d019      	beq.n	80022ac <UART_SetConfig+0x6dc>
 8002278:	2b08      	cmp	r3, #8
 800227a:	d019      	beq.n	80022b0 <UART_SetConfig+0x6e0>
 800227c:	2b09      	cmp	r3, #9
 800227e:	d019      	beq.n	80022b4 <UART_SetConfig+0x6e4>
 8002280:	2b0a      	cmp	r3, #10
 8002282:	d019      	beq.n	80022b8 <UART_SetConfig+0x6e8>
 8002284:	2b0b      	cmp	r3, #11
 8002286:	d119      	bne.n	80022bc <UART_SetConfig+0x6ec>
 8002288:	484e      	ldr	r0, [pc, #312]	; (80023c4 <UART_SetConfig+0x7f4>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800228a:	6863      	ldr	r3, [r4, #4]
 800228c:	6861      	ldr	r1, [r4, #4]
 800228e:	085b      	lsrs	r3, r3, #1
 8002290:	1818      	adds	r0, r3, r0
 8002292:	e795      	b.n	80021c0 <UART_SetConfig+0x5f0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002294:	484c      	ldr	r0, [pc, #304]	; (80023c8 <UART_SetConfig+0x7f8>)
 8002296:	e7f8      	b.n	800228a <UART_SetConfig+0x6ba>
 8002298:	484c      	ldr	r0, [pc, #304]	; (80023cc <UART_SetConfig+0x7fc>)
 800229a:	e7f6      	b.n	800228a <UART_SetConfig+0x6ba>
 800229c:	484c      	ldr	r0, [pc, #304]	; (80023d0 <UART_SetConfig+0x800>)
 800229e:	e7f4      	b.n	800228a <UART_SetConfig+0x6ba>
 80022a0:	484c      	ldr	r0, [pc, #304]	; (80023d4 <UART_SetConfig+0x804>)
 80022a2:	e7f2      	b.n	800228a <UART_SetConfig+0x6ba>
 80022a4:	484c      	ldr	r0, [pc, #304]	; (80023d8 <UART_SetConfig+0x808>)
 80022a6:	e7f0      	b.n	800228a <UART_SetConfig+0x6ba>
 80022a8:	484c      	ldr	r0, [pc, #304]	; (80023dc <UART_SetConfig+0x80c>)
 80022aa:	e7ee      	b.n	800228a <UART_SetConfig+0x6ba>
 80022ac:	484c      	ldr	r0, [pc, #304]	; (80023e0 <UART_SetConfig+0x810>)
 80022ae:	e7ec      	b.n	800228a <UART_SetConfig+0x6ba>
 80022b0:	484c      	ldr	r0, [pc, #304]	; (80023e4 <UART_SetConfig+0x814>)
 80022b2:	e7ea      	b.n	800228a <UART_SetConfig+0x6ba>
 80022b4:	484c      	ldr	r0, [pc, #304]	; (80023e8 <UART_SetConfig+0x818>)
 80022b6:	e7e8      	b.n	800228a <UART_SetConfig+0x6ba>
 80022b8:	484c      	ldr	r0, [pc, #304]	; (80023ec <UART_SetConfig+0x81c>)
 80022ba:	e7e6      	b.n	800228a <UART_SetConfig+0x6ba>
 80022bc:	484c      	ldr	r0, [pc, #304]	; (80023f0 <UART_SetConfig+0x820>)
 80022be:	e7e4      	b.n	800228a <UART_SetConfig+0x6ba>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80022c0:	f7ff f818 	bl	80012f4 <HAL_RCC_GetSysClockFreq>
 80022c4:	e750      	b.n	8002168 <UART_SetConfig+0x598>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d018      	beq.n	80022fc <UART_SetConfig+0x72c>
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d018      	beq.n	8002300 <UART_SetConfig+0x730>
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d019      	beq.n	8002306 <UART_SetConfig+0x736>
 80022d2:	2b03      	cmp	r3, #3
 80022d4:	d01a      	beq.n	800230c <UART_SetConfig+0x73c>
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	d01a      	beq.n	8002310 <UART_SetConfig+0x740>
 80022da:	2b05      	cmp	r3, #5
 80022dc:	d01b      	beq.n	8002316 <UART_SetConfig+0x746>
 80022de:	2b06      	cmp	r3, #6
 80022e0:	d01b      	beq.n	800231a <UART_SetConfig+0x74a>
 80022e2:	2080      	movs	r0, #128	; 0x80
 80022e4:	2b07      	cmp	r3, #7
 80022e6:	d01a      	beq.n	800231e <UART_SetConfig+0x74e>
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	d01a      	beq.n	8002322 <UART_SetConfig+0x752>
 80022ec:	2b09      	cmp	r3, #9
 80022ee:	d01a      	beq.n	8002326 <UART_SetConfig+0x756>
 80022f0:	2b0a      	cmp	r3, #10
 80022f2:	d01a      	beq.n	800232a <UART_SetConfig+0x75a>
 80022f4:	2b0b      	cmp	r3, #11
 80022f6:	d0c8      	beq.n	800228a <UART_SetConfig+0x6ba>
 80022f8:	0200      	lsls	r0, r0, #8
 80022fa:	e7c6      	b.n	800228a <UART_SetConfig+0x6ba>
 80022fc:	2080      	movs	r0, #128	; 0x80
 80022fe:	e7fb      	b.n	80022f8 <UART_SetConfig+0x728>
 8002300:	2080      	movs	r0, #128	; 0x80
 8002302:	01c0      	lsls	r0, r0, #7
 8002304:	e7c1      	b.n	800228a <UART_SetConfig+0x6ba>
 8002306:	2080      	movs	r0, #128	; 0x80
 8002308:	0180      	lsls	r0, r0, #6
 800230a:	e7be      	b.n	800228a <UART_SetConfig+0x6ba>
 800230c:	4839      	ldr	r0, [pc, #228]	; (80023f4 <UART_SetConfig+0x824>)
 800230e:	e7bc      	b.n	800228a <UART_SetConfig+0x6ba>
 8002310:	2080      	movs	r0, #128	; 0x80
 8002312:	0140      	lsls	r0, r0, #5
 8002314:	e7b9      	b.n	800228a <UART_SetConfig+0x6ba>
 8002316:	4838      	ldr	r0, [pc, #224]	; (80023f8 <UART_SetConfig+0x828>)
 8002318:	e7b7      	b.n	800228a <UART_SetConfig+0x6ba>
 800231a:	4838      	ldr	r0, [pc, #224]	; (80023fc <UART_SetConfig+0x82c>)
 800231c:	e7b5      	b.n	800228a <UART_SetConfig+0x6ba>
 800231e:	0100      	lsls	r0, r0, #4
 8002320:	e7b3      	b.n	800228a <UART_SetConfig+0x6ba>
 8002322:	00c0      	lsls	r0, r0, #3
 8002324:	e7b1      	b.n	800228a <UART_SetConfig+0x6ba>
 8002326:	0080      	lsls	r0, r0, #2
 8002328:	e7af      	b.n	800228a <UART_SetConfig+0x6ba>
 800232a:	0040      	lsls	r0, r0, #1
 800232c:	e7ad      	b.n	800228a <UART_SetConfig+0x6ba>
        ret = HAL_ERROR;
 800232e:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002330:	2300      	movs	r3, #0
 8002332:	e749      	b.n	80021c8 <UART_SetConfig+0x5f8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002334:	2380      	movs	r3, #128	; 0x80
 8002336:	021b      	lsls	r3, r3, #8
 8002338:	4299      	cmp	r1, r3
 800233a:	d000      	beq.n	800233e <UART_SetConfig+0x76e>
 800233c:	e712      	b.n	8002164 <UART_SetConfig+0x594>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800233e:	f7ff f8c9 	bl	80014d4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002342:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002344:	2101      	movs	r1, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d021      	beq.n	800238e <UART_SetConfig+0x7be>
 800234a:	1849      	adds	r1, r1, r1
 800234c:	2b01      	cmp	r3, #1
 800234e:	d01e      	beq.n	800238e <UART_SetConfig+0x7be>
 8002350:	3102      	adds	r1, #2
 8002352:	2b02      	cmp	r3, #2
 8002354:	d01b      	beq.n	800238e <UART_SetConfig+0x7be>
 8002356:	3102      	adds	r1, #2
 8002358:	2b03      	cmp	r3, #3
 800235a:	d018      	beq.n	800238e <UART_SetConfig+0x7be>
 800235c:	3102      	adds	r1, #2
 800235e:	2b04      	cmp	r3, #4
 8002360:	d015      	beq.n	800238e <UART_SetConfig+0x7be>
 8002362:	3102      	adds	r1, #2
 8002364:	2b05      	cmp	r3, #5
 8002366:	d012      	beq.n	800238e <UART_SetConfig+0x7be>
 8002368:	3102      	adds	r1, #2
 800236a:	2b06      	cmp	r3, #6
 800236c:	d00f      	beq.n	800238e <UART_SetConfig+0x7be>
 800236e:	3104      	adds	r1, #4
 8002370:	2b07      	cmp	r3, #7
 8002372:	d00c      	beq.n	800238e <UART_SetConfig+0x7be>
 8002374:	3110      	adds	r1, #16
 8002376:	2b08      	cmp	r3, #8
 8002378:	d009      	beq.n	800238e <UART_SetConfig+0x7be>
 800237a:	3120      	adds	r1, #32
 800237c:	2b09      	cmp	r3, #9
 800237e:	d006      	beq.n	800238e <UART_SetConfig+0x7be>
 8002380:	3140      	adds	r1, #64	; 0x40
 8002382:	2b0a      	cmp	r3, #10
 8002384:	d003      	beq.n	800238e <UART_SetConfig+0x7be>
 8002386:	397f      	subs	r1, #127	; 0x7f
 8002388:	2b0b      	cmp	r3, #11
 800238a:	d100      	bne.n	800238e <UART_SetConfig+0x7be>
 800238c:	31ff      	adds	r1, #255	; 0xff
 800238e:	f7fd fecf 	bl	8000130 <__udivsi3>
 8002392:	6865      	ldr	r5, [r4, #4]
 8002394:	0040      	lsls	r0, r0, #1
 8002396:	0029      	movs	r1, r5
 8002398:	086b      	lsrs	r3, r5, #1
 800239a:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800239c:	f7fd fec8 	bl	8000130 <__udivsi3>
 80023a0:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80023a2:	0003      	movs	r3, r0
 80023a4:	4a16      	ldr	r2, [pc, #88]	; (8002400 <UART_SetConfig+0x830>)
 80023a6:	3b10      	subs	r3, #16
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d900      	bls.n	80023ae <UART_SetConfig+0x7de>
 80023ac:	e474      	b.n	8001c98 <UART_SetConfig+0xc8>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80023ae:	230f      	movs	r3, #15
 80023b0:	0002      	movs	r2, r0
 80023b2:	439a      	bics	r2, r3
 80023b4:	0013      	movs	r3, r2
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80023b6:	0700      	lsls	r0, r0, #28
      huart->Instance->BRR = brrtemp;
 80023b8:	6822      	ldr	r2, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80023ba:	0f40      	lsrs	r0, r0, #29
      huart->Instance->BRR = brrtemp;
 80023bc:	4318      	orrs	r0, r3
 80023be:	60d0      	str	r0, [r2, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	e46a      	b.n	8001c9a <UART_SetConfig+0xca>
 80023c4:	0000f424 	.word	0x0000f424
 80023c8:	007a1200 	.word	0x007a1200
 80023cc:	003d0900 	.word	0x003d0900
 80023d0:	0028b0aa 	.word	0x0028b0aa
 80023d4:	001e8480 	.word	0x001e8480
 80023d8:	00186a00 	.word	0x00186a00
 80023dc:	00145855 	.word	0x00145855
 80023e0:	000f4240 	.word	0x000f4240
 80023e4:	0007a120 	.word	0x0007a120
 80023e8:	0003d090 	.word	0x0003d090
 80023ec:	0001e848 	.word	0x0001e848
 80023f0:	00f42400 	.word	0x00f42400
 80023f4:	00001555 	.word	0x00001555
 80023f8:	00000ccc 	.word	0x00000ccc
 80023fc:	00000aaa 	.word	0x00000aaa
 8002400:	0000ffef 	.word	0x0000ffef

08002404 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002404:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 8002406:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002408:	07da      	lsls	r2, r3, #31
 800240a:	d506      	bpl.n	800241a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800240c:	6801      	ldr	r1, [r0, #0]
 800240e:	4c28      	ldr	r4, [pc, #160]	; (80024b0 <UART_AdvFeatureConfig+0xac>)
 8002410:	684a      	ldr	r2, [r1, #4]
 8002412:	4022      	ands	r2, r4
 8002414:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002416:	4322      	orrs	r2, r4
 8002418:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800241a:	079a      	lsls	r2, r3, #30
 800241c:	d506      	bpl.n	800242c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800241e:	6801      	ldr	r1, [r0, #0]
 8002420:	4c24      	ldr	r4, [pc, #144]	; (80024b4 <UART_AdvFeatureConfig+0xb0>)
 8002422:	684a      	ldr	r2, [r1, #4]
 8002424:	4022      	ands	r2, r4
 8002426:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002428:	4322      	orrs	r2, r4
 800242a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800242c:	075a      	lsls	r2, r3, #29
 800242e:	d506      	bpl.n	800243e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002430:	6801      	ldr	r1, [r0, #0]
 8002432:	4c21      	ldr	r4, [pc, #132]	; (80024b8 <UART_AdvFeatureConfig+0xb4>)
 8002434:	684a      	ldr	r2, [r1, #4]
 8002436:	4022      	ands	r2, r4
 8002438:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800243a:	4322      	orrs	r2, r4
 800243c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800243e:	071a      	lsls	r2, r3, #28
 8002440:	d506      	bpl.n	8002450 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002442:	6801      	ldr	r1, [r0, #0]
 8002444:	4c1d      	ldr	r4, [pc, #116]	; (80024bc <UART_AdvFeatureConfig+0xb8>)
 8002446:	684a      	ldr	r2, [r1, #4]
 8002448:	4022      	ands	r2, r4
 800244a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800244c:	4322      	orrs	r2, r4
 800244e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002450:	06da      	lsls	r2, r3, #27
 8002452:	d506      	bpl.n	8002462 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002454:	6801      	ldr	r1, [r0, #0]
 8002456:	4c1a      	ldr	r4, [pc, #104]	; (80024c0 <UART_AdvFeatureConfig+0xbc>)
 8002458:	688a      	ldr	r2, [r1, #8]
 800245a:	4022      	ands	r2, r4
 800245c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800245e:	4322      	orrs	r2, r4
 8002460:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002462:	069a      	lsls	r2, r3, #26
 8002464:	d506      	bpl.n	8002474 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002466:	6801      	ldr	r1, [r0, #0]
 8002468:	4c16      	ldr	r4, [pc, #88]	; (80024c4 <UART_AdvFeatureConfig+0xc0>)
 800246a:	688a      	ldr	r2, [r1, #8]
 800246c:	4022      	ands	r2, r4
 800246e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002470:	4322      	orrs	r2, r4
 8002472:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002474:	065a      	lsls	r2, r3, #25
 8002476:	d510      	bpl.n	800249a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002478:	6801      	ldr	r1, [r0, #0]
 800247a:	4d13      	ldr	r5, [pc, #76]	; (80024c8 <UART_AdvFeatureConfig+0xc4>)
 800247c:	684a      	ldr	r2, [r1, #4]
 800247e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002480:	402a      	ands	r2, r5
 8002482:	4322      	orrs	r2, r4
 8002484:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002486:	2280      	movs	r2, #128	; 0x80
 8002488:	0352      	lsls	r2, r2, #13
 800248a:	4294      	cmp	r4, r2
 800248c:	d105      	bne.n	800249a <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800248e:	684a      	ldr	r2, [r1, #4]
 8002490:	4c0e      	ldr	r4, [pc, #56]	; (80024cc <UART_AdvFeatureConfig+0xc8>)
 8002492:	4022      	ands	r2, r4
 8002494:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8002496:	4322      	orrs	r2, r4
 8002498:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800249a:	061b      	lsls	r3, r3, #24
 800249c:	d506      	bpl.n	80024ac <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800249e:	6802      	ldr	r2, [r0, #0]
 80024a0:	490b      	ldr	r1, [pc, #44]	; (80024d0 <UART_AdvFeatureConfig+0xcc>)
 80024a2:	6853      	ldr	r3, [r2, #4]
 80024a4:	400b      	ands	r3, r1
 80024a6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80024a8:	430b      	orrs	r3, r1
 80024aa:	6053      	str	r3, [r2, #4]
}
 80024ac:	bd30      	pop	{r4, r5, pc}
 80024ae:	46c0      	nop			; (mov r8, r8)
 80024b0:	fffdffff 	.word	0xfffdffff
 80024b4:	fffeffff 	.word	0xfffeffff
 80024b8:	fffbffff 	.word	0xfffbffff
 80024bc:	ffff7fff 	.word	0xffff7fff
 80024c0:	ffffefff 	.word	0xffffefff
 80024c4:	ffffdfff 	.word	0xffffdfff
 80024c8:	ffefffff 	.word	0xffefffff
 80024cc:	ff9fffff 	.word	0xff9fffff
 80024d0:	fff7ffff 	.word	0xfff7ffff

080024d4 <UART_WaitOnFlagUntilTimeout>:
{
 80024d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024d6:	0004      	movs	r4, r0
 80024d8:	000e      	movs	r6, r1
 80024da:	0015      	movs	r5, r2
 80024dc:	001f      	movs	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024de:	6822      	ldr	r2, [r4, #0]
 80024e0:	69d3      	ldr	r3, [r2, #28]
 80024e2:	4033      	ands	r3, r6
 80024e4:	1b9b      	subs	r3, r3, r6
 80024e6:	4259      	negs	r1, r3
 80024e8:	414b      	adcs	r3, r1
 80024ea:	42ab      	cmp	r3, r5
 80024ec:	d001      	beq.n	80024f2 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80024ee:	2000      	movs	r0, #0
 80024f0:	e01e      	b.n	8002530 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80024f2:	9b06      	ldr	r3, [sp, #24]
 80024f4:	3301      	adds	r3, #1
 80024f6:	d0f3      	beq.n	80024e0 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024f8:	f7fe f8ba 	bl	8000670 <HAL_GetTick>
 80024fc:	9b06      	ldr	r3, [sp, #24]
 80024fe:	1bc0      	subs	r0, r0, r7
 8002500:	4283      	cmp	r3, r0
 8002502:	d301      	bcc.n	8002508 <UART_WaitOnFlagUntilTimeout+0x34>
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1ea      	bne.n	80024de <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002508:	0022      	movs	r2, r4
 800250a:	ca08      	ldmia	r2!, {r3}
 800250c:	4809      	ldr	r0, [pc, #36]	; (8002534 <UART_WaitOnFlagUntilTimeout+0x60>)
 800250e:	6819      	ldr	r1, [r3, #0]
 8002510:	4001      	ands	r1, r0
 8002512:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002514:	6899      	ldr	r1, [r3, #8]
 8002516:	30a3      	adds	r0, #163	; 0xa3
 8002518:	30ff      	adds	r0, #255	; 0xff
 800251a:	4381      	bics	r1, r0
 800251c:	6099      	str	r1, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800251e:	2320      	movs	r3, #32
 8002520:	67d3      	str	r3, [r2, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8002522:	0022      	movs	r2, r4
 8002524:	3208      	adds	r2, #8
 8002526:	67d3      	str	r3, [r2, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8002528:	2300      	movs	r3, #0
 800252a:	347c      	adds	r4, #124	; 0x7c
 800252c:	7023      	strb	r3, [r4, #0]
 800252e:	3002      	adds	r0, #2
}
 8002530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002532:	46c0      	nop			; (mov r8, r8)
 8002534:	fffffe5f 	.word	0xfffffe5f

08002538 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002538:	0003      	movs	r3, r0
{
 800253a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800253c:	2600      	movs	r6, #0
{
 800253e:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002540:	3388      	adds	r3, #136	; 0x88
 8002542:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 8002544:	f7fe f894 	bl	8000670 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002548:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800254a:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	071b      	lsls	r3, r3, #28
 8002550:	d417      	bmi.n	8002582 <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002552:	6823      	ldr	r3, [r4, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	075b      	lsls	r3, r3, #29
 8002558:	d50a      	bpl.n	8002570 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800255a:	2180      	movs	r1, #128	; 0x80
 800255c:	4b0f      	ldr	r3, [pc, #60]	; (800259c <UART_CheckIdleState+0x64>)
 800255e:	2200      	movs	r2, #0
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	03c9      	lsls	r1, r1, #15
 8002564:	002b      	movs	r3, r5
 8002566:	0020      	movs	r0, r4
 8002568:	f7ff ffb4 	bl	80024d4 <UART_WaitOnFlagUntilTimeout>
 800256c:	2800      	cmp	r0, #0
 800256e:	d113      	bne.n	8002598 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8002570:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002572:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002574:	1d22      	adds	r2, r4, #4
 8002576:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8002578:	347c      	adds	r4, #124	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800257a:	3204      	adds	r2, #4
 800257c:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 800257e:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8002580:	e00b      	b.n	800259a <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002582:	2180      	movs	r1, #128	; 0x80
 8002584:	4b05      	ldr	r3, [pc, #20]	; (800259c <UART_CheckIdleState+0x64>)
 8002586:	0032      	movs	r2, r6
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	0389      	lsls	r1, r1, #14
 800258c:	0003      	movs	r3, r0
 800258e:	0020      	movs	r0, r4
 8002590:	f7ff ffa0 	bl	80024d4 <UART_WaitOnFlagUntilTimeout>
 8002594:	2800      	cmp	r0, #0
 8002596:	d0dc      	beq.n	8002552 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8002598:	2003      	movs	r0, #3
}
 800259a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800259c:	01ffffff 	.word	0x01ffffff

080025a0 <HAL_UART_Init>:
{
 80025a0:	b570      	push	{r4, r5, r6, lr}
 80025a2:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80025a4:	d101      	bne.n	80025aa <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80025a6:	2001      	movs	r0, #1
}
 80025a8:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80025aa:	1d05      	adds	r5, r0, #4
 80025ac:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d104      	bne.n	80025bc <HAL_UART_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 80025b2:	0002      	movs	r2, r0
 80025b4:	327c      	adds	r2, #124	; 0x7c
 80025b6:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80025b8:	f001 f95a 	bl	8003870 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80025bc:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80025be:	2101      	movs	r1, #1
 80025c0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80025c2:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 80025c4:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025c6:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80025c8:	438b      	bics	r3, r1
 80025ca:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025cc:	f7ff fb00 	bl	8001bd0 <UART_SetConfig>
 80025d0:	2801      	cmp	r0, #1
 80025d2:	d0e8      	beq.n	80025a6 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d002      	beq.n	80025e0 <HAL_UART_Init+0x40>
    UART_AdvFeatureConfig(huart);
 80025da:	0020      	movs	r0, r4
 80025dc:	f7ff ff12 	bl	8002404 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025e0:	6823      	ldr	r3, [r4, #0]
 80025e2:	4908      	ldr	r1, [pc, #32]	; (8002604 <HAL_UART_Init+0x64>)
 80025e4:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80025e6:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025e8:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025ea:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	438a      	bics	r2, r1
 80025f2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80025f4:	2201      	movs	r2, #1
 80025f6:	6819      	ldr	r1, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80025fc:	f7ff ff9c 	bl	8002538 <UART_CheckIdleState>
 8002600:	e7d2      	b.n	80025a8 <HAL_UART_Init+0x8>
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	ffffb7ff 	.word	0xffffb7ff

08002608 <UARTEx_SetNbDataToProcess>:
{
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8002608:	2301      	movs	r3, #1
{
 800260a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800260c:	b087      	sub	sp, #28
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800260e:	aa02      	add	r2, sp, #8
 8002610:	7013      	strb	r3, [r2, #0]
 8002612:	7053      	strb	r3, [r2, #1]
 8002614:	7093      	strb	r3, [r2, #2]
 8002616:	2203      	movs	r2, #3
 8002618:	a902      	add	r1, sp, #8
 800261a:	70ca      	strb	r2, [r1, #3]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800261c:	2502      	movs	r5, #2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800261e:	2200      	movs	r2, #0
 8002620:	2607      	movs	r6, #7
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8002622:	ac04      	add	r4, sp, #16
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8002624:	718a      	strb	r2, [r1, #6]
 8002626:	71ca      	strb	r2, [r1, #7]
 8002628:	710e      	strb	r6, [r1, #4]
 800262a:	714b      	strb	r3, [r1, #5]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800262c:	70a5      	strb	r5, [r4, #2]
 800262e:	2104      	movs	r1, #4
 8002630:	0007      	movs	r7, r0
 8002632:	0005      	movs	r5, r0
 8002634:	3208      	adds	r2, #8
 8002636:	7022      	strb	r2, [r4, #0]
 8002638:	7122      	strb	r2, [r4, #4]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800263a:	6e42      	ldr	r2, [r0, #100]	; 0x64
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800263c:	7061      	strb	r1, [r4, #1]
 800263e:	70e1      	strb	r1, [r4, #3]
 8002640:	7163      	strb	r3, [r4, #5]
 8002642:	71a3      	strb	r3, [r4, #6]
 8002644:	71e3      	strb	r3, [r4, #7]
 8002646:	376a      	adds	r7, #106	; 0x6a
 8002648:	3568      	adds	r5, #104	; 0x68
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800264a:	2a00      	cmp	r2, #0
 800264c:	d103      	bne.n	8002656 <UARTEx_SetNbDataToProcess+0x4e>
  {
    huart->NbTxDataToProcess = 1U;
 800264e:	803b      	strh	r3, [r7, #0]
    huart->NbRxDataToProcess = 1U;
 8002650:	802b      	strh	r3, [r5, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002652:	b007      	add	sp, #28
 8002654:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002656:	6803      	ldr	r3, [r0, #0]
 8002658:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800265a:	689b      	ldr	r3, [r3, #8]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800265c:	9201      	str	r2, [sp, #4]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800265e:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8002660:	aa02      	add	r2, sp, #8
 8002662:	5cd0      	ldrb	r0, [r2, r3]
 8002664:	5ce1      	ldrb	r1, [r4, r3]
 8002666:	00c0      	lsls	r0, r0, #3
 8002668:	f7fd fdec 	bl	8000244 <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800266c:	9b01      	ldr	r3, [sp, #4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800266e:	8038      	strh	r0, [r7, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002670:	0e5b      	lsrs	r3, r3, #25
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8002672:	401e      	ands	r6, r3
 8002674:	ab02      	add	r3, sp, #8
 8002676:	5d98      	ldrb	r0, [r3, r6]
 8002678:	5da1      	ldrb	r1, [r4, r6]
 800267a:	00c0      	lsls	r0, r0, #3
 800267c:	f7fd fde2 	bl	8000244 <__divsi3>
 8002680:	8028      	strh	r0, [r5, #0]
}
 8002682:	e7e6      	b.n	8002652 <UARTEx_SetNbDataToProcess+0x4a>

08002684 <HAL_UARTEx_WakeupCallback>:
 8002684:	4770      	bx	lr

08002686 <HAL_UARTEx_RxFifoFullCallback>:
 8002686:	4770      	bx	lr

08002688 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8002688:	4770      	bx	lr
	...

0800268c <HAL_UARTEx_DisableFifoMode>:
{
 800268c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800268e:	0004      	movs	r4, r0
 8002690:	347c      	adds	r4, #124	; 0x7c
 8002692:	7822      	ldrb	r2, [r4, #0]
 8002694:	2302      	movs	r3, #2
 8002696:	2a01      	cmp	r2, #1
 8002698:	d010      	beq.n	80026bc <HAL_UARTEx_DisableFifoMode+0x30>
  __HAL_UART_DISABLE(huart);
 800269a:	2601      	movs	r6, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800269c:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800269e:	1d05      	adds	r5, r0, #4
 80026a0:	3322      	adds	r3, #34	; 0x22
 80026a2:	67eb      	str	r3, [r5, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80026a4:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80026a6:	6813      	ldr	r3, [r2, #0]
 80026a8:	43b3      	bics	r3, r6
 80026aa:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80026ac:	4b04      	ldr	r3, [pc, #16]	; (80026c0 <HAL_UARTEx_DisableFifoMode+0x34>)
 80026ae:	4019      	ands	r1, r3
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80026b0:	2300      	movs	r3, #0
 80026b2:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80026b4:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80026b6:	2220      	movs	r2, #32
 80026b8:	67ea      	str	r2, [r5, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 80026ba:	7023      	strb	r3, [r4, #0]
}
 80026bc:	0018      	movs	r0, r3
 80026be:	bd70      	pop	{r4, r5, r6, pc}
 80026c0:	dfffffff 	.word	0xdfffffff

080026c4 <HAL_UARTEx_SetTxFifoThreshold>:
{
 80026c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 80026c6:	0005      	movs	r5, r0
 80026c8:	357c      	adds	r5, #124	; 0x7c
 80026ca:	782b      	ldrb	r3, [r5, #0]
{
 80026cc:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 80026ce:	2002      	movs	r0, #2
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d017      	beq.n	8002704 <HAL_UARTEx_SetTxFifoThreshold+0x40>
  huart->gState = HAL_UART_STATE_BUSY;
 80026d4:	2324      	movs	r3, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80026d6:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(huart);
 80026d8:	3801      	subs	r0, #1
  huart->gState = HAL_UART_STATE_BUSY;
 80026da:	1d26      	adds	r6, r4, #4
  __HAL_LOCK(huart);
 80026dc:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80026de:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80026e0:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80026e2:	6813      	ldr	r3, [r2, #0]
 80026e4:	4383      	bics	r3, r0
 80026e6:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80026e8:	6893      	ldr	r3, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80026ea:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	08db      	lsrs	r3, r3, #3
 80026f0:	4319      	orrs	r1, r3
 80026f2:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80026f4:	f7ff ff88 	bl	8002608 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80026f8:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 80026fa:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80026fc:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80026fe:	2320      	movs	r3, #32
 8002700:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8002702:	7028      	strb	r0, [r5, #0]
}
 8002704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002708 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8002708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 800270a:	0005      	movs	r5, r0
 800270c:	357c      	adds	r5, #124	; 0x7c
 800270e:	782b      	ldrb	r3, [r5, #0]
{
 8002710:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 8002712:	2002      	movs	r0, #2
 8002714:	2b01      	cmp	r3, #1
 8002716:	d017      	beq.n	8002748 <HAL_UARTEx_SetRxFifoThreshold+0x40>
  huart->gState = HAL_UART_STATE_BUSY;
 8002718:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 800271a:	3801      	subs	r0, #1
  huart->gState = HAL_UART_STATE_BUSY;
 800271c:	1d26      	adds	r6, r4, #4
  __HAL_LOCK(huart);
 800271e:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002720:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002722:	6823      	ldr	r3, [r4, #0]
 8002724:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4382      	bics	r2, r0
 800272a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	4807      	ldr	r0, [pc, #28]	; (800274c <HAL_UARTEx_SetRxFifoThreshold+0x44>)
 8002730:	4002      	ands	r2, r0
 8002732:	4311      	orrs	r1, r2
 8002734:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8002736:	0020      	movs	r0, r4
 8002738:	f7ff ff66 	bl	8002608 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800273c:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 800273e:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002740:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002742:	2320      	movs	r3, #32
 8002744:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8002746:	7028      	strb	r0, [r5, #0]
}
 8002748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	f1ffffff 	.word	0xf1ffffff

08002750 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002750:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 8002752:	f000 fb65 	bl	8002e20 <vTaskStartScheduler>
  
  return osOK;
}
 8002756:	2000      	movs	r0, #0
 8002758:	bd10      	pop	{r4, pc}

0800275a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800275a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800275c:	000b      	movs	r3, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800275e:	6846      	ldr	r6, [r0, #4]
 8002760:	6801      	ldr	r1, [r0, #0]
 8002762:	8a02      	ldrh	r2, [r0, #16]
 8002764:	2508      	movs	r5, #8
 8002766:	5f45      	ldrsh	r5, [r0, r5]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002768:	2400      	movs	r4, #0
  if (priority != osPriorityError) {
 800276a:	2d84      	cmp	r5, #132	; 0x84
 800276c:	d000      	beq.n	8002770 <osThreadCreate+0x16>
    fpriority += (priority - osPriorityIdle);
 800276e:	1cec      	adds	r4, r5, #3
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002770:	a803      	add	r0, sp, #12
 8002772:	9001      	str	r0, [sp, #4]
 8002774:	9400      	str	r4, [sp, #0]
 8002776:	0030      	movs	r0, r6
 8002778:	f000 f9f8 	bl	8002b6c <xTaskCreate>
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
                   &handle) != pdPASS)  {
    return NULL;
 800277c:	2300      	movs	r3, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800277e:	2801      	cmp	r0, #1
 8002780:	d100      	bne.n	8002784 <osThreadCreate+0x2a>
  }     
#endif
  
  return handle;
 8002782:	9b03      	ldr	r3, [sp, #12]
}
 8002784:	0018      	movs	r0, r3
 8002786:	b004      	add	sp, #16
 8002788:	bd70      	pop	{r4, r5, r6, pc}

0800278a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800278a:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800278c:	2800      	cmp	r0, #0
 800278e:	d100      	bne.n	8002792 <osDelay+0x8>
 8002790:	3001      	adds	r0, #1
 8002792:	f000 fb1f 	bl	8002dd4 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002796:	2000      	movs	r0, #0
 8002798:	bd10      	pop	{r4, pc}

0800279a <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800279a:	0003      	movs	r3, r0

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800279c:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800279e:	3308      	adds	r3, #8
 80027a0:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027a2:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027a4:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027a6:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027a8:	4252      	negs	r2, r2
 80027aa:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027ac:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027ae:	4770      	bx	lr

080027b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027b4:	4770      	bx	lr

080027b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80027b6:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80027b8:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80027ba:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80027bc:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80027c2:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80027c4:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80027c6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80027c8:	3301      	adds	r3, #1
 80027ca:	6003      	str	r3, [r0, #0]
}
 80027cc:	4770      	bx	lr

080027ce <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027ce:	0003      	movs	r3, r0
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80027d0:	680a      	ldr	r2, [r1, #0]
{
 80027d2:	b530      	push	{r4, r5, lr}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027d4:	3308      	adds	r3, #8
	if( xValueOfInsertion == portMAX_DELAY )
 80027d6:	1c54      	adds	r4, r2, #1
 80027d8:	d10b      	bne.n	80027f2 <vListInsert+0x24>
		pxIterator = pxList->xListEnd.pxPrevious;
 80027da:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80027e0:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80027e2:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80027e4:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80027e6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80027e8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80027ea:	3301      	adds	r3, #1
 80027ec:	6003      	str	r3, [r0, #0]
}
 80027ee:	bd30      	pop	{r4, r5, pc}
 80027f0:	0023      	movs	r3, r4
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027f2:	685c      	ldr	r4, [r3, #4]
 80027f4:	6825      	ldr	r5, [r4, #0]
 80027f6:	42aa      	cmp	r2, r5
 80027f8:	d2fa      	bcs.n	80027f0 <vListInsert+0x22>
 80027fa:	e7ef      	b.n	80027dc <vListInsert+0xe>

080027fc <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80027fc:	6841      	ldr	r1, [r0, #4]
 80027fe:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002800:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002802:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002804:	6882      	ldr	r2, [r0, #8]
 8002806:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002808:	6859      	ldr	r1, [r3, #4]
 800280a:	4288      	cmp	r0, r1
 800280c:	d100      	bne.n	8002810 <uxListRemove+0x14>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800280e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002810:	2200      	movs	r2, #0
 8002812:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	3a01      	subs	r2, #1
 8002818:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800281a:	6818      	ldr	r0, [r3, #0]
}
 800281c:	4770      	bx	lr
	...

08002820 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 8002820:	2300      	movs	r3, #0
{
 8002822:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8002824:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <prvTaskExitError+0x20>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	3301      	adds	r3, #1
 800282c:	d001      	beq.n	8002832 <prvTaskExitError+0x12>
 800282e:	b672      	cpsid	i
 8002830:	e7fe      	b.n	8002830 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
 8002832:	b672      	cpsid	i
	while( ulDummy == 0 )
 8002834:	9b01      	ldr	r3, [sp, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0fc      	beq.n	8002834 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800283a:	b002      	add	sp, #8
 800283c:	4770      	bx	lr
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	20000004 	.word	0x20000004
	...

08002850 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8002850:	4a0b      	ldr	r2, [pc, #44]	; (8002880 <pxCurrentTCBConst2>)
 8002852:	6813      	ldr	r3, [r2, #0]
 8002854:	6818      	ldr	r0, [r3, #0]
 8002856:	3020      	adds	r0, #32
 8002858:	f380 8809 	msr	PSP, r0
 800285c:	2002      	movs	r0, #2
 800285e:	f380 8814 	msr	CONTROL, r0
 8002862:	f3bf 8f6f 	isb	sy
 8002866:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8002868:	46ae      	mov	lr, r5
 800286a:	bc08      	pop	{r3}
 800286c:	bc04      	pop	{r2}
 800286e:	b662      	cpsie	i
 8002870:	4718      	bx	r3
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	46c0      	nop			; (mov r8, r8)
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	46c0      	nop			; (mov r8, r8)
 800287a:	46c0      	nop			; (mov r8, r8)
 800287c:	46c0      	nop			; (mov r8, r8)
 800287e:	46c0      	nop			; (mov r8, r8)

08002880 <pxCurrentTCBConst2>:
 8002880:	20000c40 	.word	0x20000c40

08002884 <pxPortInitialiseStack>:
{
 8002884:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002886:	2480      	movs	r4, #128	; 0x80
 8002888:	1f03      	subs	r3, r0, #4
 800288a:	0464      	lsls	r4, r4, #17
 800288c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800288e:	3b04      	subs	r3, #4
 8002890:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002892:	4903      	ldr	r1, [pc, #12]	; (80028a0 <pxPortInitialiseStack+0x1c>)
 8002894:	3b04      	subs	r3, #4
 8002896:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002898:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
 800289a:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800289c:	601a      	str	r2, [r3, #0]
}
 800289e:	bd10      	pop	{r4, pc}
 80028a0:	08002821 	.word	0x08002821

080028a4 <SVC_Handler>:
}
 80028a4:	4770      	bx	lr
	...

080028a8 <xPortStartScheduler>:
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80028a8:	22ff      	movs	r2, #255	; 0xff
 80028aa:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <xPortStartScheduler+0x4c>)
 80028ac:	0412      	lsls	r2, r2, #16
 80028ae:	6819      	ldr	r1, [r3, #0]
{
 80028b0:	b570      	push	{r4, r5, r6, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80028b2:	430a      	orrs	r2, r1
 80028b4:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80028b6:	22ff      	movs	r2, #255	; 0xff
 80028b8:	6819      	ldr	r1, [r3, #0]
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 80028ba:	2400      	movs	r4, #0
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80028bc:	0612      	lsls	r2, r2, #24
 80028be:	430a      	orrs	r2, r1
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80028c0:	21fa      	movs	r1, #250	; 0xfa
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80028c2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL = 0UL;
 80028c4:	4d0c      	ldr	r5, [pc, #48]	; (80028f8 <xPortStartScheduler+0x50>)
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 80028c6:	4b0d      	ldr	r3, [pc, #52]	; (80028fc <xPortStartScheduler+0x54>)
	portNVIC_SYSTICK_CTRL = 0UL;
 80028c8:	602c      	str	r4, [r5, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 80028ca:	601c      	str	r4, [r3, #0]
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80028cc:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <xPortStartScheduler+0x58>)
 80028ce:	0089      	lsls	r1, r1, #2
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	f7fd fc2d 	bl	8000130 <__udivsi3>
 80028d6:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <xPortStartScheduler+0x5c>)
 80028d8:	3801      	subs	r0, #1
 80028da:	6018      	str	r0, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80028dc:	2307      	movs	r3, #7
 80028de:	602b      	str	r3, [r5, #0]
	uxCriticalNesting = 0;
 80028e0:	4b09      	ldr	r3, [pc, #36]	; (8002908 <xPortStartScheduler+0x60>)
 80028e2:	601c      	str	r4, [r3, #0]
	vPortStartFirstTask();
 80028e4:	f7ff ffb4 	bl	8002850 <vPortStartFirstTask>
	vTaskSwitchContext();
 80028e8:	f000 fc20 	bl	800312c <vTaskSwitchContext>
	prvTaskExitError();
 80028ec:	f7ff ff98 	bl	8002820 <prvTaskExitError>
}
 80028f0:	0020      	movs	r0, r4
 80028f2:	bd70      	pop	{r4, r5, r6, pc}
 80028f4:	e000ed20 	.word	0xe000ed20
 80028f8:	e000e010 	.word	0xe000e010
 80028fc:	e000e018 	.word	0xe000e018
 8002900:	20000008 	.word	0x20000008
 8002904:	e000e014 	.word	0xe000e014
 8002908:	20000004 	.word	0x20000004

0800290c <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800290c:	2280      	movs	r2, #128	; 0x80
 800290e:	4b04      	ldr	r3, [pc, #16]	; (8002920 <vPortYield+0x14>)
 8002910:	0552      	lsls	r2, r2, #21
 8002912:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8002914:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8002918:	f3bf 8f6f 	isb	sy
}
 800291c:	4770      	bx	lr
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	e000ed04 	.word	0xe000ed04

08002924 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 8002924:	b672      	cpsid	i
    uxCriticalNesting++;
 8002926:	4a04      	ldr	r2, [pc, #16]	; (8002938 <vPortEnterCritical+0x14>)
 8002928:	6813      	ldr	r3, [r2, #0]
 800292a:	3301      	adds	r3, #1
 800292c:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
 800292e:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8002932:	f3bf 8f6f 	isb	sy
}
 8002936:	4770      	bx	lr
 8002938:	20000004 	.word	0x20000004

0800293c <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800293c:	4a05      	ldr	r2, [pc, #20]	; (8002954 <vPortExitCritical+0x18>)
 800293e:	6813      	ldr	r3, [r2, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <vPortExitCritical+0xc>
 8002944:	b672      	cpsid	i
 8002946:	e7fe      	b.n	8002946 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 8002948:	3b01      	subs	r3, #1
 800294a:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800294c:	2b00      	cmp	r3, #0
 800294e:	d100      	bne.n	8002952 <vPortExitCritical+0x16>
        portENABLE_INTERRUPTS();
 8002950:	b662      	cpsie	i
}
 8002952:	4770      	bx	lr
 8002954:	20000004 	.word	0x20000004

08002958 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 8002958:	f3ef 8010 	mrs	r0, PRIMASK
 800295c:	b672      	cpsid	i
 800295e:	4770      	bx	lr

08002960 <vClearInterruptMaskFromISR>:
	__asm volatile(
 8002960:	f380 8810 	msr	PRIMASK, r0
 8002964:	4770      	bx	lr
	...

08002970 <PendSV_Handler>:
	__asm volatile
 8002970:	f3ef 8009 	mrs	r0, PSP
 8002974:	4b0e      	ldr	r3, [pc, #56]	; (80029b0 <pxCurrentTCBConst>)
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	3820      	subs	r0, #32
 800297a:	6010      	str	r0, [r2, #0]
 800297c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800297e:	4644      	mov	r4, r8
 8002980:	464d      	mov	r5, r9
 8002982:	4656      	mov	r6, sl
 8002984:	465f      	mov	r7, fp
 8002986:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002988:	b508      	push	{r3, lr}
 800298a:	b672      	cpsid	i
 800298c:	f000 fbce 	bl	800312c <vTaskSwitchContext>
 8002990:	b662      	cpsie	i
 8002992:	bc0c      	pop	{r2, r3}
 8002994:	6811      	ldr	r1, [r2, #0]
 8002996:	6808      	ldr	r0, [r1, #0]
 8002998:	3010      	adds	r0, #16
 800299a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800299c:	46a0      	mov	r8, r4
 800299e:	46a9      	mov	r9, r5
 80029a0:	46b2      	mov	sl, r6
 80029a2:	46bb      	mov	fp, r7
 80029a4:	f380 8809 	msr	PSP, r0
 80029a8:	3820      	subs	r0, #32
 80029aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80029ac:	4718      	bx	r3
 80029ae:	46c0      	nop			; (mov r8, r8)

080029b0 <pxCurrentTCBConst>:
 80029b0:	20000c40 	.word	0x20000c40

080029b4 <SysTick_Handler>:
{
 80029b4:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80029b6:	f7ff ffcf 	bl	8002958 <ulSetInterruptMaskFromISR>
 80029ba:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 80029bc:	f000 fb02 	bl	8002fc4 <xTaskIncrementTick>
 80029c0:	2800      	cmp	r0, #0
 80029c2:	d003      	beq.n	80029cc <SysTick_Handler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80029c4:	2280      	movs	r2, #128	; 0x80
 80029c6:	4b03      	ldr	r3, [pc, #12]	; (80029d4 <SysTick_Handler+0x20>)
 80029c8:	0552      	lsls	r2, r2, #21
 80029ca:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80029cc:	0020      	movs	r0, r4
 80029ce:	f7ff ffc7 	bl	8002960 <vClearInterruptMaskFromISR>
}
 80029d2:	bd10      	pop	{r4, pc}
 80029d4:	e000ed04 	.word	0xe000ed04

080029d8 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80029d8:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80029da:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <prvInsertBlockIntoFreeList+0x40>)
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	4282      	cmp	r2, r0
 80029e0:	d318      	bcc.n	8002a14 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80029e2:	685c      	ldr	r4, [r3, #4]
 80029e4:	1919      	adds	r1, r3, r4
 80029e6:	4288      	cmp	r0, r1
 80029e8:	d103      	bne.n	80029f2 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80029ea:	6841      	ldr	r1, [r0, #4]
 80029ec:	0018      	movs	r0, r3
 80029ee:	1909      	adds	r1, r1, r4
 80029f0:	6059      	str	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80029f2:	6841      	ldr	r1, [r0, #4]
 80029f4:	1844      	adds	r4, r0, r1
 80029f6:	42a2      	cmp	r2, r4
 80029f8:	d107      	bne.n	8002a0a <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80029fa:	4c08      	ldr	r4, [pc, #32]	; (8002a1c <prvInsertBlockIntoFreeList+0x44>)
 80029fc:	6824      	ldr	r4, [r4, #0]
 80029fe:	42a2      	cmp	r2, r4
 8002a00:	d003      	beq.n	8002a0a <prvInsertBlockIntoFreeList+0x32>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002a02:	6854      	ldr	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002a04:	6812      	ldr	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002a06:	1861      	adds	r1, r4, r1
 8002a08:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002a0a:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002a0c:	4298      	cmp	r0, r3
 8002a0e:	d000      	beq.n	8002a12 <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002a10:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a12:	bd10      	pop	{r4, pc}
 8002a14:	0013      	movs	r3, r2
 8002a16:	e7e1      	b.n	80029dc <prvInsertBlockIntoFreeList+0x4>
 8002a18:	20000c38 	.word	0x20000c38
 8002a1c:	20000028 	.word	0x20000028

08002a20 <pvPortMalloc>:
{
 8002a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a22:	0004      	movs	r4, r0
	vTaskSuspendAll();
 8002a24:	f000 fa36 	bl	8002e94 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002a28:	4a38      	ldr	r2, [pc, #224]	; (8002b0c <pvPortMalloc+0xec>)
 8002a2a:	4839      	ldr	r0, [pc, #228]	; (8002b10 <pvPortMalloc+0xf0>)
 8002a2c:	6813      	ldr	r3, [r2, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d11e      	bne.n	8002a70 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 8002a32:	4938      	ldr	r1, [pc, #224]	; (8002b14 <pvPortMalloc+0xf4>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002a34:	3307      	adds	r3, #7
 8002a36:	4219      	tst	r1, r3
 8002a38:	d036      	beq.n	8002aa8 <pvPortMalloc+0x88>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002a3a:	18cd      	adds	r5, r1, r3
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a3c:	439d      	bics	r5, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002a3e:	23c0      	movs	r3, #192	; 0xc0
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	18c9      	adds	r1, r1, r3
 8002a44:	1b4b      	subs	r3, r1, r5
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a46:	0029      	movs	r1, r5
	xStart.xBlockSize = ( size_t ) 0;
 8002a48:	2500      	movs	r5, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002a4a:	4e33      	ldr	r6, [pc, #204]	; (8002b18 <pvPortMalloc+0xf8>)
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002a4c:	18cb      	adds	r3, r1, r3
	xStart.xBlockSize = ( size_t ) 0;
 8002a4e:	6075      	str	r5, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002a50:	6031      	str	r1, [r6, #0]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a52:	2607      	movs	r6, #7
	uxAddress -= xHeapStructSize;
 8002a54:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a56:	43b3      	bics	r3, r6
	pxEnd->pxNextFreeBlock = NULL;
 8002a58:	601d      	str	r5, [r3, #0]
	pxEnd->xBlockSize = 0;
 8002a5a:	605d      	str	r5, [r3, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002a5c:	1a5d      	subs	r5, r3, r1
	pxEnd = ( void * ) uxAddress;
 8002a5e:	6013      	str	r3, [r2, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002a60:	c128      	stmia	r1!, {r3, r5}
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a62:	4b2e      	ldr	r3, [pc, #184]	; (8002b1c <pvPortMalloc+0xfc>)
 8002a64:	601d      	str	r5, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a66:	4b2e      	ldr	r3, [pc, #184]	; (8002b20 <pvPortMalloc+0x100>)
 8002a68:	601d      	str	r5, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002a6a:	2380      	movs	r3, #128	; 0x80
 8002a6c:	061b      	lsls	r3, r3, #24
 8002a6e:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002a70:	6806      	ldr	r6, [r0, #0]
 8002a72:	4234      	tst	r4, r6
 8002a74:	d116      	bne.n	8002aa4 <pvPortMalloc+0x84>
			if( xWantedSize > 0 )
 8002a76:	2c00      	cmp	r4, #0
 8002a78:	d014      	beq.n	8002aa4 <pvPortMalloc+0x84>
				xWantedSize += xHeapStructSize;
 8002a7a:	0023      	movs	r3, r4
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002a7c:	2107      	movs	r1, #7
				xWantedSize += xHeapStructSize;
 8002a7e:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002a80:	420b      	tst	r3, r1
 8002a82:	d001      	beq.n	8002a88 <pvPortMalloc+0x68>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002a84:	438b      	bics	r3, r1
 8002a86:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00b      	beq.n	8002aa4 <pvPortMalloc+0x84>
 8002a8c:	4924      	ldr	r1, [pc, #144]	; (8002b20 <pvPortMalloc+0x100>)
 8002a8e:	680d      	ldr	r5, [r1, #0]
 8002a90:	42ab      	cmp	r3, r5
 8002a92:	d807      	bhi.n	8002aa4 <pvPortMalloc+0x84>
				pxBlock = xStart.pxNextFreeBlock;
 8002a94:	4920      	ldr	r1, [pc, #128]	; (8002b18 <pvPortMalloc+0xf8>)
 8002a96:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002a98:	6860      	ldr	r0, [r4, #4]
 8002a9a:	4283      	cmp	r3, r0
 8002a9c:	d807      	bhi.n	8002aae <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8002a9e:	6812      	ldr	r2, [r2, #0]
 8002aa0:	4294      	cmp	r4, r2
 8002aa2:	d10b      	bne.n	8002abc <pvPortMalloc+0x9c>
void *pvReturn = NULL;
 8002aa4:	2500      	movs	r5, #0
 8002aa6:	e028      	b.n	8002afa <pvPortMalloc+0xda>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002aa8:	23c0      	movs	r3, #192	; 0xc0
 8002aaa:	011b      	lsls	r3, r3, #4
 8002aac:	e7cc      	b.n	8002a48 <pvPortMalloc+0x28>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002aae:	6827      	ldr	r7, [r4, #0]
 8002ab0:	46bc      	mov	ip, r7
 8002ab2:	2f00      	cmp	r7, #0
 8002ab4:	d0f3      	beq.n	8002a9e <pvPortMalloc+0x7e>
 8002ab6:	0021      	movs	r1, r4
 8002ab8:	4664      	mov	r4, ip
 8002aba:	e7ed      	b.n	8002a98 <pvPortMalloc+0x78>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002abc:	680a      	ldr	r2, [r1, #0]
 8002abe:	0017      	movs	r7, r2
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002ac0:	6822      	ldr	r2, [r4, #0]
 8002ac2:	600a      	str	r2, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002ac4:	1ac2      	subs	r2, r0, r3
 8002ac6:	2a10      	cmp	r2, #16
 8002ac8:	d908      	bls.n	8002adc <pvPortMalloc+0xbc>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002aca:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002acc:	0741      	lsls	r1, r0, #29
 8002ace:	d001      	beq.n	8002ad4 <pvPortMalloc+0xb4>
 8002ad0:	b672      	cpsid	i
 8002ad2:	e7fe      	b.n	8002ad2 <pvPortMalloc+0xb2>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002ad4:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002ad6:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002ad8:	f7ff ff7e 	bl	80029d8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002adc:	6863      	ldr	r3, [r4, #4]
 8002ade:	4a10      	ldr	r2, [pc, #64]	; (8002b20 <pvPortMalloc+0x100>)
 8002ae0:	1aed      	subs	r5, r5, r3
 8002ae2:	6015      	str	r5, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002ae4:	4a0d      	ldr	r2, [pc, #52]	; (8002b1c <pvPortMalloc+0xfc>)
 8002ae6:	6811      	ldr	r1, [r2, #0]
 8002ae8:	428d      	cmp	r5, r1
 8002aea:	d200      	bcs.n	8002aee <pvPortMalloc+0xce>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002aec:	6015      	str	r5, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002aee:	431e      	orrs	r6, r3
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002af0:	003d      	movs	r5, r7
					pxBlock->pxNextFreeBlock = NULL;
 8002af2:	2300      	movs	r3, #0
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002af4:	3508      	adds	r5, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002af6:	6066      	str	r6, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002af8:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 8002afa:	f000 f9d7 	bl	8002eac <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002afe:	076b      	lsls	r3, r5, #29
 8002b00:	d001      	beq.n	8002b06 <pvPortMalloc+0xe6>
 8002b02:	b672      	cpsid	i
 8002b04:	e7fe      	b.n	8002b04 <pvPortMalloc+0xe4>
}
 8002b06:	0028      	movs	r0, r5
 8002b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	20000028 	.word	0x20000028
 8002b10:	20000c2c 	.word	0x20000c2c
 8002b14:	2000002c 	.word	0x2000002c
 8002b18:	20000c38 	.word	0x20000c38
 8002b1c:	20000c34 	.word	0x20000c34
 8002b20:	20000c30 	.word	0x20000c30

08002b24 <vPortFree>:
{
 8002b24:	b510      	push	{r4, lr}
	if( pv != NULL )
 8002b26:	2800      	cmp	r0, #0
 8002b28:	d01b      	beq.n	8002b62 <vPortFree+0x3e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002b2a:	4a0e      	ldr	r2, [pc, #56]	; (8002b64 <vPortFree+0x40>)
 8002b2c:	3808      	subs	r0, #8
 8002b2e:	6843      	ldr	r3, [r0, #4]
 8002b30:	6812      	ldr	r2, [r2, #0]
 8002b32:	0004      	movs	r4, r0
 8002b34:	421a      	tst	r2, r3
 8002b36:	d101      	bne.n	8002b3c <vPortFree+0x18>
 8002b38:	b672      	cpsid	i
 8002b3a:	e7fe      	b.n	8002b3a <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002b3c:	6801      	ldr	r1, [r0, #0]
 8002b3e:	2900      	cmp	r1, #0
 8002b40:	d001      	beq.n	8002b46 <vPortFree+0x22>
 8002b42:	b672      	cpsid	i
 8002b44:	e7fe      	b.n	8002b44 <vPortFree+0x20>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002b46:	4393      	bics	r3, r2
 8002b48:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 8002b4a:	f000 f9a3 	bl	8002e94 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002b4e:	4a06      	ldr	r2, [pc, #24]	; (8002b68 <vPortFree+0x44>)
 8002b50:	6863      	ldr	r3, [r4, #4]
 8002b52:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002b54:	0020      	movs	r0, r4
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002b56:	185b      	adds	r3, r3, r1
 8002b58:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002b5a:	f7ff ff3d 	bl	80029d8 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8002b5e:	f000 f9a5 	bl	8002eac <xTaskResumeAll>
}
 8002b62:	bd10      	pop	{r4, pc}
 8002b64:	20000c2c 	.word	0x20000c2c
 8002b68:	20000c30 	.word	0x20000c30

08002b6c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002b6c:	b590      	push	{r4, r7, lr}
 8002b6e:	b08d      	sub	sp, #52	; 0x34
 8002b70:	af04      	add	r7, sp, #16
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	603b      	str	r3, [r7, #0]
 8002b78:	1dbb      	adds	r3, r7, #6
 8002b7a:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b7c:	1dbb      	adds	r3, r7, #6
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	0018      	movs	r0, r3
 8002b84:	f7ff ff4c 	bl	8002a20 <pvPortMalloc>
 8002b88:	0003      	movs	r3, r0
 8002b8a:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d010      	beq.n	8002bb4 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002b92:	2060      	movs	r0, #96	; 0x60
 8002b94:	f7ff ff44 	bl	8002a20 <pvPortMalloc>
 8002b98:	0003      	movs	r3, r0
 8002b9a:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	631a      	str	r2, [r3, #48]	; 0x30
 8002ba8:	e006      	b.n	8002bb8 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	0018      	movs	r0, r3
 8002bae:	f7ff ffb9 	bl	8002b24 <vPortFree>
 8002bb2:	e001      	b.n	8002bb8 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d016      	beq.n	8002bec <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002bbe:	1dbb      	adds	r3, r7, #6
 8002bc0:	881a      	ldrh	r2, [r3, #0]
 8002bc2:	683c      	ldr	r4, [r7, #0]
 8002bc4:	68b9      	ldr	r1, [r7, #8]
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	2300      	movs	r3, #0
 8002bca:	9303      	str	r3, [sp, #12]
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	9302      	str	r3, [sp, #8]
 8002bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd2:	9301      	str	r3, [sp, #4]
 8002bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	0023      	movs	r3, r4
 8002bda:	f000 f80f 	bl	8002bfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	0018      	movs	r0, r3
 8002be2:	f000 f88f 	bl	8002d04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002be6:	2301      	movs	r3, #1
 8002be8:	61bb      	str	r3, [r7, #24]
 8002bea:	e002      	b.n	8002bf2 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002bec:	2301      	movs	r3, #1
 8002bee:	425b      	negs	r3, r3
 8002bf0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002bf2:	69bb      	ldr	r3, [r7, #24]
	}
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	b009      	add	sp, #36	; 0x24
 8002bfa:	bd90      	pop	{r4, r7, pc}

08002bfc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
 8002c08:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	001a      	movs	r2, r3
 8002c14:	21a5      	movs	r1, #165	; 0xa5
 8002c16:	f000 ff23 	bl	8003a60 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4937      	ldr	r1, [pc, #220]	; (8002d00 <prvInitialiseNewTask+0x104>)
 8002c22:	468c      	mov	ip, r1
 8002c24:	4463      	add	r3, ip
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	18d3      	adds	r3, r2, r3
 8002c2a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	2207      	movs	r2, #7
 8002c30:	4393      	bics	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	2207      	movs	r2, #7
 8002c38:	4013      	ands	r3, r2
 8002c3a:	d001      	beq.n	8002c40 <prvInitialiseNewTask+0x44>
 8002c3c:	b672      	cpsid	i
 8002c3e:	e7fe      	b.n	8002c3e <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	e013      	b.n	8002c6e <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	18d3      	adds	r3, r2, r3
 8002c4c:	7818      	ldrb	r0, [r3, #0]
 8002c4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c50:	2134      	movs	r1, #52	; 0x34
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	18d3      	adds	r3, r2, r3
 8002c56:	185b      	adds	r3, r3, r1
 8002c58:	1c02      	adds	r2, r0, #0
 8002c5a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	18d3      	adds	r3, r2, r3
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d006      	beq.n	8002c76 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	617b      	str	r3, [r7, #20]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	2b0f      	cmp	r3, #15
 8002c72:	d9e8      	bls.n	8002c46 <prvInitialiseNewTask+0x4a>
 8002c74:	e000      	b.n	8002c78 <prvInitialiseNewTask+0x7c>
		{
			break;
 8002c76:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7a:	2243      	movs	r2, #67	; 0x43
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	2b06      	cmp	r3, #6
 8002c84:	d901      	bls.n	8002c8a <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c86:	2306      	movs	r3, #6
 8002c88:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8c:	6a3a      	ldr	r2, [r7, #32]
 8002c8e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c92:	6a3a      	ldr	r2, [r7, #32]
 8002c94:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c98:	2200      	movs	r2, #0
 8002c9a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f7ff fd85 	bl	80027b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca8:	3318      	adds	r3, #24
 8002caa:	0018      	movs	r0, r3
 8002cac:	f7ff fd80 	bl	80027b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cb4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	2207      	movs	r2, #7
 8002cba:	1ad2      	subs	r2, r2, r3
 8002cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cc4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8002cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc8:	2200      	movs	r2, #0
 8002cca:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cce:	2200      	movs	r2, #0
 8002cd0:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd4:	225c      	movs	r2, #92	; 0x5c
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	68f9      	ldr	r1, [r7, #12]
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f7ff fdcf 	bl	8002884 <pxPortInitialiseStack>
 8002ce6:	0002      	movs	r2, r0
 8002ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cea:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <prvInitialiseNewTask+0xfc>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cf6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002cf8:	46c0      	nop			; (mov r8, r8)
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	b006      	add	sp, #24
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	3fffffff 	.word	0x3fffffff

08002d04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002d0c:	f7ff fe0a 	bl	8002924 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002d10:	4b2a      	ldr	r3, [pc, #168]	; (8002dbc <prvAddNewTaskToReadyList+0xb8>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	4b29      	ldr	r3, [pc, #164]	; (8002dbc <prvAddNewTaskToReadyList+0xb8>)
 8002d18:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002d1a:	4b29      	ldr	r3, [pc, #164]	; (8002dc0 <prvAddNewTaskToReadyList+0xbc>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d109      	bne.n	8002d36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002d22:	4b27      	ldr	r3, [pc, #156]	; (8002dc0 <prvAddNewTaskToReadyList+0xbc>)
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d28:	4b24      	ldr	r3, [pc, #144]	; (8002dbc <prvAddNewTaskToReadyList+0xb8>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d110      	bne.n	8002d52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002d30:	f000 fa7c 	bl	800322c <prvInitialiseTaskLists>
 8002d34:	e00d      	b.n	8002d52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002d36:	4b23      	ldr	r3, [pc, #140]	; (8002dc4 <prvAddNewTaskToReadyList+0xc0>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d109      	bne.n	8002d52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d3e:	4b20      	ldr	r3, [pc, #128]	; (8002dc0 <prvAddNewTaskToReadyList+0xbc>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d802      	bhi.n	8002d52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002d4c:	4b1c      	ldr	r3, [pc, #112]	; (8002dc0 <prvAddNewTaskToReadyList+0xbc>)
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002d52:	4b1d      	ldr	r3, [pc, #116]	; (8002dc8 <prvAddNewTaskToReadyList+0xc4>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	1c5a      	adds	r2, r3, #1
 8002d58:	4b1b      	ldr	r3, [pc, #108]	; (8002dc8 <prvAddNewTaskToReadyList+0xc4>)
 8002d5a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002d5c:	4b1a      	ldr	r3, [pc, #104]	; (8002dc8 <prvAddNewTaskToReadyList+0xc4>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d68:	4b18      	ldr	r3, [pc, #96]	; (8002dcc <prvAddNewTaskToReadyList+0xc8>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d903      	bls.n	8002d78 <prvAddNewTaskToReadyList+0x74>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d74:	4b15      	ldr	r3, [pc, #84]	; (8002dcc <prvAddNewTaskToReadyList+0xc8>)
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d7c:	0013      	movs	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	189b      	adds	r3, r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4a12      	ldr	r2, [pc, #72]	; (8002dd0 <prvAddNewTaskToReadyList+0xcc>)
 8002d86:	189a      	adds	r2, r3, r2
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	0019      	movs	r1, r3
 8002d8e:	0010      	movs	r0, r2
 8002d90:	f7ff fd11 	bl	80027b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002d94:	f7ff fdd2 	bl	800293c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002d98:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <prvAddNewTaskToReadyList+0xc0>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d008      	beq.n	8002db2 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002da0:	4b07      	ldr	r3, [pc, #28]	; (8002dc0 <prvAddNewTaskToReadyList+0xbc>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d201      	bcs.n	8002db2 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002dae:	f7ff fdad 	bl	800290c <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	46bd      	mov	sp, r7
 8002db6:	b002      	add	sp, #8
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	46c0      	nop			; (mov r8, r8)
 8002dbc:	20000d40 	.word	0x20000d40
 8002dc0:	20000c40 	.word	0x20000c40
 8002dc4:	20000d4c 	.word	0x20000d4c
 8002dc8:	20000d5c 	.word	0x20000d5c
 8002dcc:	20000d48 	.word	0x20000d48
 8002dd0:	20000c44 	.word	0x20000c44

08002dd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d010      	beq.n	8002e08 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002de6:	4b0d      	ldr	r3, [pc, #52]	; (8002e1c <vTaskDelay+0x48>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <vTaskDelay+0x1e>
 8002dee:	b672      	cpsid	i
 8002df0:	e7fe      	b.n	8002df0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8002df2:	f000 f84f 	bl	8002e94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2100      	movs	r1, #0
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f000 fabe 	bl	800337c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002e00:	f000 f854 	bl	8002eac <xTaskResumeAll>
 8002e04:	0003      	movs	r3, r0
 8002e06:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8002e0e:	f7ff fd7d 	bl	800290c <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002e12:	46c0      	nop			; (mov r8, r8)
 8002e14:	46bd      	mov	sp, r7
 8002e16:	b004      	add	sp, #16
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	20000d68 	.word	0x20000d68

08002e20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8002e26:	4914      	ldr	r1, [pc, #80]	; (8002e78 <vTaskStartScheduler+0x58>)
 8002e28:	4814      	ldr	r0, [pc, #80]	; (8002e7c <vTaskStartScheduler+0x5c>)
 8002e2a:	4b15      	ldr	r3, [pc, #84]	; (8002e80 <vTaskStartScheduler+0x60>)
 8002e2c:	9301      	str	r3, [sp, #4]
 8002e2e:	2300      	movs	r3, #0
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	2300      	movs	r3, #0
 8002e34:	2280      	movs	r2, #128	; 0x80
 8002e36:	f7ff fe99 	bl	8002b6c <xTaskCreate>
 8002e3a:	0003      	movs	r3, r0
 8002e3c:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d110      	bne.n	8002e66 <vTaskStartScheduler+0x46>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8002e44:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002e46:	4b0f      	ldr	r3, [pc, #60]	; (8002e84 <vTaskStartScheduler+0x64>)
 8002e48:	2201      	movs	r2, #1
 8002e4a:	4252      	negs	r2, r2
 8002e4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002e4e:	4b0e      	ldr	r3, [pc, #56]	; (8002e88 <vTaskStartScheduler+0x68>)
 8002e50:	2201      	movs	r2, #1
 8002e52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002e54:	4b0d      	ldr	r3, [pc, #52]	; (8002e8c <vTaskStartScheduler+0x6c>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8002e5a:	4b0d      	ldr	r3, [pc, #52]	; (8002e90 <vTaskStartScheduler+0x70>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002e60:	f7ff fd22 	bl	80028a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002e64:	e004      	b.n	8002e70 <vTaskStartScheduler+0x50>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <vTaskStartScheduler+0x50>
 8002e6c:	b672      	cpsid	i
 8002e6e:	e7fe      	b.n	8002e6e <vTaskStartScheduler+0x4e>
}
 8002e70:	46c0      	nop			; (mov r8, r8)
 8002e72:	46bd      	mov	sp, r7
 8002e74:	b002      	add	sp, #8
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	08003a88 	.word	0x08003a88
 8002e7c:	0800320d 	.word	0x0800320d
 8002e80:	20000d64 	.word	0x20000d64
 8002e84:	20000d60 	.word	0x20000d60
 8002e88:	20000d4c 	.word	0x20000d4c
 8002e8c:	20000d44 	.word	0x20000d44
 8002e90:	20000d74 	.word	0x20000d74

08002e94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002e98:	4b03      	ldr	r3, [pc, #12]	; (8002ea8 <vTaskSuspendAll+0x14>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	1c5a      	adds	r2, r3, #1
 8002e9e:	4b02      	ldr	r3, [pc, #8]	; (8002ea8 <vTaskSuspendAll+0x14>)
 8002ea0:	601a      	str	r2, [r3, #0]
}
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20000d68 	.word	0x20000d68

08002eac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002eba:	4b3a      	ldr	r3, [pc, #232]	; (8002fa4 <xTaskResumeAll+0xf8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <xTaskResumeAll+0x1a>
 8002ec2:	b672      	cpsid	i
 8002ec4:	e7fe      	b.n	8002ec4 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002ec6:	f7ff fd2d 	bl	8002924 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002eca:	4b36      	ldr	r3, [pc, #216]	; (8002fa4 <xTaskResumeAll+0xf8>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	1e5a      	subs	r2, r3, #1
 8002ed0:	4b34      	ldr	r3, [pc, #208]	; (8002fa4 <xTaskResumeAll+0xf8>)
 8002ed2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ed4:	4b33      	ldr	r3, [pc, #204]	; (8002fa4 <xTaskResumeAll+0xf8>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d15b      	bne.n	8002f94 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002edc:	4b32      	ldr	r3, [pc, #200]	; (8002fa8 <xTaskResumeAll+0xfc>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d057      	beq.n	8002f94 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ee4:	e02f      	b.n	8002f46 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002ee6:	4b31      	ldr	r3, [pc, #196]	; (8002fac <xTaskResumeAll+0x100>)
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	3318      	adds	r3, #24
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	f7ff fc82 	bl	80027fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	3304      	adds	r3, #4
 8002efc:	0018      	movs	r0, r3
 8002efe:	f7ff fc7d 	bl	80027fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f06:	4b2a      	ldr	r3, [pc, #168]	; (8002fb0 <xTaskResumeAll+0x104>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d903      	bls.n	8002f16 <xTaskResumeAll+0x6a>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f12:	4b27      	ldr	r3, [pc, #156]	; (8002fb0 <xTaskResumeAll+0x104>)
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f1a:	0013      	movs	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	189b      	adds	r3, r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4a24      	ldr	r2, [pc, #144]	; (8002fb4 <xTaskResumeAll+0x108>)
 8002f24:	189a      	adds	r2, r3, r2
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	3304      	adds	r3, #4
 8002f2a:	0019      	movs	r1, r3
 8002f2c:	0010      	movs	r0, r2
 8002f2e:	f7ff fc42 	bl	80027b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f36:	4b20      	ldr	r3, [pc, #128]	; (8002fb8 <xTaskResumeAll+0x10c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d302      	bcc.n	8002f46 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8002f40:	4b1e      	ldr	r3, [pc, #120]	; (8002fbc <xTaskResumeAll+0x110>)
 8002f42:	2201      	movs	r2, #1
 8002f44:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f46:	4b19      	ldr	r3, [pc, #100]	; (8002fac <xTaskResumeAll+0x100>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1cb      	bne.n	8002ee6 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002f54:	f000 f9ee 	bl	8003334 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002f58:	4b19      	ldr	r3, [pc, #100]	; (8002fc0 <xTaskResumeAll+0x114>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00f      	beq.n	8002f84 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002f64:	f000 f82e 	bl	8002fc4 <xTaskIncrementTick>
 8002f68:	1e03      	subs	r3, r0, #0
 8002f6a:	d002      	beq.n	8002f72 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8002f6c:	4b13      	ldr	r3, [pc, #76]	; (8002fbc <xTaskResumeAll+0x110>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	3b01      	subs	r3, #1
 8002f76:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1f2      	bne.n	8002f64 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8002f7e:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <xTaskResumeAll+0x114>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002f84:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <xTaskResumeAll+0x110>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002f90:	f7ff fcbc 	bl	800290c <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002f94:	f7ff fcd2 	bl	800293c <vPortExitCritical>

	return xAlreadyYielded;
 8002f98:	68bb      	ldr	r3, [r7, #8]
}
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	b004      	add	sp, #16
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	20000d68 	.word	0x20000d68
 8002fa8:	20000d40 	.word	0x20000d40
 8002fac:	20000d00 	.word	0x20000d00
 8002fb0:	20000d48 	.word	0x20000d48
 8002fb4:	20000c44 	.word	0x20000c44
 8002fb8:	20000c40 	.word	0x20000c40
 8002fbc:	20000d54 	.word	0x20000d54
 8002fc0:	20000d50 	.word	0x20000d50

08002fc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fce:	4b4c      	ldr	r3, [pc, #304]	; (8003100 <xTaskIncrementTick+0x13c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d000      	beq.n	8002fd8 <xTaskIncrementTick+0x14>
 8002fd6:	e083      	b.n	80030e0 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002fd8:	4b4a      	ldr	r3, [pc, #296]	; (8003104 <xTaskIncrementTick+0x140>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002fe0:	4b48      	ldr	r3, [pc, #288]	; (8003104 <xTaskIncrementTick+0x140>)
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d117      	bne.n	800301c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8002fec:	4b46      	ldr	r3, [pc, #280]	; (8003108 <xTaskIncrementTick+0x144>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <xTaskIncrementTick+0x36>
 8002ff6:	b672      	cpsid	i
 8002ff8:	e7fe      	b.n	8002ff8 <xTaskIncrementTick+0x34>
 8002ffa:	4b43      	ldr	r3, [pc, #268]	; (8003108 <xTaskIncrementTick+0x144>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	4b42      	ldr	r3, [pc, #264]	; (800310c <xTaskIncrementTick+0x148>)
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	4b40      	ldr	r3, [pc, #256]	; (8003108 <xTaskIncrementTick+0x144>)
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	4b40      	ldr	r3, [pc, #256]	; (800310c <xTaskIncrementTick+0x148>)
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	4b40      	ldr	r3, [pc, #256]	; (8003110 <xTaskIncrementTick+0x14c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	1c5a      	adds	r2, r3, #1
 8003014:	4b3e      	ldr	r3, [pc, #248]	; (8003110 <xTaskIncrementTick+0x14c>)
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	f000 f98c 	bl	8003334 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800301c:	4b3d      	ldr	r3, [pc, #244]	; (8003114 <xTaskIncrementTick+0x150>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	429a      	cmp	r2, r3
 8003024:	d34e      	bcc.n	80030c4 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003026:	4b38      	ldr	r3, [pc, #224]	; (8003108 <xTaskIncrementTick+0x144>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <xTaskIncrementTick+0x70>
 8003030:	2301      	movs	r3, #1
 8003032:	e000      	b.n	8003036 <xTaskIncrementTick+0x72>
 8003034:	2300      	movs	r3, #0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d004      	beq.n	8003044 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800303a:	4b36      	ldr	r3, [pc, #216]	; (8003114 <xTaskIncrementTick+0x150>)
 800303c:	2201      	movs	r2, #1
 800303e:	4252      	negs	r2, r2
 8003040:	601a      	str	r2, [r3, #0]
					break;
 8003042:	e03f      	b.n	80030c4 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003044:	4b30      	ldr	r3, [pc, #192]	; (8003108 <xTaskIncrementTick+0x144>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	429a      	cmp	r2, r3
 800305a:	d203      	bcs.n	8003064 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800305c:	4b2d      	ldr	r3, [pc, #180]	; (8003114 <xTaskIncrementTick+0x150>)
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	601a      	str	r2, [r3, #0]
						break;
 8003062:	e02f      	b.n	80030c4 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	3304      	adds	r3, #4
 8003068:	0018      	movs	r0, r3
 800306a:	f7ff fbc7 	bl	80027fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003072:	2b00      	cmp	r3, #0
 8003074:	d004      	beq.n	8003080 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	3318      	adds	r3, #24
 800307a:	0018      	movs	r0, r3
 800307c:	f7ff fbbe 	bl	80027fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003084:	4b24      	ldr	r3, [pc, #144]	; (8003118 <xTaskIncrementTick+0x154>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	429a      	cmp	r2, r3
 800308a:	d903      	bls.n	8003094 <xTaskIncrementTick+0xd0>
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003090:	4b21      	ldr	r3, [pc, #132]	; (8003118 <xTaskIncrementTick+0x154>)
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003098:	0013      	movs	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	189b      	adds	r3, r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4a1e      	ldr	r2, [pc, #120]	; (800311c <xTaskIncrementTick+0x158>)
 80030a2:	189a      	adds	r2, r3, r2
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	3304      	adds	r3, #4
 80030a8:	0019      	movs	r1, r3
 80030aa:	0010      	movs	r0, r2
 80030ac:	f7ff fb83 	bl	80027b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b4:	4b1a      	ldr	r3, [pc, #104]	; (8003120 <xTaskIncrementTick+0x15c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d3b3      	bcc.n	8003026 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80030be:	2301      	movs	r3, #1
 80030c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030c2:	e7b0      	b.n	8003026 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80030c4:	4b16      	ldr	r3, [pc, #88]	; (8003120 <xTaskIncrementTick+0x15c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ca:	4914      	ldr	r1, [pc, #80]	; (800311c <xTaskIncrementTick+0x158>)
 80030cc:	0013      	movs	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	189b      	adds	r3, r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	585b      	ldr	r3, [r3, r1]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d907      	bls.n	80030ea <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80030da:	2301      	movs	r3, #1
 80030dc:	617b      	str	r3, [r7, #20]
 80030de:	e004      	b.n	80030ea <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80030e0:	4b10      	ldr	r3, [pc, #64]	; (8003124 <xTaskIncrementTick+0x160>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	1c5a      	adds	r2, r3, #1
 80030e6:	4b0f      	ldr	r3, [pc, #60]	; (8003124 <xTaskIncrementTick+0x160>)
 80030e8:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80030ea:	4b0f      	ldr	r3, [pc, #60]	; (8003128 <xTaskIncrementTick+0x164>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 80030f2:	2301      	movs	r3, #1
 80030f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80030f6:	697b      	ldr	r3, [r7, #20]
}
 80030f8:	0018      	movs	r0, r3
 80030fa:	46bd      	mov	sp, r7
 80030fc:	b006      	add	sp, #24
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	20000d68 	.word	0x20000d68
 8003104:	20000d44 	.word	0x20000d44
 8003108:	20000cf8 	.word	0x20000cf8
 800310c:	20000cfc 	.word	0x20000cfc
 8003110:	20000d58 	.word	0x20000d58
 8003114:	20000d60 	.word	0x20000d60
 8003118:	20000d48 	.word	0x20000d48
 800311c:	20000c44 	.word	0x20000c44
 8003120:	20000c40 	.word	0x20000c40
 8003124:	20000d50 	.word	0x20000d50
 8003128:	20000d54 	.word	0x20000d54

0800312c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003132:	4b2e      	ldr	r3, [pc, #184]	; (80031ec <vTaskSwitchContext+0xc0>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800313a:	4b2d      	ldr	r3, [pc, #180]	; (80031f0 <vTaskSwitchContext+0xc4>)
 800313c:	2201      	movs	r2, #1
 800313e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003140:	e04f      	b.n	80031e2 <vTaskSwitchContext+0xb6>
		xYieldPending = pdFALSE;
 8003142:	4b2b      	ldr	r3, [pc, #172]	; (80031f0 <vTaskSwitchContext+0xc4>)
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8003148:	4b2a      	ldr	r3, [pc, #168]	; (80031f4 <vTaskSwitchContext+0xc8>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4b2a      	ldr	r3, [pc, #168]	; (80031f8 <vTaskSwitchContext+0xcc>)
 800314e:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8003150:	4b29      	ldr	r3, [pc, #164]	; (80031f8 <vTaskSwitchContext+0xcc>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	4b29      	ldr	r3, [pc, #164]	; (80031fc <vTaskSwitchContext+0xd0>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	429a      	cmp	r2, r3
 800315a:	d909      	bls.n	8003170 <vTaskSwitchContext+0x44>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800315c:	4b28      	ldr	r3, [pc, #160]	; (8003200 <vTaskSwitchContext+0xd4>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003162:	4a25      	ldr	r2, [pc, #148]	; (80031f8 <vTaskSwitchContext+0xcc>)
 8003164:	6810      	ldr	r0, [r2, #0]
 8003166:	4a25      	ldr	r2, [pc, #148]	; (80031fc <vTaskSwitchContext+0xd0>)
 8003168:	6812      	ldr	r2, [r2, #0]
 800316a:	1a82      	subs	r2, r0, r2
 800316c:	188a      	adds	r2, r1, r2
 800316e:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 8003170:	4b21      	ldr	r3, [pc, #132]	; (80031f8 <vTaskSwitchContext+0xcc>)
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	4b21      	ldr	r3, [pc, #132]	; (80031fc <vTaskSwitchContext+0xd0>)
 8003176:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003178:	4b22      	ldr	r3, [pc, #136]	; (8003204 <vTaskSwitchContext+0xd8>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	607b      	str	r3, [r7, #4]
 800317e:	e007      	b.n	8003190 <vTaskSwitchContext+0x64>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <vTaskSwitchContext+0x5e>
 8003186:	b672      	cpsid	i
 8003188:	e7fe      	b.n	8003188 <vTaskSwitchContext+0x5c>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	3b01      	subs	r3, #1
 800318e:	607b      	str	r3, [r7, #4]
 8003190:	491d      	ldr	r1, [pc, #116]	; (8003208 <vTaskSwitchContext+0xdc>)
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	0013      	movs	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	189b      	adds	r3, r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	585b      	ldr	r3, [r3, r1]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0ee      	beq.n	8003180 <vTaskSwitchContext+0x54>
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	0013      	movs	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	189b      	adds	r3, r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4a16      	ldr	r2, [pc, #88]	; (8003208 <vTaskSwitchContext+0xdc>)
 80031ae:	189b      	adds	r3, r3, r2
 80031b0:	603b      	str	r3, [r7, #0]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	605a      	str	r2, [r3, #4]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	3308      	adds	r3, #8
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d104      	bne.n	80031d2 <vTaskSwitchContext+0xa6>
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	605a      	str	r2, [r3, #4]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	4b09      	ldr	r3, [pc, #36]	; (8003200 <vTaskSwitchContext+0xd4>)
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	4b09      	ldr	r3, [pc, #36]	; (8003204 <vTaskSwitchContext+0xd8>)
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	601a      	str	r2, [r3, #0]
}
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	46bd      	mov	sp, r7
 80031e6:	b002      	add	sp, #8
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	46c0      	nop			; (mov r8, r8)
 80031ec:	20000d68 	.word	0x20000d68
 80031f0:	20000d54 	.word	0x20000d54
 80031f4:	20000d74 	.word	0x20000d74
 80031f8:	20000d70 	.word	0x20000d70
 80031fc:	20000d6c 	.word	0x20000d6c
 8003200:	20000c40 	.word	0x20000c40
 8003204:	20000d48 	.word	0x20000d48
 8003208:	20000c44 	.word	0x20000c44

0800320c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003214:	f000 f84e 	bl	80032b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003218:	4b03      	ldr	r3, [pc, #12]	; (8003228 <prvIdleTask+0x1c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d9f9      	bls.n	8003214 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003220:	f7ff fb74 	bl	800290c <vPortYield>
		prvCheckTasksWaitingTermination();
 8003224:	e7f6      	b.n	8003214 <prvIdleTask+0x8>
 8003226:	46c0      	nop			; (mov r8, r8)
 8003228:	20000c44 	.word	0x20000c44

0800322c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003232:	2300      	movs	r3, #0
 8003234:	607b      	str	r3, [r7, #4]
 8003236:	e00c      	b.n	8003252 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	0013      	movs	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	189b      	adds	r3, r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4a14      	ldr	r2, [pc, #80]	; (8003294 <prvInitialiseTaskLists+0x68>)
 8003244:	189b      	adds	r3, r3, r2
 8003246:	0018      	movs	r0, r3
 8003248:	f7ff faa7 	bl	800279a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3301      	adds	r3, #1
 8003250:	607b      	str	r3, [r7, #4]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b06      	cmp	r3, #6
 8003256:	d9ef      	bls.n	8003238 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003258:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <prvInitialiseTaskLists+0x6c>)
 800325a:	0018      	movs	r0, r3
 800325c:	f7ff fa9d 	bl	800279a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003260:	4b0e      	ldr	r3, [pc, #56]	; (800329c <prvInitialiseTaskLists+0x70>)
 8003262:	0018      	movs	r0, r3
 8003264:	f7ff fa99 	bl	800279a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003268:	4b0d      	ldr	r3, [pc, #52]	; (80032a0 <prvInitialiseTaskLists+0x74>)
 800326a:	0018      	movs	r0, r3
 800326c:	f7ff fa95 	bl	800279a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003270:	4b0c      	ldr	r3, [pc, #48]	; (80032a4 <prvInitialiseTaskLists+0x78>)
 8003272:	0018      	movs	r0, r3
 8003274:	f7ff fa91 	bl	800279a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003278:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <prvInitialiseTaskLists+0x7c>)
 800327a:	0018      	movs	r0, r3
 800327c:	f7ff fa8d 	bl	800279a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003280:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <prvInitialiseTaskLists+0x80>)
 8003282:	4a05      	ldr	r2, [pc, #20]	; (8003298 <prvInitialiseTaskLists+0x6c>)
 8003284:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003286:	4b0a      	ldr	r3, [pc, #40]	; (80032b0 <prvInitialiseTaskLists+0x84>)
 8003288:	4a04      	ldr	r2, [pc, #16]	; (800329c <prvInitialiseTaskLists+0x70>)
 800328a:	601a      	str	r2, [r3, #0]
}
 800328c:	46c0      	nop			; (mov r8, r8)
 800328e:	46bd      	mov	sp, r7
 8003290:	b002      	add	sp, #8
 8003292:	bd80      	pop	{r7, pc}
 8003294:	20000c44 	.word	0x20000c44
 8003298:	20000cd0 	.word	0x20000cd0
 800329c:	20000ce4 	.word	0x20000ce4
 80032a0:	20000d00 	.word	0x20000d00
 80032a4:	20000d14 	.word	0x20000d14
 80032a8:	20000d2c 	.word	0x20000d2c
 80032ac:	20000cf8 	.word	0x20000cf8
 80032b0:	20000cfc 	.word	0x20000cfc

080032b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032ba:	e01a      	b.n	80032f2 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80032bc:	f7ff fb32 	bl	8002924 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80032c0:	4b10      	ldr	r3, [pc, #64]	; (8003304 <prvCheckTasksWaitingTermination+0x50>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3304      	adds	r3, #4
 80032cc:	0018      	movs	r0, r3
 80032ce:	f7ff fa95 	bl	80027fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80032d2:	4b0d      	ldr	r3, [pc, #52]	; (8003308 <prvCheckTasksWaitingTermination+0x54>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	1e5a      	subs	r2, r3, #1
 80032d8:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <prvCheckTasksWaitingTermination+0x54>)
 80032da:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80032dc:	4b0b      	ldr	r3, [pc, #44]	; (800330c <prvCheckTasksWaitingTermination+0x58>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	1e5a      	subs	r2, r3, #1
 80032e2:	4b0a      	ldr	r3, [pc, #40]	; (800330c <prvCheckTasksWaitingTermination+0x58>)
 80032e4:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80032e6:	f7ff fb29 	bl	800293c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	0018      	movs	r0, r3
 80032ee:	f000 f80f 	bl	8003310 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032f2:	4b06      	ldr	r3, [pc, #24]	; (800330c <prvCheckTasksWaitingTermination+0x58>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1e0      	bne.n	80032bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	46bd      	mov	sp, r7
 80032fe:	b002      	add	sp, #8
 8003300:	bd80      	pop	{r7, pc}
 8003302:	46c0      	nop			; (mov r8, r8)
 8003304:	20000d14 	.word	0x20000d14
 8003308:	20000d40 	.word	0x20000d40
 800330c:	20000d28 	.word	0x20000d28

08003310 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331c:	0018      	movs	r0, r3
 800331e:	f7ff fc01 	bl	8002b24 <vPortFree>
			vPortFree( pxTCB );
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	0018      	movs	r0, r3
 8003326:	f7ff fbfd 	bl	8002b24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	46bd      	mov	sp, r7
 800332e:	b002      	add	sp, #8
 8003330:	bd80      	pop	{r7, pc}
	...

08003334 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800333a:	4b0e      	ldr	r3, [pc, #56]	; (8003374 <prvResetNextTaskUnblockTime+0x40>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <prvResetNextTaskUnblockTime+0x14>
 8003344:	2301      	movs	r3, #1
 8003346:	e000      	b.n	800334a <prvResetNextTaskUnblockTime+0x16>
 8003348:	2300      	movs	r3, #0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d004      	beq.n	8003358 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800334e:	4b0a      	ldr	r3, [pc, #40]	; (8003378 <prvResetNextTaskUnblockTime+0x44>)
 8003350:	2201      	movs	r2, #1
 8003352:	4252      	negs	r2, r2
 8003354:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003356:	e008      	b.n	800336a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003358:	4b06      	ldr	r3, [pc, #24]	; (8003374 <prvResetNextTaskUnblockTime+0x40>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	4b04      	ldr	r3, [pc, #16]	; (8003378 <prvResetNextTaskUnblockTime+0x44>)
 8003368:	601a      	str	r2, [r3, #0]
}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	46bd      	mov	sp, r7
 800336e:	b002      	add	sp, #8
 8003370:	bd80      	pop	{r7, pc}
 8003372:	46c0      	nop			; (mov r8, r8)
 8003374:	20000cf8 	.word	0x20000cf8
 8003378:	20000d60 	.word	0x20000d60

0800337c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003386:	4b21      	ldr	r3, [pc, #132]	; (800340c <prvAddCurrentTaskToDelayedList+0x90>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800338c:	4b20      	ldr	r3, [pc, #128]	; (8003410 <prvAddCurrentTaskToDelayedList+0x94>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	3304      	adds	r3, #4
 8003392:	0018      	movs	r0, r3
 8003394:	f7ff fa32 	bl	80027fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3301      	adds	r3, #1
 800339c:	d10b      	bne.n	80033b6 <prvAddCurrentTaskToDelayedList+0x3a>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d008      	beq.n	80033b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033a4:	4b1a      	ldr	r3, [pc, #104]	; (8003410 <prvAddCurrentTaskToDelayedList+0x94>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	1d1a      	adds	r2, r3, #4
 80033aa:	4b1a      	ldr	r3, [pc, #104]	; (8003414 <prvAddCurrentTaskToDelayedList+0x98>)
 80033ac:	0011      	movs	r1, r2
 80033ae:	0018      	movs	r0, r3
 80033b0:	f7ff fa01 	bl	80027b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80033b4:	e026      	b.n	8003404 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	18d3      	adds	r3, r2, r3
 80033bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033be:	4b14      	ldr	r3, [pc, #80]	; (8003410 <prvAddCurrentTaskToDelayedList+0x94>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d209      	bcs.n	80033e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033ce:	4b12      	ldr	r3, [pc, #72]	; (8003418 <prvAddCurrentTaskToDelayedList+0x9c>)
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	4b0f      	ldr	r3, [pc, #60]	; (8003410 <prvAddCurrentTaskToDelayedList+0x94>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	3304      	adds	r3, #4
 80033d8:	0019      	movs	r1, r3
 80033da:	0010      	movs	r0, r2
 80033dc:	f7ff f9f7 	bl	80027ce <vListInsert>
}
 80033e0:	e010      	b.n	8003404 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033e2:	4b0e      	ldr	r3, [pc, #56]	; (800341c <prvAddCurrentTaskToDelayedList+0xa0>)
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	4b0a      	ldr	r3, [pc, #40]	; (8003410 <prvAddCurrentTaskToDelayedList+0x94>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	3304      	adds	r3, #4
 80033ec:	0019      	movs	r1, r3
 80033ee:	0010      	movs	r0, r2
 80033f0:	f7ff f9ed 	bl	80027ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80033f4:	4b0a      	ldr	r3, [pc, #40]	; (8003420 <prvAddCurrentTaskToDelayedList+0xa4>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d202      	bcs.n	8003404 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80033fe:	4b08      	ldr	r3, [pc, #32]	; (8003420 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	601a      	str	r2, [r3, #0]
}
 8003404:	46c0      	nop			; (mov r8, r8)
 8003406:	46bd      	mov	sp, r7
 8003408:	b004      	add	sp, #16
 800340a:	bd80      	pop	{r7, pc}
 800340c:	20000d44 	.word	0x20000d44
 8003410:	20000c40 	.word	0x20000c40
 8003414:	20000d2c 	.word	0x20000d2c
 8003418:	20000cfc 	.word	0x20000cfc
 800341c:	20000cf8 	.word	0x20000cf8
 8003420:	20000d60 	.word	0x20000d60

08003424 <LED_Blinky>:
}

/* USER CODE BEGIN 4 */

void LED_Blinky(void *pvParameters)
{
 8003424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TickType_t xDelay = 500 / portTICK_PERIOD_MS;

	for(;;)
	{
		HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, GPIO_PIN_SET);
 8003426:	24a0      	movs	r4, #160	; 0xa0
		HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_RESET);
 8003428:	2704      	movs	r7, #4
		HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, GPIO_PIN_SET);
 800342a:	2501      	movs	r5, #1
 800342c:	2620      	movs	r6, #32
 800342e:	05e4      	lsls	r4, r4, #23
		HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_RESET);
 8003430:	0039      	movs	r1, r7
 8003432:	2200      	movs	r2, #0
 8003434:	481b      	ldr	r0, [pc, #108]	; (80034a4 <LED_Blinky+0x80>)
 8003436:	f7fd fc99 	bl	8000d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, GPIO_PIN_SET);
 800343a:	002a      	movs	r2, r5
 800343c:	0031      	movs	r1, r6
 800343e:	0020      	movs	r0, r4
 8003440:	f7fd fc94 	bl	8000d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_SET);
 8003444:	002a      	movs	r2, r5
 8003446:	2180      	movs	r1, #128	; 0x80
 8003448:	0020      	movs	r0, r4
 800344a:	f7fd fc8f 	bl	8000d6c <HAL_GPIO_WritePin>
		vTaskDelay(xDelay);
 800344e:	20fa      	movs	r0, #250	; 0xfa
 8003450:	0040      	lsls	r0, r0, #1
 8003452:	f7ff fcbf 	bl	8002dd4 <vTaskDelay>
		HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET);
 8003456:	002a      	movs	r2, r5
 8003458:	0039      	movs	r1, r7
 800345a:	4812      	ldr	r0, [pc, #72]	; (80034a4 <LED_Blinky+0x80>)
 800345c:	f7fd fc86 	bl	8000d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, GPIO_PIN_RESET);
 8003460:	0031      	movs	r1, r6
 8003462:	0020      	movs	r0, r4
 8003464:	2200      	movs	r2, #0
 8003466:	f7fd fc81 	bl	8000d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_SET);
 800346a:	002a      	movs	r2, r5
 800346c:	2180      	movs	r1, #128	; 0x80
 800346e:	0020      	movs	r0, r4
 8003470:	f7fd fc7c 	bl	8000d6c <HAL_GPIO_WritePin>
		vTaskDelay(xDelay);
 8003474:	20fa      	movs	r0, #250	; 0xfa
 8003476:	0040      	lsls	r0, r0, #1
 8003478:	f7ff fcac 	bl	8002dd4 <vTaskDelay>
		HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET);
 800347c:	002a      	movs	r2, r5
 800347e:	0039      	movs	r1, r7
 8003480:	4808      	ldr	r0, [pc, #32]	; (80034a4 <LED_Blinky+0x80>)
 8003482:	f7fd fc73 	bl	8000d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, GPIO_PIN_SET);
 8003486:	002a      	movs	r2, r5
 8003488:	0031      	movs	r1, r6
 800348a:	0020      	movs	r0, r4
 800348c:	f7fd fc6e 	bl	8000d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_RESET);
 8003490:	0020      	movs	r0, r4
 8003492:	2200      	movs	r2, #0
 8003494:	2180      	movs	r1, #128	; 0x80
 8003496:	f7fd fc69 	bl	8000d6c <HAL_GPIO_WritePin>
		vTaskDelay(xDelay);
 800349a:	20fa      	movs	r0, #250	; 0xfa
 800349c:	0040      	lsls	r0, r0, #1
 800349e:	f7ff fc99 	bl	8002dd4 <vTaskDelay>
 80034a2:	e7c5      	b.n	8003430 <LED_Blinky+0xc>
 80034a4:	50000400 	.word	0x50000400

080034a8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80034a8:	b510      	push	{r4, lr}

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80034aa:	2001      	movs	r0, #1
 80034ac:	f7ff f96d 	bl	800278a <osDelay>
 80034b0:	e7fb      	b.n	80034aa <StartDefaultTask+0x2>
	...

080034b4 <SystemClock_Config>:
{
 80034b4:	b510      	push	{r4, lr}
 80034b6:	b0a0      	sub	sp, #128	; 0x80
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034b8:	2238      	movs	r2, #56	; 0x38
 80034ba:	2100      	movs	r1, #0
 80034bc:	a812      	add	r0, sp, #72	; 0x48
 80034be:	f000 facf 	bl	8003a60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034c2:	2210      	movs	r2, #16
 80034c4:	2100      	movs	r1, #0
 80034c6:	a801      	add	r0, sp, #4
 80034c8:	f000 faca 	bl	8003a60 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034cc:	2234      	movs	r2, #52	; 0x34
 80034ce:	2100      	movs	r1, #0
 80034d0:	a805      	add	r0, sp, #20
 80034d2:	f000 fac5 	bl	8003a60 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80034d6:	2080      	movs	r0, #128	; 0x80
 80034d8:	0080      	lsls	r0, r0, #2
 80034da:	f7fd fced 	bl	8000eb8 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80034de:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80034e0:	2400      	movs	r4, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80034e2:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80034e4:	33fe      	adds	r3, #254	; 0xfe
 80034e6:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034e8:	a812      	add	r0, sp, #72	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80034ea:	3bc0      	subs	r3, #192	; 0xc0
 80034ec:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80034ee:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80034f0:	9419      	str	r4, [sp, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034f2:	f7fd fd0b 	bl	8000f0c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034f6:	2307      	movs	r3, #7
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80034f8:	0021      	movs	r1, r4
 80034fa:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034fc:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80034fe:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003500:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003502:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003504:	f7fd ff3c 	bl	8001380 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8003508:	4b05      	ldr	r3, [pc, #20]	; (8003520 <SystemClock_Config+0x6c>)
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800350a:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 800350c:	9305      	str	r3, [sp, #20]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_HSI;
 800350e:	2380      	movs	r3, #128	; 0x80
 8003510:	061b      	lsls	r3, r3, #24
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003512:	9406      	str	r4, [sp, #24]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003514:	9409      	str	r4, [sp, #36]	; 0x24
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_HSI;
 8003516:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003518:	f7fe f80a 	bl	8001530 <HAL_RCCEx_PeriphCLKConfig>
}
 800351c:	b020      	add	sp, #128	; 0x80
 800351e:	bd10      	pop	{r4, pc}
 8003520:	00004041 	.word	0x00004041

08003524 <main>:
{
 8003524:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003526:	2701      	movs	r7, #1
{
 8003528:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800352a:	ad05      	add	r5, sp, #20
  HAL_Init();
 800352c:	f7fd f880 	bl	8000630 <HAL_Init>
  SystemClock_Config();
 8003530:	f7ff ffc0 	bl	80034b4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003534:	2214      	movs	r2, #20
 8003536:	2100      	movs	r1, #0
 8003538:	0028      	movs	r0, r5
 800353a:	f000 fa91 	bl	8003a60 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800353e:	2102      	movs	r1, #2
  HAL_GPIO_WritePin(GPIOA, Blue_LED_Pin|Green_LED_Pin, GPIO_PIN_SET);
 8003540:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003542:	4b68      	ldr	r3, [pc, #416]	; (80036e4 <main+0x1c0>)
  HAL_GPIO_WritePin(GPIOA, Blue_LED_Pin|Green_LED_Pin, GPIO_PIN_SET);
 8003544:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003546:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003548:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800354a:	433a      	orrs	r2, r7
 800354c:	635a      	str	r2, [r3, #52]	; 0x34
 800354e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003550:	403a      	ands	r2, r7
 8003552:	9203      	str	r2, [sp, #12]
 8003554:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003556:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003558:	430a      	orrs	r2, r1
 800355a:	635a      	str	r2, [r3, #52]	; 0x34
 800355c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, Blue_LED_Pin|Green_LED_Pin, GPIO_PIN_SET);
 800355e:	003a      	movs	r2, r7
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003560:	400b      	ands	r3, r1
 8003562:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, Blue_LED_Pin|Green_LED_Pin, GPIO_PIN_SET);
 8003564:	319e      	adds	r1, #158	; 0x9e
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003566:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, Blue_LED_Pin|Green_LED_Pin, GPIO_PIN_SET);
 8003568:	f7fd fc00 	bl	8000d6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, EN_OTG_Pin|ILIM_HIZ_Pin|CELL_1S_DIS_EN_Pin|CELL_2S_DIS_EN_Pin 
 800356c:	2200      	movs	r2, #0
 800356e:	495e      	ldr	r1, [pc, #376]	; (80036e8 <main+0x1c4>)
 8003570:	485e      	ldr	r0, [pc, #376]	; (80036ec <main+0x1c8>)
 8003572:	f7fd fbfb 	bl	8000d6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET);
 8003576:	003a      	movs	r2, r7
 8003578:	2104      	movs	r1, #4
 800357a:	485c      	ldr	r0, [pc, #368]	; (80036ec <main+0x1c8>)
 800357c:	f7fd fbf6 	bl	8000d6c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003580:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = Blue_LED_Pin|Green_LED_Pin;
 8003582:	23a0      	movs	r3, #160	; 0xa0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003584:	0029      	movs	r1, r5
 8003586:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = Blue_LED_Pin|Green_LED_Pin;
 8003588:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800358a:	606f      	str	r7, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358c:	60ac      	str	r4, [r5, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800358e:	60ec      	str	r4, [r5, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003590:	f7fd fb44 	bl	8000c1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = EN_OTG_Pin|Red_LED_Pin|ILIM_HIZ_Pin|CELL_1S_DIS_EN_Pin 
 8003594:	4b56      	ldr	r3, [pc, #344]	; (80036f0 <main+0x1cc>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003596:	0029      	movs	r1, r5
 8003598:	4854      	ldr	r0, [pc, #336]	; (80036ec <main+0x1c8>)
  GPIO_InitStruct.Pin = EN_OTG_Pin|Red_LED_Pin|ILIM_HIZ_Pin|CELL_1S_DIS_EN_Pin 
 800359a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800359c:	606f      	str	r7, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359e:	60ac      	str	r4, [r5, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a0:	60ec      	str	r4, [r5, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035a2:	f7fd fb3b 	bl	8000c1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PROTCHOT_Pin|CHRG_OK_Pin;
 80035a6:	4b53      	ldr	r3, [pc, #332]	; (80036f4 <main+0x1d0>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035a8:	0029      	movs	r1, r5
 80035aa:	4850      	ldr	r0, [pc, #320]	; (80036ec <main+0x1c8>)
  GPIO_InitStruct.Pin = PROTCHOT_Pin|CHRG_OK_Pin;
 80035ac:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035ae:	606c      	str	r4, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b0:	60ac      	str	r4, [r5, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035b2:	f7fd fb33 	bl	8000c1c <HAL_GPIO_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 80035b6:	220c      	movs	r2, #12
 80035b8:	0021      	movs	r1, r4
 80035ba:	0028      	movs	r0, r5
 80035bc:	f000 fa50 	bl	8003a60 <memset>
  hadc1.Instance = ADC1;
 80035c0:	4e4d      	ldr	r6, [pc, #308]	; (80036f8 <main+0x1d4>)
 80035c2:	4b4e      	ldr	r3, [pc, #312]	; (80036fc <main+0x1d8>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80035c4:	0030      	movs	r0, r6
  hadc1.Instance = ADC1;
 80035c6:	6033      	str	r3, [r6, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80035c8:	2380      	movs	r3, #128	; 0x80
 80035ca:	05db      	lsls	r3, r3, #23
 80035cc:	6073      	str	r3, [r6, #4]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80035ce:	2304      	movs	r3, #4
 80035d0:	6173      	str	r3, [r6, #20]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80035d2:	19f3      	adds	r3, r6, r7
 80035d4:	77dc      	strb	r4, [r3, #31]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80035d6:	0033      	movs	r3, r6
 80035d8:	332c      	adds	r3, #44	; 0x2c
 80035da:	701c      	strb	r4, [r3, #0]
  hadc1.Init.OversamplingMode = DISABLE;
 80035dc:	0033      	movs	r3, r6
 80035de:	333c      	adds	r3, #60	; 0x3c
 80035e0:	701c      	strb	r4, [r3, #0]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80035e2:	60b4      	str	r4, [r6, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80035e4:	60f4      	str	r4, [r6, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80035e6:	6134      	str	r4, [r6, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80035e8:	7634      	strb	r4, [r6, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80035ea:	7674      	strb	r4, [r6, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80035ec:	76b4      	strb	r4, [r6, #26]
  hadc1.Init.NbrOfConversion = 1;
 80035ee:	61f7      	str	r7, [r6, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80035f0:	6274      	str	r4, [r6, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80035f2:	62b4      	str	r4, [r6, #40]	; 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80035f4:	6334      	str	r4, [r6, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80035f6:	6374      	str	r4, [r6, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80035f8:	63b4      	str	r4, [r6, #56]	; 0x38
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80035fa:	64f4      	str	r4, [r6, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80035fc:	f7fd f842 	bl	8000684 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003600:	0029      	movs	r1, r5
 8003602:	0030      	movs	r0, r6
  sConfig.Channel = ADC_CHANNEL_0;
 8003604:	9705      	str	r7, [sp, #20]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003606:	606c      	str	r4, [r5, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8003608:	60ac      	str	r4, [r5, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800360a:	f7fd f973 	bl	80008f4 <HAL_ADC_ConfigChannel>
  hi2c1.Instance = I2C1;
 800360e:	4e3c      	ldr	r6, [pc, #240]	; (8003700 <main+0x1dc>)
 8003610:	4b3c      	ldr	r3, [pc, #240]	; (8003704 <main+0x1e0>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003612:	0030      	movs	r0, r6
  hi2c1.Instance = I2C1;
 8003614:	6033      	str	r3, [r6, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8003616:	4b3c      	ldr	r3, [pc, #240]	; (8003708 <main+0x1e4>)
  hi2c1.Init.OwnAddress1 = 0;
 8003618:	60b4      	str	r4, [r6, #8]
  hi2c1.Init.Timing = 0x00303D5B;
 800361a:	6073      	str	r3, [r6, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800361c:	60f7      	str	r7, [r6, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800361e:	6134      	str	r4, [r6, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003620:	6174      	str	r4, [r6, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003622:	61b4      	str	r4, [r6, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003624:	61f4      	str	r4, [r6, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003626:	6234      	str	r4, [r6, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003628:	f7fd fba6 	bl	8000d78 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800362c:	0021      	movs	r1, r4
 800362e:	0030      	movs	r0, r6
 8003630:	f7fd fbf8 	bl	8000e24 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003634:	0021      	movs	r1, r4
 8003636:	0030      	movs	r0, r6
 8003638:	f7fd fc1a 	bl	8000e70 <HAL_I2CEx_ConfigDigitalFilter>
  huart1.Instance = USART1;
 800363c:	4e33      	ldr	r6, [pc, #204]	; (800370c <main+0x1e8>)
 800363e:	4b34      	ldr	r3, [pc, #208]	; (8003710 <main+0x1ec>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003640:	0030      	movs	r0, r6
  huart1.Instance = USART1;
 8003642:	6033      	str	r3, [r6, #0]
  huart1.Init.BaudRate = 115200;
 8003644:	23e1      	movs	r3, #225	; 0xe1
 8003646:	025b      	lsls	r3, r3, #9
 8003648:	6073      	str	r3, [r6, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 800364a:	2380      	movs	r3, #128	; 0x80
 800364c:	055b      	lsls	r3, r3, #21
 800364e:	60b3      	str	r3, [r6, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003650:	230c      	movs	r3, #12
 8003652:	6173      	str	r3, [r6, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8003654:	23c0      	movs	r3, #192	; 0xc0
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	61b3      	str	r3, [r6, #24]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800365a:	60f4      	str	r4, [r6, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800365c:	6134      	str	r4, [r6, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800365e:	61f4      	str	r4, [r6, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003660:	6234      	str	r4, [r6, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003662:	6274      	str	r4, [r6, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003664:	62b4      	str	r4, [r6, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003666:	f7fe ff9b 	bl	80025a0 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800366a:	0021      	movs	r1, r4
 800366c:	0030      	movs	r0, r6
 800366e:	f7ff f829 	bl	80026c4 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003672:	0021      	movs	r1, r4
 8003674:	0030      	movs	r0, r6
 8003676:	f7ff f847 	bl	8002708 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800367a:	0030      	movs	r0, r6
 800367c:	f7ff f806 	bl	800268c <HAL_UARTEx_DisableFifoMode>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003680:	220c      	movs	r2, #12
 8003682:	0021      	movs	r1, r4
 8003684:	0028      	movs	r0, r5
 8003686:	f000 f9eb 	bl	8003a60 <memset>
  htim7.Instance = TIM7;
 800368a:	4e22      	ldr	r6, [pc, #136]	; (8003714 <main+0x1f0>)
 800368c:	4b22      	ldr	r3, [pc, #136]	; (8003718 <main+0x1f4>)
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800368e:	0030      	movs	r0, r6
  htim7.Instance = TIM7;
 8003690:	6033      	str	r3, [r6, #0]
  htim7.Init.Prescaler = 0x1194;
 8003692:	4b22      	ldr	r3, [pc, #136]	; (800371c <main+0x1f8>)
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003694:	60b4      	str	r4, [r6, #8]
  htim7.Init.Prescaler = 0x1194;
 8003696:	6073      	str	r3, [r6, #4]
  htim7.Init.Period = 0x1;
 8003698:	60f7      	str	r7, [r6, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800369a:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800369c:	f7fe f966 	bl	800196c <HAL_TIM_Base_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80036a0:	0029      	movs	r1, r5
 80036a2:	0030      	movs	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036a4:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036a6:	60ac      	str	r4, [r5, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80036a8:	f7fe f97c 	bl	80019a4 <HAL_TIMEx_MasterConfigSynchronization>
  HAL_TIM_Base_Start_IT(&htim7);
 80036ac:	0030      	movs	r0, r6
 80036ae:	f7fe f841 	bl	8001734 <HAL_TIM_Base_Start_IT>
  xTaskCreate(
 80036b2:	2302      	movs	r3, #2
 80036b4:	491a      	ldr	r1, [pc, #104]	; (8003720 <main+0x1fc>)
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	2280      	movs	r2, #128	; 0x80
 80036ba:	0023      	movs	r3, r4
 80036bc:	9401      	str	r4, [sp, #4]
 80036be:	4819      	ldr	r0, [pc, #100]	; (8003724 <main+0x200>)
 80036c0:	f7ff fa54 	bl	8002b6c <xTaskCreate>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80036c4:	002a      	movs	r2, r5
 80036c6:	4b18      	ldr	r3, [pc, #96]	; (8003728 <main+0x204>)
 80036c8:	cb43      	ldmia	r3!, {r0, r1, r6}
 80036ca:	c243      	stmia	r2!, {r0, r1, r6}
 80036cc:	cb03      	ldmia	r3!, {r0, r1}
 80036ce:	c203      	stmia	r2!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80036d0:	0021      	movs	r1, r4
 80036d2:	0028      	movs	r0, r5
 80036d4:	f7ff f841 	bl	800275a <osThreadCreate>
 80036d8:	4b14      	ldr	r3, [pc, #80]	; (800372c <main+0x208>)
 80036da:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80036dc:	f7ff f838 	bl	8002750 <osKernelStart>
 80036e0:	e7fe      	b.n	80036e0 <main+0x1bc>
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	40021000 	.word	0x40021000
 80036e8:	00000b31 	.word	0x00000b31
 80036ec:	50000400 	.word	0x50000400
 80036f0:	00000b35 	.word	0x00000b35
 80036f4:	00001002 	.word	0x00001002
 80036f8:	20000dcc 	.word	0x20000dcc
 80036fc:	40012400 	.word	0x40012400
 8003700:	20000d80 	.word	0x20000d80
 8003704:	40005400 	.word	0x40005400
 8003708:	00303d5b 	.word	0x00303d5b
 800370c:	20000e30 	.word	0x20000e30
 8003710:	40013800 	.word	0x40013800
 8003714:	20000ebc 	.word	0x20000ebc
 8003718:	40001400 	.word	0x40001400
 800371c:	00001194 	.word	0x00001194
 8003720:	08003ab5 	.word	0x08003ab5
 8003724:	08003425 	.word	0x08003425
 8003728:	08003a90 	.word	0x08003a90
 800372c:	20000d7c 	.word	0x20000d7c

08003730 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8003730:	2380      	movs	r3, #128	; 0x80
 8003732:	6802      	ldr	r2, [r0, #0]
{
 8003734:	b510      	push	{r4, lr}
  if (htim->Instance == TIM2) {
 8003736:	05db      	lsls	r3, r3, #23
 8003738:	429a      	cmp	r2, r3
 800373a:	d101      	bne.n	8003740 <HAL_TIM_PeriodElapsedCallback+0x10>
    HAL_IncTick();
 800373c:	f7fc ff8c 	bl	8000658 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003740:	bd10      	pop	{r4, pc}
	...

08003744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003744:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003746:	2001      	movs	r0, #1
 8003748:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <HAL_MspInit+0x34>)
 800374a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800374c:	4301      	orrs	r1, r0
 800374e:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8003750:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003752:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8003754:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003756:	4002      	ands	r2, r0
 8003758:	9200      	str	r2, [sp, #0]
 800375a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800375c:	6bda      	ldr	r2, [r3, #60]	; 0x3c

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800375e:	3803      	subs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8003760:	430a      	orrs	r2, r1
 8003762:	63da      	str	r2, [r3, #60]	; 0x3c
 8003764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8003766:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8003768:	400b      	ands	r3, r1
 800376a:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800376c:	2103      	movs	r1, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 800376e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8003770:	f7fd f9dc 	bl	8000b2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003774:	bd07      	pop	{r0, r1, r2, pc}
 8003776:	46c0      	nop			; (mov r8, r8)
 8003778:	40021000 	.word	0x40021000

0800377c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800377c:	b510      	push	{r4, lr}
 800377e:	0004      	movs	r4, r0
 8003780:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003782:	2214      	movs	r2, #20
 8003784:	2100      	movs	r1, #0
 8003786:	a803      	add	r0, sp, #12
 8003788:	f000 f96a 	bl	8003a60 <memset>
  if(hadc->Instance==ADC1)
 800378c:	4b10      	ldr	r3, [pc, #64]	; (80037d0 <HAL_ADC_MspInit+0x54>)
 800378e:	6822      	ldr	r2, [r4, #0]
 8003790:	429a      	cmp	r2, r3
 8003792:	d11a      	bne.n	80037ca <HAL_ADC_MspInit+0x4e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003794:	2080      	movs	r0, #128	; 0x80
 8003796:	4b0f      	ldr	r3, [pc, #60]	; (80037d4 <HAL_ADC_MspInit+0x58>)
 8003798:	0340      	lsls	r0, r0, #13
 800379a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800379c:	4301      	orrs	r1, r0
 800379e:	6419      	str	r1, [r3, #64]	; 0x40
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037a0:	2101      	movs	r1, #1
    __HAL_RCC_ADC_CLK_ENABLE();
 80037a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037a4:	4002      	ands	r2, r0
 80037a6:	9201      	str	r2, [sp, #4]
 80037a8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    */
    GPIO_InitStruct.Pin = Cell_4S_ADC_Pin|Cell_3S_ADC_Pin|Cell_2S_ADC_Pin|Cell_1S_ADC_Pin 
                          |BAT_ADC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ac:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ae:	430a      	orrs	r2, r1
 80037b0:	635a      	str	r2, [r3, #52]	; 0x34
 80037b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037b4:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037b6:	400b      	ands	r3, r1
 80037b8:	9302      	str	r3, [sp, #8]
 80037ba:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = Cell_4S_ADC_Pin|Cell_3S_ADC_Pin|Cell_2S_ADC_Pin|Cell_1S_ADC_Pin 
 80037bc:	231f      	movs	r3, #31
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037be:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = Cell_4S_ADC_Pin|Cell_3S_ADC_Pin|Cell_2S_ADC_Pin|Cell_1S_ADC_Pin 
 80037c0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037c2:	3b1c      	subs	r3, #28
 80037c4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037c6:	f7fd fa29 	bl	8000c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80037ca:	b008      	add	sp, #32
 80037cc:	bd10      	pop	{r4, pc}
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	40012400 	.word	0x40012400
 80037d4:	40021000 	.word	0x40021000

080037d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80037d8:	b510      	push	{r4, lr}
 80037da:	0004      	movs	r4, r0
 80037dc:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037de:	2214      	movs	r2, #20
 80037e0:	2100      	movs	r1, #0
 80037e2:	a803      	add	r0, sp, #12
 80037e4:	f000 f93c 	bl	8003a60 <memset>
  if(hi2c->Instance==I2C1)
 80037e8:	4b10      	ldr	r3, [pc, #64]	; (800382c <HAL_I2C_MspInit+0x54>)
 80037ea:	6822      	ldr	r2, [r4, #0]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d11b      	bne.n	8003828 <HAL_I2C_MspInit+0x50>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037f0:	2102      	movs	r1, #2
 80037f2:	4c0f      	ldr	r4, [pc, #60]	; (8003830 <HAL_I2C_MspInit+0x58>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037f4:	480f      	ldr	r0, [pc, #60]	; (8003834 <HAL_I2C_MspInit+0x5c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037f6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80037f8:	430a      	orrs	r2, r1
 80037fa:	6362      	str	r2, [r4, #52]	; 0x34
 80037fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80037fe:	400b      	ands	r3, r1
 8003800:	9301      	str	r3, [sp, #4]
 8003802:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003804:	23c0      	movs	r3, #192	; 0xc0
 8003806:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003808:	3bae      	subs	r3, #174	; 0xae
 800380a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800380c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800380e:	3b0c      	subs	r3, #12
 8003810:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003812:	f7fd fa03 	bl	8000c1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003816:	2180      	movs	r1, #128	; 0x80
 8003818:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800381a:	0389      	lsls	r1, r1, #14
 800381c:	430a      	orrs	r2, r1
 800381e:	63e2      	str	r2, [r4, #60]	; 0x3c
 8003820:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003822:	400b      	ands	r3, r1
 8003824:	9302      	str	r3, [sp, #8]
 8003826:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003828:	b008      	add	sp, #32
 800382a:	bd10      	pop	{r4, pc}
 800382c:	40005400 	.word	0x40005400
 8003830:	40021000 	.word	0x40021000
 8003834:	50000400 	.word	0x50000400

08003838 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003838:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM7)
 800383a:	4b0b      	ldr	r3, [pc, #44]	; (8003868 <HAL_TIM_Base_MspInit+0x30>)
 800383c:	6802      	ldr	r2, [r0, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d110      	bne.n	8003864 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003842:	2020      	movs	r0, #32
 8003844:	4a09      	ldr	r2, [pc, #36]	; (800386c <HAL_TIM_Base_MspInit+0x34>)
 8003846:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003848:	4301      	orrs	r1, r0
 800384a:	63d1      	str	r1, [r2, #60]	; 0x3c
 800384c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_LPTIM2_IRQn, 3, 0);
 800384e:	2103      	movs	r1, #3
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003850:	4003      	ands	r3, r0
 8003852:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_LPTIM2_IRQn, 3, 0);
 8003854:	380e      	subs	r0, #14
 8003856:	2200      	movs	r2, #0
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003858:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_LPTIM2_IRQn, 3, 0);
 800385a:	f7fd f967 	bl	8000b2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_LPTIM2_IRQn);
 800385e:	2012      	movs	r0, #18
 8003860:	f7fd f994 	bl	8000b8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003864:	bd07      	pop	{r0, r1, r2, pc}
 8003866:	46c0      	nop			; (mov r8, r8)
 8003868:	40001400 	.word	0x40001400
 800386c:	40021000 	.word	0x40021000

08003870 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003870:	b530      	push	{r4, r5, lr}
 8003872:	0004      	movs	r4, r0
 8003874:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003876:	2214      	movs	r2, #20
 8003878:	2100      	movs	r1, #0
 800387a:	a803      	add	r0, sp, #12
 800387c:	f000 f8f0 	bl	8003a60 <memset>
  if(huart->Instance==USART1)
 8003880:	4b1c      	ldr	r3, [pc, #112]	; (80038f4 <HAL_UART_MspInit+0x84>)
 8003882:	6822      	ldr	r2, [r4, #0]
 8003884:	429a      	cmp	r2, r3
 8003886:	d132      	bne.n	80038ee <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003888:	2080      	movs	r0, #128	; 0x80
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800388a:	2401      	movs	r4, #1
    __HAL_RCC_USART1_CLK_ENABLE();
 800388c:	4b1a      	ldr	r3, [pc, #104]	; (80038f8 <HAL_UART_MspInit+0x88>)
 800388e:	01c0      	lsls	r0, r0, #7
 8003890:	6c19      	ldr	r1, [r3, #64]	; 0x40
    PA10     ------> USART1_RX
    PA11 [PA9]     ------> USART1_CTS
    PA12 [PA10]     ------> USART1_RTS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003892:	2502      	movs	r5, #2
    __HAL_RCC_USART1_CLK_ENABLE();
 8003894:	4301      	orrs	r1, r0
 8003896:	6419      	str	r1, [r3, #64]	; 0x40
 8003898:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800389a:	a903      	add	r1, sp, #12
    __HAL_RCC_USART1_CLK_ENABLE();
 800389c:	4002      	ands	r2, r0
 800389e:	9201      	str	r2, [sp, #4]
 80038a0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038a4:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038a6:	4322      	orrs	r2, r4
 80038a8:	635a      	str	r2, [r3, #52]	; 0x34
 80038aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ac:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ae:	4023      	ands	r3, r4
 80038b0:	9302      	str	r3, [sp, #8]
 80038b2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80038b4:	23c0      	movs	r3, #192	; 0xc0
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ba:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038bc:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80038be:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038c0:	f7fd f9ac 	bl	8000c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80038c4:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038c6:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c8:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ca:	2500      	movs	r5, #0
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80038cc:	015b      	lsls	r3, r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ce:	a903      	add	r1, sp, #12
 80038d0:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80038d2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d4:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038d6:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80038d8:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038da:	f7fd f99f 	bl	8000c1c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 80038de:	201b      	movs	r0, #27
 80038e0:	002a      	movs	r2, r5
 80038e2:	2103      	movs	r1, #3
 80038e4:	f7fd f922 	bl	8000b2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80038e8:	201b      	movs	r0, #27
 80038ea:	f7fd f94f 	bl	8000b8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80038ee:	b009      	add	sp, #36	; 0x24
 80038f0:	bd30      	pop	{r4, r5, pc}
 80038f2:	46c0      	nop			; (mov r8, r8)
 80038f4:	40013800 	.word	0x40013800
 80038f8:	40021000 	.word	0x40021000

080038fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038fc:	b530      	push	{r4, r5, lr}
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80038fe:	2501      	movs	r5, #1
{
 8003900:	b087      	sub	sp, #28
 8003902:	0001      	movs	r1, r0
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8003904:	2200      	movs	r2, #0
 8003906:	200f      	movs	r0, #15
 8003908:	f7fd f910 	bl	8000b2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 800390c:	200f      	movs	r0, #15
 800390e:	f7fd f93d 	bl	8000b8c <HAL_NVIC_EnableIRQ>
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003912:	4b14      	ldr	r3, [pc, #80]	; (8003964 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003914:	4669      	mov	r1, sp
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003916:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003918:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM2_CLK_ENABLE();
 800391a:	432a      	orrs	r2, r5
 800391c:	63da      	str	r2, [r3, #60]	; 0x3c
 800391e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003920:	402b      	ands	r3, r5
 8003922:	9301      	str	r3, [sp, #4]
 8003924:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003926:	f7fd fde9 	bl	80014fc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800392a:	f7fd fdd3 	bl	80014d4 <HAL_RCC_GetPCLK1Freq>
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800392e:	2380      	movs	r3, #128	; 0x80
 8003930:	4c0d      	ldr	r4, [pc, #52]	; (8003968 <HAL_InitTick+0x6c>)
 8003932:	05db      	lsls	r3, r3, #23
 8003934:	6023      	str	r3, [r4, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8003936:	4b0d      	ldr	r3, [pc, #52]	; (800396c <HAL_InitTick+0x70>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003938:	490d      	ldr	r1, [pc, #52]	; (8003970 <HAL_InitTick+0x74>)
  htim2.Init.Period = (1000000 / 1000) - 1;
 800393a:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800393c:	f7fc fbf8 	bl	8000130 <__udivsi3>
  htim2.Init.Prescaler = uwPrescalerValue;
  htim2.Init.ClockDivision = 0;
 8003940:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003942:	3801      	subs	r0, #1
  htim2.Init.Prescaler = uwPrescalerValue;
 8003944:	6060      	str	r0, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8003946:	0020      	movs	r0, r4
  htim2.Init.ClockDivision = 0;
 8003948:	6123      	str	r3, [r4, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800394a:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800394c:	f7fe f80e 	bl	800196c <HAL_TIM_Base_Init>
 8003950:	0003      	movs	r3, r0
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8003952:	0028      	movs	r0, r5
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8003954:	2b00      	cmp	r3, #0
 8003956:	d102      	bne.n	800395e <HAL_InitTick+0x62>
    return HAL_TIM_Base_Start_IT(&htim2);
 8003958:	0020      	movs	r0, r4
 800395a:	f7fd feeb 	bl	8001734 <HAL_TIM_Base_Start_IT>
}
 800395e:	b007      	add	sp, #28
 8003960:	bd30      	pop	{r4, r5, pc}
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	40021000 	.word	0x40021000
 8003968:	20000efc 	.word	0x20000efc
 800396c:	000003e7 	.word	0x000003e7
 8003970:	000f4240 	.word	0x000f4240

08003974 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003974:	4770      	bx	lr

08003976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003976:	e7fe      	b.n	8003976 <HardFault_Handler>

08003978 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003978:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800397a:	4802      	ldr	r0, [pc, #8]	; (8003984 <TIM2_IRQHandler+0xc>)
 800397c:	f7fd fef2 	bl	8001764 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003980:	bd10      	pop	{r4, pc}
 8003982:	46c0      	nop			; (mov r8, r8)
 8003984:	20000efc 	.word	0x20000efc

08003988 <TIM7_LPTIM2_IRQHandler>:

/**
  * @brief This function handles TIM7 and LPTIM2 interrupts (LPTIM2 interrupt through EXTI line 30).
  */
void TIM7_LPTIM2_IRQHandler(void)
{
 8003988:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 0 */

  /* USER CODE END TIM7_LPTIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800398a:	4804      	ldr	r0, [pc, #16]	; (800399c <TIM7_LPTIM2_IRQHandler+0x14>)
 800398c:	f7fd feea 	bl	8001764 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 1 */

  /* Increment the counter used to measure execution time */
  ulHighFrequencyTimerTicks++;
 8003990:	4a03      	ldr	r2, [pc, #12]	; (80039a0 <TIM7_LPTIM2_IRQHandler+0x18>)
 8003992:	6813      	ldr	r3, [r2, #0]
 8003994:	3301      	adds	r3, #1
 8003996:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM7_LPTIM2_IRQn 1 */
}
 8003998:	bd10      	pop	{r4, pc}
 800399a:	46c0      	nop			; (mov r8, r8)
 800399c:	20000ebc 	.word	0x20000ebc
 80039a0:	20000d74 	.word	0x20000d74

080039a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80039a4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80039a6:	4802      	ldr	r0, [pc, #8]	; (80039b0 <USART1_IRQHandler+0xc>)
 80039a8:	f7fe f840 	bl	8001a2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80039ac:	bd10      	pop	{r4, pc}
 80039ae:	46c0      	nop			; (mov r8, r8)
 80039b0:	20000e30 	.word	0x20000e30

080039b4 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80039b4:	2280      	movs	r2, #128	; 0x80
 80039b6:	4b02      	ldr	r3, [pc, #8]	; (80039c0 <SystemInit+0xc>)
 80039b8:	0512      	lsls	r2, r2, #20
 80039ba:	609a      	str	r2, [r3, #8]
#endif
}
 80039bc:	4770      	bx	lr
 80039be:	46c0      	nop			; (mov r8, r8)
 80039c0:	e000ed00 	.word	0xe000ed00

080039c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80039c4:	480d      	ldr	r0, [pc, #52]	; (80039fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80039c6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80039c8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80039ca:	e003      	b.n	80039d4 <LoopCopyDataInit>

080039cc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80039cc:	4b0c      	ldr	r3, [pc, #48]	; (8003a00 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80039ce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80039d0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80039d2:	3104      	adds	r1, #4

080039d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80039d4:	480b      	ldr	r0, [pc, #44]	; (8003a04 <LoopForever+0xa>)
  ldr r3, =_edata
 80039d6:	4b0c      	ldr	r3, [pc, #48]	; (8003a08 <LoopForever+0xe>)
  adds r2, r0, r1
 80039d8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80039da:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80039dc:	d3f6      	bcc.n	80039cc <CopyDataInit>
  ldr r2, =_sbss
 80039de:	4a0b      	ldr	r2, [pc, #44]	; (8003a0c <LoopForever+0x12>)
  b LoopFillZerobss
 80039e0:	e002      	b.n	80039e8 <LoopFillZerobss>

080039e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80039e2:	2300      	movs	r3, #0
  str  r3, [r2]
 80039e4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039e6:	3204      	adds	r2, #4

080039e8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80039e8:	4b09      	ldr	r3, [pc, #36]	; (8003a10 <LoopForever+0x16>)
  cmp r2, r3
 80039ea:	429a      	cmp	r2, r3
  bcc FillZerobss
 80039ec:	d3f9      	bcc.n	80039e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80039ee:	f7ff ffe1 	bl	80039b4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80039f2:	f000 f811 	bl	8003a18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80039f6:	f7ff fd95 	bl	8003524 <main>

080039fa <LoopForever>:

LoopForever:
    b LoopForever
 80039fa:	e7fe      	b.n	80039fa <LoopForever>
  ldr   r0, =_estack
 80039fc:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 8003a00:	08003b3c 	.word	0x08003b3c
  ldr r0, =_sdata
 8003a04:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003a08:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8003a0c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8003a10:	20000f3c 	.word	0x20000f3c

08003a14 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003a14:	e7fe      	b.n	8003a14 <ADC1_COMP_IRQHandler>
	...

08003a18 <__libc_init_array>:
 8003a18:	b570      	push	{r4, r5, r6, lr}
 8003a1a:	2600      	movs	r6, #0
 8003a1c:	4d0c      	ldr	r5, [pc, #48]	; (8003a50 <__libc_init_array+0x38>)
 8003a1e:	4c0d      	ldr	r4, [pc, #52]	; (8003a54 <__libc_init_array+0x3c>)
 8003a20:	1b64      	subs	r4, r4, r5
 8003a22:	10a4      	asrs	r4, r4, #2
 8003a24:	42a6      	cmp	r6, r4
 8003a26:	d109      	bne.n	8003a3c <__libc_init_array+0x24>
 8003a28:	2600      	movs	r6, #0
 8003a2a:	f000 f821 	bl	8003a70 <_init>
 8003a2e:	4d0a      	ldr	r5, [pc, #40]	; (8003a58 <__libc_init_array+0x40>)
 8003a30:	4c0a      	ldr	r4, [pc, #40]	; (8003a5c <__libc_init_array+0x44>)
 8003a32:	1b64      	subs	r4, r4, r5
 8003a34:	10a4      	asrs	r4, r4, #2
 8003a36:	42a6      	cmp	r6, r4
 8003a38:	d105      	bne.n	8003a46 <__libc_init_array+0x2e>
 8003a3a:	bd70      	pop	{r4, r5, r6, pc}
 8003a3c:	00b3      	lsls	r3, r6, #2
 8003a3e:	58eb      	ldr	r3, [r5, r3]
 8003a40:	4798      	blx	r3
 8003a42:	3601      	adds	r6, #1
 8003a44:	e7ee      	b.n	8003a24 <__libc_init_array+0xc>
 8003a46:	00b3      	lsls	r3, r6, #2
 8003a48:	58eb      	ldr	r3, [r5, r3]
 8003a4a:	4798      	blx	r3
 8003a4c:	3601      	adds	r6, #1
 8003a4e:	e7f2      	b.n	8003a36 <__libc_init_array+0x1e>
 8003a50:	08003b34 	.word	0x08003b34
 8003a54:	08003b34 	.word	0x08003b34
 8003a58:	08003b34 	.word	0x08003b34
 8003a5c:	08003b38 	.word	0x08003b38

08003a60 <memset>:
 8003a60:	0003      	movs	r3, r0
 8003a62:	1882      	adds	r2, r0, r2
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d100      	bne.n	8003a6a <memset+0xa>
 8003a68:	4770      	bx	lr
 8003a6a:	7019      	strb	r1, [r3, #0]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	e7f9      	b.n	8003a64 <memset+0x4>

08003a70 <_init>:
 8003a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a72:	46c0      	nop			; (mov r8, r8)
 8003a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a76:	bc08      	pop	{r3}
 8003a78:	469e      	mov	lr, r3
 8003a7a:	4770      	bx	lr

08003a7c <_fini>:
 8003a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a82:	bc08      	pop	{r3}
 8003a84:	469e      	mov	lr, r3
 8003a86:	4770      	bx	lr
