
Lipow.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000516c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  0800522c  0800522c  0001522c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800534c  0800534c  0001534c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005350  08005350  00015350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08005354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000f48  2000000c  08005360  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000f54  08005360  00020f54  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00014994  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002f3e  00000000  00000000  000349c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001540  00000000  00000000  00037908  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000013c8  00000000  00000000  00038e48  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00009815  00000000  00000000  0003a210  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000068e6  00000000  00000000  00043a25  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0004a30b  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00004cc4  00000000  00000000  0004a388  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005214 	.word	0x08005214

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08005214 	.word	0x08005214

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_fdiv>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	4657      	mov	r7, sl
 8000224:	464e      	mov	r6, r9
 8000226:	46de      	mov	lr, fp
 8000228:	4645      	mov	r5, r8
 800022a:	b5e0      	push	{r5, r6, r7, lr}
 800022c:	0244      	lsls	r4, r0, #9
 800022e:	0043      	lsls	r3, r0, #1
 8000230:	0fc6      	lsrs	r6, r0, #31
 8000232:	b083      	sub	sp, #12
 8000234:	1c0f      	adds	r7, r1, #0
 8000236:	0a64      	lsrs	r4, r4, #9
 8000238:	0e1b      	lsrs	r3, r3, #24
 800023a:	46b2      	mov	sl, r6
 800023c:	d053      	beq.n	80002e6 <__aeabi_fdiv+0xc6>
 800023e:	2bff      	cmp	r3, #255	; 0xff
 8000240:	d027      	beq.n	8000292 <__aeabi_fdiv+0x72>
 8000242:	2280      	movs	r2, #128	; 0x80
 8000244:	00e4      	lsls	r4, r4, #3
 8000246:	04d2      	lsls	r2, r2, #19
 8000248:	4314      	orrs	r4, r2
 800024a:	227f      	movs	r2, #127	; 0x7f
 800024c:	4252      	negs	r2, r2
 800024e:	4690      	mov	r8, r2
 8000250:	4498      	add	r8, r3
 8000252:	2300      	movs	r3, #0
 8000254:	4699      	mov	r9, r3
 8000256:	469b      	mov	fp, r3
 8000258:	027d      	lsls	r5, r7, #9
 800025a:	0078      	lsls	r0, r7, #1
 800025c:	0ffb      	lsrs	r3, r7, #31
 800025e:	0a6d      	lsrs	r5, r5, #9
 8000260:	0e00      	lsrs	r0, r0, #24
 8000262:	9300      	str	r3, [sp, #0]
 8000264:	d024      	beq.n	80002b0 <__aeabi_fdiv+0x90>
 8000266:	28ff      	cmp	r0, #255	; 0xff
 8000268:	d046      	beq.n	80002f8 <__aeabi_fdiv+0xd8>
 800026a:	2380      	movs	r3, #128	; 0x80
 800026c:	2100      	movs	r1, #0
 800026e:	00ed      	lsls	r5, r5, #3
 8000270:	04db      	lsls	r3, r3, #19
 8000272:	431d      	orrs	r5, r3
 8000274:	387f      	subs	r0, #127	; 0x7f
 8000276:	4647      	mov	r7, r8
 8000278:	1a38      	subs	r0, r7, r0
 800027a:	464f      	mov	r7, r9
 800027c:	430f      	orrs	r7, r1
 800027e:	00bf      	lsls	r7, r7, #2
 8000280:	46b9      	mov	r9, r7
 8000282:	0033      	movs	r3, r6
 8000284:	9a00      	ldr	r2, [sp, #0]
 8000286:	4f87      	ldr	r7, [pc, #540]	; (80004a4 <__aeabi_fdiv+0x284>)
 8000288:	4053      	eors	r3, r2
 800028a:	464a      	mov	r2, r9
 800028c:	58ba      	ldr	r2, [r7, r2]
 800028e:	9301      	str	r3, [sp, #4]
 8000290:	4697      	mov	pc, r2
 8000292:	2c00      	cmp	r4, #0
 8000294:	d14e      	bne.n	8000334 <__aeabi_fdiv+0x114>
 8000296:	2308      	movs	r3, #8
 8000298:	4699      	mov	r9, r3
 800029a:	33f7      	adds	r3, #247	; 0xf7
 800029c:	4698      	mov	r8, r3
 800029e:	3bfd      	subs	r3, #253	; 0xfd
 80002a0:	469b      	mov	fp, r3
 80002a2:	027d      	lsls	r5, r7, #9
 80002a4:	0078      	lsls	r0, r7, #1
 80002a6:	0ffb      	lsrs	r3, r7, #31
 80002a8:	0a6d      	lsrs	r5, r5, #9
 80002aa:	0e00      	lsrs	r0, r0, #24
 80002ac:	9300      	str	r3, [sp, #0]
 80002ae:	d1da      	bne.n	8000266 <__aeabi_fdiv+0x46>
 80002b0:	2d00      	cmp	r5, #0
 80002b2:	d126      	bne.n	8000302 <__aeabi_fdiv+0xe2>
 80002b4:	2000      	movs	r0, #0
 80002b6:	2101      	movs	r1, #1
 80002b8:	0033      	movs	r3, r6
 80002ba:	9a00      	ldr	r2, [sp, #0]
 80002bc:	4f7a      	ldr	r7, [pc, #488]	; (80004a8 <__aeabi_fdiv+0x288>)
 80002be:	4053      	eors	r3, r2
 80002c0:	4642      	mov	r2, r8
 80002c2:	1a10      	subs	r0, r2, r0
 80002c4:	464a      	mov	r2, r9
 80002c6:	430a      	orrs	r2, r1
 80002c8:	0092      	lsls	r2, r2, #2
 80002ca:	58ba      	ldr	r2, [r7, r2]
 80002cc:	001d      	movs	r5, r3
 80002ce:	4697      	mov	pc, r2
 80002d0:	9b00      	ldr	r3, [sp, #0]
 80002d2:	002c      	movs	r4, r5
 80002d4:	469a      	mov	sl, r3
 80002d6:	468b      	mov	fp, r1
 80002d8:	465b      	mov	r3, fp
 80002da:	2b02      	cmp	r3, #2
 80002dc:	d131      	bne.n	8000342 <__aeabi_fdiv+0x122>
 80002de:	4653      	mov	r3, sl
 80002e0:	21ff      	movs	r1, #255	; 0xff
 80002e2:	2400      	movs	r4, #0
 80002e4:	e038      	b.n	8000358 <__aeabi_fdiv+0x138>
 80002e6:	2c00      	cmp	r4, #0
 80002e8:	d117      	bne.n	800031a <__aeabi_fdiv+0xfa>
 80002ea:	2304      	movs	r3, #4
 80002ec:	4699      	mov	r9, r3
 80002ee:	2300      	movs	r3, #0
 80002f0:	4698      	mov	r8, r3
 80002f2:	3301      	adds	r3, #1
 80002f4:	469b      	mov	fp, r3
 80002f6:	e7af      	b.n	8000258 <__aeabi_fdiv+0x38>
 80002f8:	20ff      	movs	r0, #255	; 0xff
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d10b      	bne.n	8000316 <__aeabi_fdiv+0xf6>
 80002fe:	2102      	movs	r1, #2
 8000300:	e7da      	b.n	80002b8 <__aeabi_fdiv+0x98>
 8000302:	0028      	movs	r0, r5
 8000304:	f000 fab6 	bl	8000874 <__clzsi2>
 8000308:	1f43      	subs	r3, r0, #5
 800030a:	409d      	lsls	r5, r3
 800030c:	2376      	movs	r3, #118	; 0x76
 800030e:	425b      	negs	r3, r3
 8000310:	1a18      	subs	r0, r3, r0
 8000312:	2100      	movs	r1, #0
 8000314:	e7af      	b.n	8000276 <__aeabi_fdiv+0x56>
 8000316:	2103      	movs	r1, #3
 8000318:	e7ad      	b.n	8000276 <__aeabi_fdiv+0x56>
 800031a:	0020      	movs	r0, r4
 800031c:	f000 faaa 	bl	8000874 <__clzsi2>
 8000320:	1f43      	subs	r3, r0, #5
 8000322:	409c      	lsls	r4, r3
 8000324:	2376      	movs	r3, #118	; 0x76
 8000326:	425b      	negs	r3, r3
 8000328:	1a1b      	subs	r3, r3, r0
 800032a:	4698      	mov	r8, r3
 800032c:	2300      	movs	r3, #0
 800032e:	4699      	mov	r9, r3
 8000330:	469b      	mov	fp, r3
 8000332:	e791      	b.n	8000258 <__aeabi_fdiv+0x38>
 8000334:	230c      	movs	r3, #12
 8000336:	4699      	mov	r9, r3
 8000338:	33f3      	adds	r3, #243	; 0xf3
 800033a:	4698      	mov	r8, r3
 800033c:	3bfc      	subs	r3, #252	; 0xfc
 800033e:	469b      	mov	fp, r3
 8000340:	e78a      	b.n	8000258 <__aeabi_fdiv+0x38>
 8000342:	2b03      	cmp	r3, #3
 8000344:	d100      	bne.n	8000348 <__aeabi_fdiv+0x128>
 8000346:	e0a5      	b.n	8000494 <__aeabi_fdiv+0x274>
 8000348:	4655      	mov	r5, sl
 800034a:	2b01      	cmp	r3, #1
 800034c:	d000      	beq.n	8000350 <__aeabi_fdiv+0x130>
 800034e:	e081      	b.n	8000454 <__aeabi_fdiv+0x234>
 8000350:	2301      	movs	r3, #1
 8000352:	2100      	movs	r1, #0
 8000354:	2400      	movs	r4, #0
 8000356:	402b      	ands	r3, r5
 8000358:	0264      	lsls	r4, r4, #9
 800035a:	05c9      	lsls	r1, r1, #23
 800035c:	0a60      	lsrs	r0, r4, #9
 800035e:	07db      	lsls	r3, r3, #31
 8000360:	4308      	orrs	r0, r1
 8000362:	4318      	orrs	r0, r3
 8000364:	b003      	add	sp, #12
 8000366:	bc3c      	pop	{r2, r3, r4, r5}
 8000368:	4690      	mov	r8, r2
 800036a:	4699      	mov	r9, r3
 800036c:	46a2      	mov	sl, r4
 800036e:	46ab      	mov	fp, r5
 8000370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000372:	2480      	movs	r4, #128	; 0x80
 8000374:	2300      	movs	r3, #0
 8000376:	03e4      	lsls	r4, r4, #15
 8000378:	21ff      	movs	r1, #255	; 0xff
 800037a:	e7ed      	b.n	8000358 <__aeabi_fdiv+0x138>
 800037c:	21ff      	movs	r1, #255	; 0xff
 800037e:	2400      	movs	r4, #0
 8000380:	e7ea      	b.n	8000358 <__aeabi_fdiv+0x138>
 8000382:	2301      	movs	r3, #1
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	291b      	cmp	r1, #27
 8000388:	dd66      	ble.n	8000458 <__aeabi_fdiv+0x238>
 800038a:	9a01      	ldr	r2, [sp, #4]
 800038c:	4013      	ands	r3, r2
 800038e:	2100      	movs	r1, #0
 8000390:	2400      	movs	r4, #0
 8000392:	e7e1      	b.n	8000358 <__aeabi_fdiv+0x138>
 8000394:	2380      	movs	r3, #128	; 0x80
 8000396:	03db      	lsls	r3, r3, #15
 8000398:	421c      	tst	r4, r3
 800039a:	d038      	beq.n	800040e <__aeabi_fdiv+0x1ee>
 800039c:	421d      	tst	r5, r3
 800039e:	d051      	beq.n	8000444 <__aeabi_fdiv+0x224>
 80003a0:	431c      	orrs	r4, r3
 80003a2:	0264      	lsls	r4, r4, #9
 80003a4:	0a64      	lsrs	r4, r4, #9
 80003a6:	0033      	movs	r3, r6
 80003a8:	21ff      	movs	r1, #255	; 0xff
 80003aa:	e7d5      	b.n	8000358 <__aeabi_fdiv+0x138>
 80003ac:	0163      	lsls	r3, r4, #5
 80003ae:	016c      	lsls	r4, r5, #5
 80003b0:	42a3      	cmp	r3, r4
 80003b2:	d23b      	bcs.n	800042c <__aeabi_fdiv+0x20c>
 80003b4:	261b      	movs	r6, #27
 80003b6:	2100      	movs	r1, #0
 80003b8:	3801      	subs	r0, #1
 80003ba:	2501      	movs	r5, #1
 80003bc:	001f      	movs	r7, r3
 80003be:	0049      	lsls	r1, r1, #1
 80003c0:	005b      	lsls	r3, r3, #1
 80003c2:	2f00      	cmp	r7, #0
 80003c4:	db01      	blt.n	80003ca <__aeabi_fdiv+0x1aa>
 80003c6:	429c      	cmp	r4, r3
 80003c8:	d801      	bhi.n	80003ce <__aeabi_fdiv+0x1ae>
 80003ca:	1b1b      	subs	r3, r3, r4
 80003cc:	4329      	orrs	r1, r5
 80003ce:	3e01      	subs	r6, #1
 80003d0:	2e00      	cmp	r6, #0
 80003d2:	d1f3      	bne.n	80003bc <__aeabi_fdiv+0x19c>
 80003d4:	001c      	movs	r4, r3
 80003d6:	1e63      	subs	r3, r4, #1
 80003d8:	419c      	sbcs	r4, r3
 80003da:	430c      	orrs	r4, r1
 80003dc:	0001      	movs	r1, r0
 80003de:	317f      	adds	r1, #127	; 0x7f
 80003e0:	2900      	cmp	r1, #0
 80003e2:	ddce      	ble.n	8000382 <__aeabi_fdiv+0x162>
 80003e4:	0763      	lsls	r3, r4, #29
 80003e6:	d004      	beq.n	80003f2 <__aeabi_fdiv+0x1d2>
 80003e8:	230f      	movs	r3, #15
 80003ea:	4023      	ands	r3, r4
 80003ec:	2b04      	cmp	r3, #4
 80003ee:	d000      	beq.n	80003f2 <__aeabi_fdiv+0x1d2>
 80003f0:	3404      	adds	r4, #4
 80003f2:	0123      	lsls	r3, r4, #4
 80003f4:	d503      	bpl.n	80003fe <__aeabi_fdiv+0x1de>
 80003f6:	0001      	movs	r1, r0
 80003f8:	4b2c      	ldr	r3, [pc, #176]	; (80004ac <__aeabi_fdiv+0x28c>)
 80003fa:	3180      	adds	r1, #128	; 0x80
 80003fc:	401c      	ands	r4, r3
 80003fe:	29fe      	cmp	r1, #254	; 0xfe
 8000400:	dd0d      	ble.n	800041e <__aeabi_fdiv+0x1fe>
 8000402:	2301      	movs	r3, #1
 8000404:	9a01      	ldr	r2, [sp, #4]
 8000406:	21ff      	movs	r1, #255	; 0xff
 8000408:	4013      	ands	r3, r2
 800040a:	2400      	movs	r4, #0
 800040c:	e7a4      	b.n	8000358 <__aeabi_fdiv+0x138>
 800040e:	2380      	movs	r3, #128	; 0x80
 8000410:	03db      	lsls	r3, r3, #15
 8000412:	431c      	orrs	r4, r3
 8000414:	0264      	lsls	r4, r4, #9
 8000416:	0a64      	lsrs	r4, r4, #9
 8000418:	0033      	movs	r3, r6
 800041a:	21ff      	movs	r1, #255	; 0xff
 800041c:	e79c      	b.n	8000358 <__aeabi_fdiv+0x138>
 800041e:	2301      	movs	r3, #1
 8000420:	9a01      	ldr	r2, [sp, #4]
 8000422:	01a4      	lsls	r4, r4, #6
 8000424:	0a64      	lsrs	r4, r4, #9
 8000426:	b2c9      	uxtb	r1, r1
 8000428:	4013      	ands	r3, r2
 800042a:	e795      	b.n	8000358 <__aeabi_fdiv+0x138>
 800042c:	1b1b      	subs	r3, r3, r4
 800042e:	261a      	movs	r6, #26
 8000430:	2101      	movs	r1, #1
 8000432:	e7c2      	b.n	80003ba <__aeabi_fdiv+0x19a>
 8000434:	9b00      	ldr	r3, [sp, #0]
 8000436:	468b      	mov	fp, r1
 8000438:	469a      	mov	sl, r3
 800043a:	2400      	movs	r4, #0
 800043c:	e74c      	b.n	80002d8 <__aeabi_fdiv+0xb8>
 800043e:	0263      	lsls	r3, r4, #9
 8000440:	d5e5      	bpl.n	800040e <__aeabi_fdiv+0x1ee>
 8000442:	2500      	movs	r5, #0
 8000444:	2480      	movs	r4, #128	; 0x80
 8000446:	03e4      	lsls	r4, r4, #15
 8000448:	432c      	orrs	r4, r5
 800044a:	0264      	lsls	r4, r4, #9
 800044c:	0a64      	lsrs	r4, r4, #9
 800044e:	9b00      	ldr	r3, [sp, #0]
 8000450:	21ff      	movs	r1, #255	; 0xff
 8000452:	e781      	b.n	8000358 <__aeabi_fdiv+0x138>
 8000454:	9501      	str	r5, [sp, #4]
 8000456:	e7c1      	b.n	80003dc <__aeabi_fdiv+0x1bc>
 8000458:	0023      	movs	r3, r4
 800045a:	2020      	movs	r0, #32
 800045c:	40cb      	lsrs	r3, r1
 800045e:	1a41      	subs	r1, r0, r1
 8000460:	408c      	lsls	r4, r1
 8000462:	1e61      	subs	r1, r4, #1
 8000464:	418c      	sbcs	r4, r1
 8000466:	431c      	orrs	r4, r3
 8000468:	0763      	lsls	r3, r4, #29
 800046a:	d004      	beq.n	8000476 <__aeabi_fdiv+0x256>
 800046c:	230f      	movs	r3, #15
 800046e:	4023      	ands	r3, r4
 8000470:	2b04      	cmp	r3, #4
 8000472:	d000      	beq.n	8000476 <__aeabi_fdiv+0x256>
 8000474:	3404      	adds	r4, #4
 8000476:	0163      	lsls	r3, r4, #5
 8000478:	d505      	bpl.n	8000486 <__aeabi_fdiv+0x266>
 800047a:	2301      	movs	r3, #1
 800047c:	9a01      	ldr	r2, [sp, #4]
 800047e:	2101      	movs	r1, #1
 8000480:	4013      	ands	r3, r2
 8000482:	2400      	movs	r4, #0
 8000484:	e768      	b.n	8000358 <__aeabi_fdiv+0x138>
 8000486:	2301      	movs	r3, #1
 8000488:	9a01      	ldr	r2, [sp, #4]
 800048a:	01a4      	lsls	r4, r4, #6
 800048c:	0a64      	lsrs	r4, r4, #9
 800048e:	4013      	ands	r3, r2
 8000490:	2100      	movs	r1, #0
 8000492:	e761      	b.n	8000358 <__aeabi_fdiv+0x138>
 8000494:	2380      	movs	r3, #128	; 0x80
 8000496:	03db      	lsls	r3, r3, #15
 8000498:	431c      	orrs	r4, r3
 800049a:	0264      	lsls	r4, r4, #9
 800049c:	0a64      	lsrs	r4, r4, #9
 800049e:	4653      	mov	r3, sl
 80004a0:	21ff      	movs	r1, #255	; 0xff
 80004a2:	e759      	b.n	8000358 <__aeabi_fdiv+0x138>
 80004a4:	0800526c 	.word	0x0800526c
 80004a8:	080052ac 	.word	0x080052ac
 80004ac:	f7ffffff 	.word	0xf7ffffff

080004b0 <__aeabi_fsub>:
 80004b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b2:	464f      	mov	r7, r9
 80004b4:	46d6      	mov	lr, sl
 80004b6:	4646      	mov	r6, r8
 80004b8:	0044      	lsls	r4, r0, #1
 80004ba:	b5c0      	push	{r6, r7, lr}
 80004bc:	0fc2      	lsrs	r2, r0, #31
 80004be:	0247      	lsls	r7, r0, #9
 80004c0:	0248      	lsls	r0, r1, #9
 80004c2:	0a40      	lsrs	r0, r0, #9
 80004c4:	4684      	mov	ip, r0
 80004c6:	4666      	mov	r6, ip
 80004c8:	0a7b      	lsrs	r3, r7, #9
 80004ca:	0048      	lsls	r0, r1, #1
 80004cc:	0fc9      	lsrs	r1, r1, #31
 80004ce:	469a      	mov	sl, r3
 80004d0:	0e24      	lsrs	r4, r4, #24
 80004d2:	0015      	movs	r5, r2
 80004d4:	00db      	lsls	r3, r3, #3
 80004d6:	0e00      	lsrs	r0, r0, #24
 80004d8:	4689      	mov	r9, r1
 80004da:	00f6      	lsls	r6, r6, #3
 80004dc:	28ff      	cmp	r0, #255	; 0xff
 80004de:	d100      	bne.n	80004e2 <__aeabi_fsub+0x32>
 80004e0:	e08f      	b.n	8000602 <__aeabi_fsub+0x152>
 80004e2:	2101      	movs	r1, #1
 80004e4:	464f      	mov	r7, r9
 80004e6:	404f      	eors	r7, r1
 80004e8:	0039      	movs	r1, r7
 80004ea:	4291      	cmp	r1, r2
 80004ec:	d066      	beq.n	80005bc <__aeabi_fsub+0x10c>
 80004ee:	1a22      	subs	r2, r4, r0
 80004f0:	2a00      	cmp	r2, #0
 80004f2:	dc00      	bgt.n	80004f6 <__aeabi_fsub+0x46>
 80004f4:	e09d      	b.n	8000632 <__aeabi_fsub+0x182>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	d13d      	bne.n	8000576 <__aeabi_fsub+0xc6>
 80004fa:	2e00      	cmp	r6, #0
 80004fc:	d100      	bne.n	8000500 <__aeabi_fsub+0x50>
 80004fe:	e08b      	b.n	8000618 <__aeabi_fsub+0x168>
 8000500:	1e51      	subs	r1, r2, #1
 8000502:	2900      	cmp	r1, #0
 8000504:	d000      	beq.n	8000508 <__aeabi_fsub+0x58>
 8000506:	e0b5      	b.n	8000674 <__aeabi_fsub+0x1c4>
 8000508:	2401      	movs	r4, #1
 800050a:	1b9b      	subs	r3, r3, r6
 800050c:	015a      	lsls	r2, r3, #5
 800050e:	d544      	bpl.n	800059a <__aeabi_fsub+0xea>
 8000510:	019b      	lsls	r3, r3, #6
 8000512:	099f      	lsrs	r7, r3, #6
 8000514:	0038      	movs	r0, r7
 8000516:	f000 f9ad 	bl	8000874 <__clzsi2>
 800051a:	3805      	subs	r0, #5
 800051c:	4087      	lsls	r7, r0
 800051e:	4284      	cmp	r4, r0
 8000520:	dd00      	ble.n	8000524 <__aeabi_fsub+0x74>
 8000522:	e096      	b.n	8000652 <__aeabi_fsub+0x1a2>
 8000524:	1b04      	subs	r4, r0, r4
 8000526:	003a      	movs	r2, r7
 8000528:	2020      	movs	r0, #32
 800052a:	3401      	adds	r4, #1
 800052c:	40e2      	lsrs	r2, r4
 800052e:	1b04      	subs	r4, r0, r4
 8000530:	40a7      	lsls	r7, r4
 8000532:	003b      	movs	r3, r7
 8000534:	1e5f      	subs	r7, r3, #1
 8000536:	41bb      	sbcs	r3, r7
 8000538:	2400      	movs	r4, #0
 800053a:	4313      	orrs	r3, r2
 800053c:	075a      	lsls	r2, r3, #29
 800053e:	d004      	beq.n	800054a <__aeabi_fsub+0x9a>
 8000540:	220f      	movs	r2, #15
 8000542:	401a      	ands	r2, r3
 8000544:	2a04      	cmp	r2, #4
 8000546:	d000      	beq.n	800054a <__aeabi_fsub+0x9a>
 8000548:	3304      	adds	r3, #4
 800054a:	015a      	lsls	r2, r3, #5
 800054c:	d527      	bpl.n	800059e <__aeabi_fsub+0xee>
 800054e:	3401      	adds	r4, #1
 8000550:	2cff      	cmp	r4, #255	; 0xff
 8000552:	d100      	bne.n	8000556 <__aeabi_fsub+0xa6>
 8000554:	e079      	b.n	800064a <__aeabi_fsub+0x19a>
 8000556:	2201      	movs	r2, #1
 8000558:	019b      	lsls	r3, r3, #6
 800055a:	0a5b      	lsrs	r3, r3, #9
 800055c:	b2e4      	uxtb	r4, r4
 800055e:	402a      	ands	r2, r5
 8000560:	025b      	lsls	r3, r3, #9
 8000562:	05e4      	lsls	r4, r4, #23
 8000564:	0a58      	lsrs	r0, r3, #9
 8000566:	07d2      	lsls	r2, r2, #31
 8000568:	4320      	orrs	r0, r4
 800056a:	4310      	orrs	r0, r2
 800056c:	bc1c      	pop	{r2, r3, r4}
 800056e:	4690      	mov	r8, r2
 8000570:	4699      	mov	r9, r3
 8000572:	46a2      	mov	sl, r4
 8000574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000576:	2cff      	cmp	r4, #255	; 0xff
 8000578:	d0e0      	beq.n	800053c <__aeabi_fsub+0x8c>
 800057a:	2180      	movs	r1, #128	; 0x80
 800057c:	04c9      	lsls	r1, r1, #19
 800057e:	430e      	orrs	r6, r1
 8000580:	2a1b      	cmp	r2, #27
 8000582:	dc7b      	bgt.n	800067c <__aeabi_fsub+0x1cc>
 8000584:	0031      	movs	r1, r6
 8000586:	2020      	movs	r0, #32
 8000588:	40d1      	lsrs	r1, r2
 800058a:	1a82      	subs	r2, r0, r2
 800058c:	4096      	lsls	r6, r2
 800058e:	1e72      	subs	r2, r6, #1
 8000590:	4196      	sbcs	r6, r2
 8000592:	430e      	orrs	r6, r1
 8000594:	1b9b      	subs	r3, r3, r6
 8000596:	015a      	lsls	r2, r3, #5
 8000598:	d4ba      	bmi.n	8000510 <__aeabi_fsub+0x60>
 800059a:	075a      	lsls	r2, r3, #29
 800059c:	d1d0      	bne.n	8000540 <__aeabi_fsub+0x90>
 800059e:	2201      	movs	r2, #1
 80005a0:	08df      	lsrs	r7, r3, #3
 80005a2:	402a      	ands	r2, r5
 80005a4:	2cff      	cmp	r4, #255	; 0xff
 80005a6:	d133      	bne.n	8000610 <__aeabi_fsub+0x160>
 80005a8:	2f00      	cmp	r7, #0
 80005aa:	d100      	bne.n	80005ae <__aeabi_fsub+0xfe>
 80005ac:	e0a8      	b.n	8000700 <__aeabi_fsub+0x250>
 80005ae:	2380      	movs	r3, #128	; 0x80
 80005b0:	03db      	lsls	r3, r3, #15
 80005b2:	433b      	orrs	r3, r7
 80005b4:	025b      	lsls	r3, r3, #9
 80005b6:	0a5b      	lsrs	r3, r3, #9
 80005b8:	24ff      	movs	r4, #255	; 0xff
 80005ba:	e7d1      	b.n	8000560 <__aeabi_fsub+0xb0>
 80005bc:	1a21      	subs	r1, r4, r0
 80005be:	2900      	cmp	r1, #0
 80005c0:	dd4c      	ble.n	800065c <__aeabi_fsub+0x1ac>
 80005c2:	2800      	cmp	r0, #0
 80005c4:	d02a      	beq.n	800061c <__aeabi_fsub+0x16c>
 80005c6:	2cff      	cmp	r4, #255	; 0xff
 80005c8:	d0b8      	beq.n	800053c <__aeabi_fsub+0x8c>
 80005ca:	2080      	movs	r0, #128	; 0x80
 80005cc:	04c0      	lsls	r0, r0, #19
 80005ce:	4306      	orrs	r6, r0
 80005d0:	291b      	cmp	r1, #27
 80005d2:	dd00      	ble.n	80005d6 <__aeabi_fsub+0x126>
 80005d4:	e0af      	b.n	8000736 <__aeabi_fsub+0x286>
 80005d6:	0030      	movs	r0, r6
 80005d8:	2720      	movs	r7, #32
 80005da:	40c8      	lsrs	r0, r1
 80005dc:	1a79      	subs	r1, r7, r1
 80005de:	408e      	lsls	r6, r1
 80005e0:	1e71      	subs	r1, r6, #1
 80005e2:	418e      	sbcs	r6, r1
 80005e4:	4306      	orrs	r6, r0
 80005e6:	199b      	adds	r3, r3, r6
 80005e8:	0159      	lsls	r1, r3, #5
 80005ea:	d5d6      	bpl.n	800059a <__aeabi_fsub+0xea>
 80005ec:	3401      	adds	r4, #1
 80005ee:	2cff      	cmp	r4, #255	; 0xff
 80005f0:	d100      	bne.n	80005f4 <__aeabi_fsub+0x144>
 80005f2:	e085      	b.n	8000700 <__aeabi_fsub+0x250>
 80005f4:	2201      	movs	r2, #1
 80005f6:	497a      	ldr	r1, [pc, #488]	; (80007e0 <__aeabi_fsub+0x330>)
 80005f8:	401a      	ands	r2, r3
 80005fa:	085b      	lsrs	r3, r3, #1
 80005fc:	400b      	ands	r3, r1
 80005fe:	4313      	orrs	r3, r2
 8000600:	e79c      	b.n	800053c <__aeabi_fsub+0x8c>
 8000602:	2e00      	cmp	r6, #0
 8000604:	d000      	beq.n	8000608 <__aeabi_fsub+0x158>
 8000606:	e770      	b.n	80004ea <__aeabi_fsub+0x3a>
 8000608:	e76b      	b.n	80004e2 <__aeabi_fsub+0x32>
 800060a:	1e3b      	subs	r3, r7, #0
 800060c:	d1c5      	bne.n	800059a <__aeabi_fsub+0xea>
 800060e:	2200      	movs	r2, #0
 8000610:	027b      	lsls	r3, r7, #9
 8000612:	0a5b      	lsrs	r3, r3, #9
 8000614:	b2e4      	uxtb	r4, r4
 8000616:	e7a3      	b.n	8000560 <__aeabi_fsub+0xb0>
 8000618:	0014      	movs	r4, r2
 800061a:	e78f      	b.n	800053c <__aeabi_fsub+0x8c>
 800061c:	2e00      	cmp	r6, #0
 800061e:	d04d      	beq.n	80006bc <__aeabi_fsub+0x20c>
 8000620:	1e48      	subs	r0, r1, #1
 8000622:	2800      	cmp	r0, #0
 8000624:	d157      	bne.n	80006d6 <__aeabi_fsub+0x226>
 8000626:	199b      	adds	r3, r3, r6
 8000628:	2401      	movs	r4, #1
 800062a:	015a      	lsls	r2, r3, #5
 800062c:	d5b5      	bpl.n	800059a <__aeabi_fsub+0xea>
 800062e:	2402      	movs	r4, #2
 8000630:	e7e0      	b.n	80005f4 <__aeabi_fsub+0x144>
 8000632:	2a00      	cmp	r2, #0
 8000634:	d125      	bne.n	8000682 <__aeabi_fsub+0x1d2>
 8000636:	1c62      	adds	r2, r4, #1
 8000638:	b2d2      	uxtb	r2, r2
 800063a:	2a01      	cmp	r2, #1
 800063c:	dd72      	ble.n	8000724 <__aeabi_fsub+0x274>
 800063e:	1b9f      	subs	r7, r3, r6
 8000640:	017a      	lsls	r2, r7, #5
 8000642:	d535      	bpl.n	80006b0 <__aeabi_fsub+0x200>
 8000644:	1af7      	subs	r7, r6, r3
 8000646:	000d      	movs	r5, r1
 8000648:	e764      	b.n	8000514 <__aeabi_fsub+0x64>
 800064a:	2201      	movs	r2, #1
 800064c:	2300      	movs	r3, #0
 800064e:	402a      	ands	r2, r5
 8000650:	e786      	b.n	8000560 <__aeabi_fsub+0xb0>
 8000652:	003b      	movs	r3, r7
 8000654:	4a63      	ldr	r2, [pc, #396]	; (80007e4 <__aeabi_fsub+0x334>)
 8000656:	1a24      	subs	r4, r4, r0
 8000658:	4013      	ands	r3, r2
 800065a:	e76f      	b.n	800053c <__aeabi_fsub+0x8c>
 800065c:	2900      	cmp	r1, #0
 800065e:	d16c      	bne.n	800073a <__aeabi_fsub+0x28a>
 8000660:	1c61      	adds	r1, r4, #1
 8000662:	b2c8      	uxtb	r0, r1
 8000664:	2801      	cmp	r0, #1
 8000666:	dd4e      	ble.n	8000706 <__aeabi_fsub+0x256>
 8000668:	29ff      	cmp	r1, #255	; 0xff
 800066a:	d049      	beq.n	8000700 <__aeabi_fsub+0x250>
 800066c:	199b      	adds	r3, r3, r6
 800066e:	085b      	lsrs	r3, r3, #1
 8000670:	000c      	movs	r4, r1
 8000672:	e763      	b.n	800053c <__aeabi_fsub+0x8c>
 8000674:	2aff      	cmp	r2, #255	; 0xff
 8000676:	d041      	beq.n	80006fc <__aeabi_fsub+0x24c>
 8000678:	000a      	movs	r2, r1
 800067a:	e781      	b.n	8000580 <__aeabi_fsub+0xd0>
 800067c:	2601      	movs	r6, #1
 800067e:	1b9b      	subs	r3, r3, r6
 8000680:	e789      	b.n	8000596 <__aeabi_fsub+0xe6>
 8000682:	2c00      	cmp	r4, #0
 8000684:	d01c      	beq.n	80006c0 <__aeabi_fsub+0x210>
 8000686:	28ff      	cmp	r0, #255	; 0xff
 8000688:	d021      	beq.n	80006ce <__aeabi_fsub+0x21e>
 800068a:	2480      	movs	r4, #128	; 0x80
 800068c:	04e4      	lsls	r4, r4, #19
 800068e:	4252      	negs	r2, r2
 8000690:	4323      	orrs	r3, r4
 8000692:	2a1b      	cmp	r2, #27
 8000694:	dd00      	ble.n	8000698 <__aeabi_fsub+0x1e8>
 8000696:	e096      	b.n	80007c6 <__aeabi_fsub+0x316>
 8000698:	001c      	movs	r4, r3
 800069a:	2520      	movs	r5, #32
 800069c:	40d4      	lsrs	r4, r2
 800069e:	1aaa      	subs	r2, r5, r2
 80006a0:	4093      	lsls	r3, r2
 80006a2:	1e5a      	subs	r2, r3, #1
 80006a4:	4193      	sbcs	r3, r2
 80006a6:	4323      	orrs	r3, r4
 80006a8:	1af3      	subs	r3, r6, r3
 80006aa:	0004      	movs	r4, r0
 80006ac:	000d      	movs	r5, r1
 80006ae:	e72d      	b.n	800050c <__aeabi_fsub+0x5c>
 80006b0:	2f00      	cmp	r7, #0
 80006b2:	d000      	beq.n	80006b6 <__aeabi_fsub+0x206>
 80006b4:	e72e      	b.n	8000514 <__aeabi_fsub+0x64>
 80006b6:	2200      	movs	r2, #0
 80006b8:	2400      	movs	r4, #0
 80006ba:	e7a9      	b.n	8000610 <__aeabi_fsub+0x160>
 80006bc:	000c      	movs	r4, r1
 80006be:	e73d      	b.n	800053c <__aeabi_fsub+0x8c>
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d058      	beq.n	8000776 <__aeabi_fsub+0x2c6>
 80006c4:	43d2      	mvns	r2, r2
 80006c6:	2a00      	cmp	r2, #0
 80006c8:	d0ee      	beq.n	80006a8 <__aeabi_fsub+0x1f8>
 80006ca:	28ff      	cmp	r0, #255	; 0xff
 80006cc:	d1e1      	bne.n	8000692 <__aeabi_fsub+0x1e2>
 80006ce:	0033      	movs	r3, r6
 80006d0:	24ff      	movs	r4, #255	; 0xff
 80006d2:	000d      	movs	r5, r1
 80006d4:	e732      	b.n	800053c <__aeabi_fsub+0x8c>
 80006d6:	29ff      	cmp	r1, #255	; 0xff
 80006d8:	d010      	beq.n	80006fc <__aeabi_fsub+0x24c>
 80006da:	0001      	movs	r1, r0
 80006dc:	e778      	b.n	80005d0 <__aeabi_fsub+0x120>
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d06e      	beq.n	80007c0 <__aeabi_fsub+0x310>
 80006e2:	24ff      	movs	r4, #255	; 0xff
 80006e4:	2e00      	cmp	r6, #0
 80006e6:	d100      	bne.n	80006ea <__aeabi_fsub+0x23a>
 80006e8:	e728      	b.n	800053c <__aeabi_fsub+0x8c>
 80006ea:	2280      	movs	r2, #128	; 0x80
 80006ec:	4651      	mov	r1, sl
 80006ee:	03d2      	lsls	r2, r2, #15
 80006f0:	4211      	tst	r1, r2
 80006f2:	d003      	beq.n	80006fc <__aeabi_fsub+0x24c>
 80006f4:	4661      	mov	r1, ip
 80006f6:	4211      	tst	r1, r2
 80006f8:	d100      	bne.n	80006fc <__aeabi_fsub+0x24c>
 80006fa:	0033      	movs	r3, r6
 80006fc:	24ff      	movs	r4, #255	; 0xff
 80006fe:	e71d      	b.n	800053c <__aeabi_fsub+0x8c>
 8000700:	24ff      	movs	r4, #255	; 0xff
 8000702:	2300      	movs	r3, #0
 8000704:	e72c      	b.n	8000560 <__aeabi_fsub+0xb0>
 8000706:	2c00      	cmp	r4, #0
 8000708:	d1e9      	bne.n	80006de <__aeabi_fsub+0x22e>
 800070a:	2b00      	cmp	r3, #0
 800070c:	d063      	beq.n	80007d6 <__aeabi_fsub+0x326>
 800070e:	2e00      	cmp	r6, #0
 8000710:	d100      	bne.n	8000714 <__aeabi_fsub+0x264>
 8000712:	e713      	b.n	800053c <__aeabi_fsub+0x8c>
 8000714:	199b      	adds	r3, r3, r6
 8000716:	015a      	lsls	r2, r3, #5
 8000718:	d400      	bmi.n	800071c <__aeabi_fsub+0x26c>
 800071a:	e73e      	b.n	800059a <__aeabi_fsub+0xea>
 800071c:	4a31      	ldr	r2, [pc, #196]	; (80007e4 <__aeabi_fsub+0x334>)
 800071e:	000c      	movs	r4, r1
 8000720:	4013      	ands	r3, r2
 8000722:	e70b      	b.n	800053c <__aeabi_fsub+0x8c>
 8000724:	2c00      	cmp	r4, #0
 8000726:	d11e      	bne.n	8000766 <__aeabi_fsub+0x2b6>
 8000728:	2b00      	cmp	r3, #0
 800072a:	d12f      	bne.n	800078c <__aeabi_fsub+0x2dc>
 800072c:	2e00      	cmp	r6, #0
 800072e:	d04f      	beq.n	80007d0 <__aeabi_fsub+0x320>
 8000730:	0033      	movs	r3, r6
 8000732:	000d      	movs	r5, r1
 8000734:	e702      	b.n	800053c <__aeabi_fsub+0x8c>
 8000736:	2601      	movs	r6, #1
 8000738:	e755      	b.n	80005e6 <__aeabi_fsub+0x136>
 800073a:	2c00      	cmp	r4, #0
 800073c:	d11f      	bne.n	800077e <__aeabi_fsub+0x2ce>
 800073e:	2b00      	cmp	r3, #0
 8000740:	d043      	beq.n	80007ca <__aeabi_fsub+0x31a>
 8000742:	43c9      	mvns	r1, r1
 8000744:	2900      	cmp	r1, #0
 8000746:	d00b      	beq.n	8000760 <__aeabi_fsub+0x2b0>
 8000748:	28ff      	cmp	r0, #255	; 0xff
 800074a:	d039      	beq.n	80007c0 <__aeabi_fsub+0x310>
 800074c:	291b      	cmp	r1, #27
 800074e:	dc44      	bgt.n	80007da <__aeabi_fsub+0x32a>
 8000750:	001c      	movs	r4, r3
 8000752:	2720      	movs	r7, #32
 8000754:	40cc      	lsrs	r4, r1
 8000756:	1a79      	subs	r1, r7, r1
 8000758:	408b      	lsls	r3, r1
 800075a:	1e59      	subs	r1, r3, #1
 800075c:	418b      	sbcs	r3, r1
 800075e:	4323      	orrs	r3, r4
 8000760:	199b      	adds	r3, r3, r6
 8000762:	0004      	movs	r4, r0
 8000764:	e740      	b.n	80005e8 <__aeabi_fsub+0x138>
 8000766:	2b00      	cmp	r3, #0
 8000768:	d11a      	bne.n	80007a0 <__aeabi_fsub+0x2f0>
 800076a:	2e00      	cmp	r6, #0
 800076c:	d124      	bne.n	80007b8 <__aeabi_fsub+0x308>
 800076e:	2780      	movs	r7, #128	; 0x80
 8000770:	2200      	movs	r2, #0
 8000772:	03ff      	lsls	r7, r7, #15
 8000774:	e71b      	b.n	80005ae <__aeabi_fsub+0xfe>
 8000776:	0033      	movs	r3, r6
 8000778:	0004      	movs	r4, r0
 800077a:	000d      	movs	r5, r1
 800077c:	e6de      	b.n	800053c <__aeabi_fsub+0x8c>
 800077e:	28ff      	cmp	r0, #255	; 0xff
 8000780:	d01e      	beq.n	80007c0 <__aeabi_fsub+0x310>
 8000782:	2480      	movs	r4, #128	; 0x80
 8000784:	04e4      	lsls	r4, r4, #19
 8000786:	4249      	negs	r1, r1
 8000788:	4323      	orrs	r3, r4
 800078a:	e7df      	b.n	800074c <__aeabi_fsub+0x29c>
 800078c:	2e00      	cmp	r6, #0
 800078e:	d100      	bne.n	8000792 <__aeabi_fsub+0x2e2>
 8000790:	e6d4      	b.n	800053c <__aeabi_fsub+0x8c>
 8000792:	1b9f      	subs	r7, r3, r6
 8000794:	017a      	lsls	r2, r7, #5
 8000796:	d400      	bmi.n	800079a <__aeabi_fsub+0x2ea>
 8000798:	e737      	b.n	800060a <__aeabi_fsub+0x15a>
 800079a:	1af3      	subs	r3, r6, r3
 800079c:	000d      	movs	r5, r1
 800079e:	e6cd      	b.n	800053c <__aeabi_fsub+0x8c>
 80007a0:	24ff      	movs	r4, #255	; 0xff
 80007a2:	2e00      	cmp	r6, #0
 80007a4:	d100      	bne.n	80007a8 <__aeabi_fsub+0x2f8>
 80007a6:	e6c9      	b.n	800053c <__aeabi_fsub+0x8c>
 80007a8:	2280      	movs	r2, #128	; 0x80
 80007aa:	4650      	mov	r0, sl
 80007ac:	03d2      	lsls	r2, r2, #15
 80007ae:	4210      	tst	r0, r2
 80007b0:	d0a4      	beq.n	80006fc <__aeabi_fsub+0x24c>
 80007b2:	4660      	mov	r0, ip
 80007b4:	4210      	tst	r0, r2
 80007b6:	d1a1      	bne.n	80006fc <__aeabi_fsub+0x24c>
 80007b8:	0033      	movs	r3, r6
 80007ba:	000d      	movs	r5, r1
 80007bc:	24ff      	movs	r4, #255	; 0xff
 80007be:	e6bd      	b.n	800053c <__aeabi_fsub+0x8c>
 80007c0:	0033      	movs	r3, r6
 80007c2:	24ff      	movs	r4, #255	; 0xff
 80007c4:	e6ba      	b.n	800053c <__aeabi_fsub+0x8c>
 80007c6:	2301      	movs	r3, #1
 80007c8:	e76e      	b.n	80006a8 <__aeabi_fsub+0x1f8>
 80007ca:	0033      	movs	r3, r6
 80007cc:	0004      	movs	r4, r0
 80007ce:	e6b5      	b.n	800053c <__aeabi_fsub+0x8c>
 80007d0:	2700      	movs	r7, #0
 80007d2:	2200      	movs	r2, #0
 80007d4:	e71c      	b.n	8000610 <__aeabi_fsub+0x160>
 80007d6:	0033      	movs	r3, r6
 80007d8:	e6b0      	b.n	800053c <__aeabi_fsub+0x8c>
 80007da:	2301      	movs	r3, #1
 80007dc:	e7c0      	b.n	8000760 <__aeabi_fsub+0x2b0>
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	7dffffff 	.word	0x7dffffff
 80007e4:	fbffffff 	.word	0xfbffffff

080007e8 <__aeabi_ui2f>:
 80007e8:	b510      	push	{r4, lr}
 80007ea:	1e04      	subs	r4, r0, #0
 80007ec:	d027      	beq.n	800083e <__aeabi_ui2f+0x56>
 80007ee:	f000 f841 	bl	8000874 <__clzsi2>
 80007f2:	239e      	movs	r3, #158	; 0x9e
 80007f4:	1a1b      	subs	r3, r3, r0
 80007f6:	2b96      	cmp	r3, #150	; 0x96
 80007f8:	dc0a      	bgt.n	8000810 <__aeabi_ui2f+0x28>
 80007fa:	2296      	movs	r2, #150	; 0x96
 80007fc:	1ad2      	subs	r2, r2, r3
 80007fe:	4094      	lsls	r4, r2
 8000800:	0264      	lsls	r4, r4, #9
 8000802:	0a64      	lsrs	r4, r4, #9
 8000804:	b2db      	uxtb	r3, r3
 8000806:	0264      	lsls	r4, r4, #9
 8000808:	05db      	lsls	r3, r3, #23
 800080a:	0a60      	lsrs	r0, r4, #9
 800080c:	4318      	orrs	r0, r3
 800080e:	bd10      	pop	{r4, pc}
 8000810:	2b99      	cmp	r3, #153	; 0x99
 8000812:	dc17      	bgt.n	8000844 <__aeabi_ui2f+0x5c>
 8000814:	2299      	movs	r2, #153	; 0x99
 8000816:	1ad2      	subs	r2, r2, r3
 8000818:	2a00      	cmp	r2, #0
 800081a:	dd27      	ble.n	800086c <__aeabi_ui2f+0x84>
 800081c:	4094      	lsls	r4, r2
 800081e:	0022      	movs	r2, r4
 8000820:	4c13      	ldr	r4, [pc, #76]	; (8000870 <__aeabi_ui2f+0x88>)
 8000822:	4014      	ands	r4, r2
 8000824:	0751      	lsls	r1, r2, #29
 8000826:	d004      	beq.n	8000832 <__aeabi_ui2f+0x4a>
 8000828:	210f      	movs	r1, #15
 800082a:	400a      	ands	r2, r1
 800082c:	2a04      	cmp	r2, #4
 800082e:	d000      	beq.n	8000832 <__aeabi_ui2f+0x4a>
 8000830:	3404      	adds	r4, #4
 8000832:	0162      	lsls	r2, r4, #5
 8000834:	d412      	bmi.n	800085c <__aeabi_ui2f+0x74>
 8000836:	01a4      	lsls	r4, r4, #6
 8000838:	0a64      	lsrs	r4, r4, #9
 800083a:	b2db      	uxtb	r3, r3
 800083c:	e7e3      	b.n	8000806 <__aeabi_ui2f+0x1e>
 800083e:	2300      	movs	r3, #0
 8000840:	2400      	movs	r4, #0
 8000842:	e7e0      	b.n	8000806 <__aeabi_ui2f+0x1e>
 8000844:	22b9      	movs	r2, #185	; 0xb9
 8000846:	0021      	movs	r1, r4
 8000848:	1ad2      	subs	r2, r2, r3
 800084a:	4091      	lsls	r1, r2
 800084c:	000a      	movs	r2, r1
 800084e:	1e51      	subs	r1, r2, #1
 8000850:	418a      	sbcs	r2, r1
 8000852:	2105      	movs	r1, #5
 8000854:	1a09      	subs	r1, r1, r0
 8000856:	40cc      	lsrs	r4, r1
 8000858:	4314      	orrs	r4, r2
 800085a:	e7db      	b.n	8000814 <__aeabi_ui2f+0x2c>
 800085c:	4b04      	ldr	r3, [pc, #16]	; (8000870 <__aeabi_ui2f+0x88>)
 800085e:	401c      	ands	r4, r3
 8000860:	239f      	movs	r3, #159	; 0x9f
 8000862:	01a4      	lsls	r4, r4, #6
 8000864:	1a1b      	subs	r3, r3, r0
 8000866:	0a64      	lsrs	r4, r4, #9
 8000868:	b2db      	uxtb	r3, r3
 800086a:	e7cc      	b.n	8000806 <__aeabi_ui2f+0x1e>
 800086c:	0022      	movs	r2, r4
 800086e:	e7d7      	b.n	8000820 <__aeabi_ui2f+0x38>
 8000870:	fbffffff 	.word	0xfbffffff

08000874 <__clzsi2>:
 8000874:	211c      	movs	r1, #28
 8000876:	2301      	movs	r3, #1
 8000878:	041b      	lsls	r3, r3, #16
 800087a:	4298      	cmp	r0, r3
 800087c:	d301      	bcc.n	8000882 <__clzsi2+0xe>
 800087e:	0c00      	lsrs	r0, r0, #16
 8000880:	3910      	subs	r1, #16
 8000882:	0a1b      	lsrs	r3, r3, #8
 8000884:	4298      	cmp	r0, r3
 8000886:	d301      	bcc.n	800088c <__clzsi2+0x18>
 8000888:	0a00      	lsrs	r0, r0, #8
 800088a:	3908      	subs	r1, #8
 800088c:	091b      	lsrs	r3, r3, #4
 800088e:	4298      	cmp	r0, r3
 8000890:	d301      	bcc.n	8000896 <__clzsi2+0x22>
 8000892:	0900      	lsrs	r0, r0, #4
 8000894:	3904      	subs	r1, #4
 8000896:	a202      	add	r2, pc, #8	; (adr r2, 80008a0 <__clzsi2+0x2c>)
 8000898:	5c10      	ldrb	r0, [r2, r0]
 800089a:	1840      	adds	r0, r0, r1
 800089c:	4770      	bx	lr
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	02020304 	.word	0x02020304
 80008a4:	01010101 	.word	0x01010101
	...

080008b0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008b6:	1dfb      	adds	r3, r7, #7
 80008b8:	2200      	movs	r2, #0
 80008ba:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008bc:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <HAL_Init+0x3c>)
 80008be:	4a0b      	ldr	r2, [pc, #44]	; (80008ec <HAL_Init+0x3c>)
 80008c0:	6812      	ldr	r2, [r2, #0]
 80008c2:	2180      	movs	r1, #128	; 0x80
 80008c4:	0049      	lsls	r1, r1, #1
 80008c6:	430a      	orrs	r2, r1
 80008c8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008ca:	2000      	movs	r0, #0
 80008cc:	f004 fbb4 	bl	8005038 <HAL_InitTick>
 80008d0:	1e03      	subs	r3, r0, #0
 80008d2:	d003      	beq.n	80008dc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80008d4:	1dfb      	adds	r3, r7, #7
 80008d6:	2201      	movs	r2, #1
 80008d8:	701a      	strb	r2, [r3, #0]
 80008da:	e001      	b.n	80008e0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80008dc:	f004 fa96 	bl	8004e0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008e0:	1dfb      	adds	r3, r7, #7
 80008e2:	781b      	ldrb	r3, [r3, #0]
}
 80008e4:	0018      	movs	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	b002      	add	sp, #8
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40022000 	.word	0x40022000

080008f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008f4:	4b04      	ldr	r3, [pc, #16]	; (8000908 <HAL_IncTick+0x18>)
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	4b04      	ldr	r3, [pc, #16]	; (800090c <HAL_IncTick+0x1c>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	18d2      	adds	r2, r2, r3
 80008fe:	4b02      	ldr	r3, [pc, #8]	; (8000908 <HAL_IncTick+0x18>)
 8000900:	601a      	str	r2, [r3, #0]
}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000d78 	.word	0x20000d78
 800090c:	20000000 	.word	0x20000000

08000910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  return uwTick;
 8000914:	4b02      	ldr	r3, [pc, #8]	; (8000920 <HAL_GetTick+0x10>)
 8000916:	681b      	ldr	r3, [r3, #0]
}
 8000918:	0018      	movs	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	20000d78 	.word	0x20000d78

08000924 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a05      	ldr	r2, [pc, #20]	; (8000948 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000934:	401a      	ands	r2, r3
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	431a      	orrs	r2, r3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	601a      	str	r2, [r3, #0]
}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	b002      	add	sp, #8
 8000944:	bd80      	pop	{r7, pc}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	fe3fffff 	.word	0xfe3fffff

0800094c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	23e0      	movs	r3, #224	; 0xe0
 800095a:	045b      	lsls	r3, r3, #17
 800095c:	4013      	ands	r3, r2
}
 800095e:	0018      	movs	r0, r3
 8000960:	46bd      	mov	sp, r7
 8000962:	b002      	add	sp, #8
 8000964:	bd80      	pop	{r7, pc}

08000966 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY, uint32_t SamplingTime)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b084      	sub	sp, #16
 800096a:	af00      	add	r7, sp, #0
 800096c:	60f8      	str	r0, [r7, #12]
 800096e:	60b9      	str	r1, [r7, #8]
 8000970:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	2104      	movs	r1, #4
 800097a:	400a      	ands	r2, r1
 800097c:	2107      	movs	r1, #7
 800097e:	4091      	lsls	r1, r2
 8000980:	000a      	movs	r2, r1
 8000982:	43d2      	mvns	r2, r2
 8000984:	401a      	ands	r2, r3
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	2104      	movs	r1, #4
 800098a:	400b      	ands	r3, r1
 800098c:	6879      	ldr	r1, [r7, #4]
 800098e:	4099      	lsls	r1, r3
 8000990:	000b      	movs	r3, r1
 8000992:	431a      	orrs	r2, r3
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000998:	46c0      	nop			; (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	b004      	add	sp, #16
 800099e:	bd80      	pop	{r7, pc}

080009a0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	68da      	ldr	r2, [r3, #12]
 80009ac:	23c0      	movs	r3, #192	; 0xc0
 80009ae:	011b      	lsls	r3, r3, #4
 80009b0:	4013      	ands	r3, r2
 80009b2:	d101      	bne.n	80009b8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80009b4:	2301      	movs	r3, #1
 80009b6:	e000      	b.n	80009ba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	0018      	movs	r0, r3
 80009bc:	46bd      	mov	sp, r7
 80009be:	b002      	add	sp, #8
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b084      	sub	sp, #16
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	60f8      	str	r0, [r7, #12]
 80009ca:	60b9      	str	r1, [r7, #8]
 80009cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009d2:	68ba      	ldr	r2, [r7, #8]
 80009d4:	211f      	movs	r1, #31
 80009d6:	400a      	ands	r2, r1
 80009d8:	210f      	movs	r1, #15
 80009da:	4091      	lsls	r1, r2
 80009dc:	000a      	movs	r2, r1
 80009de:	43d2      	mvns	r2, r2
 80009e0:	401a      	ands	r2, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	0e9b      	lsrs	r3, r3, #26
 80009e6:	210f      	movs	r1, #15
 80009e8:	4019      	ands	r1, r3
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	201f      	movs	r0, #31
 80009ee:	4003      	ands	r3, r0
 80009f0:	4099      	lsls	r1, r3
 80009f2:	000b      	movs	r3, r1
 80009f4:	431a      	orrs	r2, r3
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	46bd      	mov	sp, r7
 80009fe:	b004      	add	sp, #16
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b082      	sub	sp, #8
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
 8000a0a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	035b      	lsls	r3, r3, #13
 8000a14:	0b5b      	lsrs	r3, r3, #13
 8000a16:	431a      	orrs	r2, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b002      	add	sp, #8
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a32:	683a      	ldr	r2, [r7, #0]
 8000a34:	0352      	lsls	r2, r2, #13
 8000a36:	0b52      	lsrs	r2, r2, #13
 8000a38:	43d2      	mvns	r2, r2
 8000a3a:	401a      	ands	r2, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a40:	46c0      	nop			; (mov r8, r8)
 8000a42:	46bd      	mov	sp, r7
 8000a44:	b002      	add	sp, #8
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	695b      	ldr	r3, [r3, #20]
 8000a58:	68ba      	ldr	r2, [r7, #8]
 8000a5a:	0212      	lsls	r2, r2, #8
 8000a5c:	43d2      	mvns	r2, r2
 8000a5e:	401a      	ands	r2, r3
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	021b      	lsls	r3, r3, #8
 8000a64:	6879      	ldr	r1, [r7, #4]
 8000a66:	400b      	ands	r3, r1
 8000a68:	4904      	ldr	r1, [pc, #16]	; (8000a7c <LL_ADC_SetChannelSamplingTime+0x34>)
 8000a6a:	400b      	ands	r3, r1
 8000a6c:	431a      	orrs	r2, r3
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	46bd      	mov	sp, r7
 8000a76:	b004      	add	sp, #16
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	07ffff00 	.word	0x07ffff00

08000a80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	4a05      	ldr	r2, [pc, #20]	; (8000aa4 <LL_ADC_EnableInternalRegulator+0x24>)
 8000a8e:	4013      	ands	r3, r2
 8000a90:	2280      	movs	r2, #128	; 0x80
 8000a92:	0552      	lsls	r2, r2, #21
 8000a94:	431a      	orrs	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b002      	add	sp, #8
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	6fffffe8 	.word	0x6fffffe8

08000aa8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	689a      	ldr	r2, [r3, #8]
 8000ab4:	2380      	movs	r3, #128	; 0x80
 8000ab6:	055b      	lsls	r3, r3, #21
 8000ab8:	401a      	ands	r2, r3
 8000aba:	2380      	movs	r3, #128	; 0x80
 8000abc:	055b      	lsls	r3, r3, #21
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d101      	bne.n	8000ac6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e000      	b.n	8000ac8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000ac6:	2300      	movs	r3, #0
}
 8000ac8:	0018      	movs	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	b002      	add	sp, #8
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	689b      	ldr	r3, [r3, #8]
 8000adc:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <LL_ADC_Enable+0x20>)
 8000ade:	4013      	ands	r3, r2
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	431a      	orrs	r2, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000ae8:	46c0      	nop			; (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b002      	add	sp, #8
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	7fffffe8 	.word	0x7fffffe8

08000af4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <LL_ADC_Disable+0x20>)
 8000b02:	4013      	ands	r3, r2
 8000b04:	2202      	movs	r2, #2
 8000b06:	431a      	orrs	r2, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000b0c:	46c0      	nop			; (mov r8, r8)
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	b002      	add	sp, #8
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	7fffffe8 	.word	0x7fffffe8

08000b18 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	2201      	movs	r2, #1
 8000b26:	4013      	ands	r3, r2
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d101      	bne.n	8000b30 <LL_ADC_IsEnabled+0x18>
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	e000      	b.n	8000b32 <LL_ADC_IsEnabled+0x1a>
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	0018      	movs	r0, r3
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b002      	add	sp, #8
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	2202      	movs	r2, #2
 8000b48:	4013      	ands	r3, r2
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d101      	bne.n	8000b52 <LL_ADC_IsDisableOngoing+0x18>
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e000      	b.n	8000b54 <LL_ADC_IsDisableOngoing+0x1a>
 8000b52:	2300      	movs	r3, #0
}
 8000b54:	0018      	movs	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	b002      	add	sp, #8
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <LL_ADC_REG_StartConversion+0x20>)
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	2204      	movs	r2, #4
 8000b6e:	431a      	orrs	r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000b74:	46c0      	nop			; (mov r8, r8)
 8000b76:	46bd      	mov	sp, r7
 8000b78:	b002      	add	sp, #8
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	7fffffe8 	.word	0x7fffffe8

08000b80 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	2204      	movs	r2, #4
 8000b8e:	4013      	ands	r3, r2
 8000b90:	2b04      	cmp	r3, #4
 8000b92:	d101      	bne.n	8000b98 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000b94:	2301      	movs	r3, #1
 8000b96:	e000      	b.n	8000b9a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	b002      	add	sp, #8
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b088      	sub	sp, #32
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bac:	231f      	movs	r3, #31
 8000bae:	18fb      	adds	r3, r7, r3
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d101      	bne.n	8000bca <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e1a6      	b.n	8000f18 <HAL_ADC_Init+0x374>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d10a      	bne.n	8000be8 <HAL_ADC_Init+0x44>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f004 f943 	bl	8004e60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	65da      	str	r2, [r3, #92]	; 0x5c
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2254      	movs	r2, #84	; 0x54
 8000be4:	2100      	movs	r1, #0
 8000be6:	5499      	strb	r1, [r3, r2]
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	0018      	movs	r0, r3
 8000bee:	f7ff ff5b 	bl	8000aa8 <LL_ADC_IsInternalRegulatorEnabled>
 8000bf2:	1e03      	subs	r3, r0, #0
 8000bf4:	d114      	bne.n	8000c20 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f7ff ff40 	bl	8000a80 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000c00:	4bc7      	ldr	r3, [pc, #796]	; (8000f20 <HAL_ADC_Init+0x37c>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	49c7      	ldr	r1, [pc, #796]	; (8000f24 <HAL_ADC_Init+0x380>)
 8000c06:	0018      	movs	r0, r3
 8000c08:	f7ff fa7e 	bl	8000108 <__udivsi3>
 8000c0c:	0003      	movs	r3, r0
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 8000c12:	e002      	b.n	8000c1a <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d1f9      	bne.n	8000c14 <HAL_ADC_Init+0x70>
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0U)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	0018      	movs	r0, r3
 8000c26:	f7ff ff3f 	bl	8000aa8 <LL_ADC_IsInternalRegulatorEnabled>
 8000c2a:	1e03      	subs	r3, r0, #0
 8000c2c:	d10f      	bne.n	8000c4e <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c32:	2210      	movs	r2, #16
 8000c34:	431a      	orrs	r2, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c3e:	2201      	movs	r2, #1
 8000c40:	431a      	orrs	r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	65da      	str	r2, [r3, #92]	; 0x5c
    
    tmp_hal_status = HAL_ERROR;
 8000c46:	231f      	movs	r3, #31
 8000c48:	18fb      	adds	r3, r7, r3
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	701a      	strb	r2, [r3, #0]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	0018      	movs	r0, r3
 8000c54:	f7ff ff94 	bl	8000b80 <LL_ADC_REG_IsConversionOngoing>
 8000c58:	0003      	movs	r3, r0
 8000c5a:	60fb      	str	r3, [r7, #12]
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c60:	2210      	movs	r2, #16
 8000c62:	4013      	ands	r3, r2
 8000c64:	d000      	beq.n	8000c68 <HAL_ADC_Init+0xc4>
 8000c66:	e14a      	b.n	8000efe <HAL_ADC_Init+0x35a>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d000      	beq.n	8000c70 <HAL_ADC_Init+0xcc>
 8000c6e:	e146      	b.n	8000efe <HAL_ADC_Init+0x35a>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c74:	4aac      	ldr	r2, [pc, #688]	; (8000f28 <HAL_ADC_Init+0x384>)
 8000c76:	4013      	ands	r3, r2
 8000c78:	2202      	movs	r2, #2
 8000c7a:	431a      	orrs	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Clock configuration                                                 */
    /*  - ADC resolution                                                      */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	0018      	movs	r0, r3
 8000c86:	f7ff ff47 	bl	8000b18 <LL_ADC_IsEnabled>
 8000c8a:	1e03      	subs	r3, r0, #0
 8000c8c:	d136      	bne.n	8000cfc <HAL_ADC_Init+0x158>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
      
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	6812      	ldr	r2, [r2, #0]
 8000c96:	68d2      	ldr	r2, [r2, #12]
 8000c98:	2118      	movs	r1, #24
 8000c9a:	438a      	bics	r2, r1
 8000c9c:	0011      	movs	r1, r2
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	6892      	ldr	r2, [r2, #8]
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler.                                                */
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	6812      	ldr	r2, [r2, #0]
 8000cae:	6912      	ldr	r2, [r2, #16]
 8000cb0:	0092      	lsls	r2, r2, #2
 8000cb2:	0891      	lsrs	r1, r2, #2
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	6852      	ldr	r2, [r2, #4]
 8000cb8:	0f92      	lsrs	r2, r2, #30
 8000cba:	0792      	lsls	r2, r2, #30
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_CKMODE                            ,
                 hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE );
      
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	685a      	ldr	r2, [r3, #4]
 8000cc4:	23c0      	movs	r3, #192	; 0xc0
 8000cc6:	061b      	lsls	r3, r3, #24
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d017      	beq.n	8000cfc <HAL_ADC_Init+0x158>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000cd0:	2380      	movs	r3, #128	; 0x80
 8000cd2:	05db      	lsls	r3, r3, #23
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d011      	beq.n	8000cfc <HAL_ADC_Init+0x158>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000cdc:	2380      	movs	r3, #128	; 0x80
 8000cde:	061b      	lsls	r3, r3, #24
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d00b      	beq.n	8000cfc <HAL_ADC_Init+0x158>
      {
        MODIFY_REG(ADC1_COMMON->CCR                         ,
 8000ce4:	4a91      	ldr	r2, [pc, #580]	; (8000f2c <HAL_ADC_Init+0x388>)
 8000ce6:	4b91      	ldr	r3, [pc, #580]	; (8000f2c <HAL_ADC_Init+0x388>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4991      	ldr	r1, [pc, #580]	; (8000f30 <HAL_ADC_Init+0x38c>)
 8000cec:	4019      	ands	r1, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6858      	ldr	r0, [r3, #4]
 8000cf2:	23f0      	movs	r3, #240	; 0xf0
 8000cf4:	039b      	lsls	r3, r3, #14
 8000cf6:	4003      	ands	r3, r0
 8000cf8:	430b      	orrs	r3, r1
 8000cfa:	6013      	str	r3, [r2, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	7e1b      	ldrb	r3, [r3, #24]
 8000d00:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	7e5b      	ldrb	r3, [r3, #25]
 8000d06:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d08:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	7e9b      	ldrb	r3, [r3, #26]
 8000d0e:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000d10:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d002      	beq.n	8000d20 <HAL_ADC_Init+0x17c>
 8000d1a:	2380      	movs	r3, #128	; 0x80
 8000d1c:	015b      	lsls	r3, r3, #5
 8000d1e:	e000      	b.n	8000d22 <HAL_ADC_Init+0x17e>
 8000d20:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000d22:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000d28:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	691b      	ldr	r3, [r3, #16]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	da04      	bge.n	8000d3c <HAL_ADC_Init+0x198>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	691b      	ldr	r3, [r3, #16]
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	085b      	lsrs	r3, r3, #1
 8000d3a:	e001      	b.n	8000d40 <HAL_ADC_Init+0x19c>
 8000d3c:	2380      	movs	r3, #128	; 0x80
 8000d3e:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                             |
 8000d40:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	212c      	movs	r1, #44	; 0x2c
 8000d46:	5c5b      	ldrb	r3, [r3, r1]
 8000d48:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8000d4a:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
    
    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2220      	movs	r2, #32
 8000d56:	5c9b      	ldrb	r3, [r3, r2]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d115      	bne.n	8000d88 <HAL_ADC_Init+0x1e4>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	7e9b      	ldrb	r3, [r3, #26]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d105      	bne.n	8000d70 <HAL_ADC_Init+0x1cc>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	2280      	movs	r2, #128	; 0x80
 8000d68:	0252      	lsls	r2, r2, #9
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
 8000d6e:	e00b      	b.n	8000d88 <HAL_ADC_Init+0x1e4>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d74:	2220      	movs	r2, #32
 8000d76:	431a      	orrs	r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d80:	2201      	movs	r2, #1
 8000d82:	431a      	orrs	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d00a      	beq.n	8000da6 <HAL_ADC_Init+0x202>
    {
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d94:	23e0      	movs	r3, #224	; 0xe0
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge );
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
    /*  - oversampling enable                                                 */
    /*  - oversampling ratio                                                  */
    /*  - oversampling shift                                                  */
    /*  - oversampling discontinuous mode (triggered mode)                    */
    /*  - trigger frequency mode                                              */
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                  hadc->Init.Oversampling.RightBitShift |
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8000dae:	431a      	orrs	r2, r3
                  hadc->Init.Oversampling.TriggeredMode |
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                  hadc->Init.Oversampling.RightBitShift |
 8000db4:	431a      	orrs	r2, r3
                  hadc->Init.TriggerFrequencyMode
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                  hadc->Init.Oversampling.TriggeredMode |
 8000dba:	4313      	orrs	r3, r2
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8000dbc:	697a      	ldr	r2, [r7, #20]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	617b      	str	r3, [r7, #20]
                  );
    
    if (hadc->Init.OversamplingMode == ENABLE)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	223c      	movs	r2, #60	; 0x3c
 8000dc6:	5c9b      	ldrb	r3, [r3, r2]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d103      	bne.n	8000dd4 <HAL_ADC_Init+0x230>
    {
      SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	2201      	movs	r2, #1
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	617b      	str	r3, [r7, #20]
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	6812      	ldr	r2, [r2, #0]
 8000ddc:	68d2      	ldr	r2, [r2, #12]
 8000dde:	4955      	ldr	r1, [pc, #340]	; (8000f34 <HAL_ADC_Init+0x390>)
 8000de0:	4011      	ands	r1, r2
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	430a      	orrs	r2, r1
 8000de6:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG     ,
               tmpCFGR1              );
    
    MODIFY_REG(hadc->Instance->CFGR2,
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	6812      	ldr	r2, [r2, #0]
 8000df0:	6912      	ldr	r2, [r2, #16]
 8000df2:	4951      	ldr	r1, [pc, #324]	; (8000f38 <HAL_ADC_Init+0x394>)
 8000df4:	4011      	ands	r1, r2
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS       ,
               tmpCFGR2              );
    
    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6818      	ldr	r0, [r3, #0]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e04:	001a      	movs	r2, r3
 8000e06:	2100      	movs	r1, #0
 8000e08:	f7ff fdad 	bl	8000966 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6818      	ldr	r0, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e14:	4949      	ldr	r1, [pc, #292]	; (8000f3c <HAL_ADC_Init+0x398>)
 8000e16:	001a      	movs	r2, r3
 8000e18:	f7ff fda5 	bl	8000966 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if(hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	691b      	ldr	r3, [r3, #16]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d109      	bne.n	8000e38 <HAL_ADC_Init+0x294>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	6812      	ldr	r2, [r2, #0]
 8000e2c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000e2e:	2110      	movs	r1, #16
 8000e30:	4249      	negs	r1, r1
 8000e32:	430a      	orrs	r2, r1
 8000e34:	629a      	str	r2, [r3, #40]	; 0x28
 8000e36:	e03b      	b.n	8000eb0 <HAL_ADC_Init+0x30c>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if(hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	691a      	ldr	r2, [r3, #16]
 8000e3c:	2380      	movs	r3, #128	; 0x80
 8000e3e:	039b      	lsls	r3, r3, #14
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d135      	bne.n	8000eb0 <HAL_ADC_Init+0x30c>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;
      
      /* Parse all ranks from 1 to 8 */
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8000e44:	2300      	movs	r3, #0
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	e00c      	b.n	8000e64 <HAL_ADC_Init+0x2c0>
      {
        /* Check each sequencer rank until value of end of sequence */
        if(((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) == ADC_CHSELR_SQ1)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	40da      	lsrs	r2, r3
 8000e54:	0013      	movs	r3, r2
 8000e56:	220f      	movs	r2, #15
 8000e58:	4013      	ands	r3, r2
 8000e5a:	2b0f      	cmp	r3, #15
 8000e5c:	d006      	beq.n	8000e6c <HAL_ADC_Init+0x2c8>
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	3301      	adds	r3, #1
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	2b07      	cmp	r3, #7
 8000e68:	d9ef      	bls.n	8000e4a <HAL_ADC_Init+0x2a6>
 8000e6a:	e000      	b.n	8000e6e <HAL_ADC_Init+0x2ca>
        {
          break;
 8000e6c:	46c0      	nop			; (mov r8, r8)
        }
      }
      
      if(ADCGroupRegularSequencerRanksCount == 1UL)
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d109      	bne.n	8000e88 <HAL_ADC_Init+0x2e4>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	6812      	ldr	r2, [r2, #0]
 8000e7c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000e7e:	2110      	movs	r1, #16
 8000e80:	4249      	negs	r1, r1
 8000e82:	430a      	orrs	r2, r1
 8000e84:	629a      	str	r2, [r3, #40]	; 0x28
 8000e86:	e013      	b.n	8000eb0 <HAL_ADC_Init+0x30c>
        /*          therefore afer the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	69d2      	ldr	r2, [r2, #28]
 8000e96:	492a      	ldr	r1, [pc, #168]	; (8000f40 <HAL_ADC_Init+0x39c>)
 8000e98:	468c      	mov	ip, r1
 8000e9a:	4462      	add	r2, ip
 8000e9c:	0092      	lsls	r2, r2, #2
 8000e9e:	211c      	movs	r1, #28
 8000ea0:	400a      	ands	r2, r1
 8000ea2:	2110      	movs	r1, #16
 8000ea4:	4249      	negs	r1, r1
 8000ea6:	4091      	lsls	r1, r2
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8000eac:	430a      	orrs	r2, r1
 8000eae:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	4a23      	ldr	r2, [pc, #140]	; (8000f44 <HAL_ADC_Init+0x3a0>)
 8000eb8:	401a      	ands	r2, r3
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d10b      	bne.n	8000ed8 <HAL_ADC_Init+0x334>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	65da      	str	r2, [r3, #92]	; 0x5c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eca:	2203      	movs	r2, #3
 8000ecc:	4393      	bics	r3, r2
 8000ece:	2201      	movs	r2, #1
 8000ed0:	431a      	orrs	r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8000ed6:	e01c      	b.n	8000f12 <HAL_ADC_Init+0x36e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000edc:	2212      	movs	r2, #18
 8000ede:	4393      	bics	r3, r2
 8000ee0:	2210      	movs	r2, #16
 8000ee2:	431a      	orrs	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eec:	2201      	movs	r2, #1
 8000eee:	431a      	orrs	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	65da      	str	r2, [r3, #92]	; 0x5c
      
      tmp_hal_status = HAL_ERROR;
 8000ef4:	231f      	movs	r3, #31
 8000ef6:	18fb      	adds	r3, r7, r3
 8000ef8:	2201      	movs	r2, #1
 8000efa:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8000efc:	e009      	b.n	8000f12 <HAL_ADC_Init+0x36e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f02:	2210      	movs	r2, #16
 8000f04:	431a      	orrs	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8000f0a:	231f      	movs	r3, #31
 8000f0c:	18fb      	adds	r3, r7, r3
 8000f0e:	2201      	movs	r2, #1
 8000f10:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f12:	231f      	movs	r3, #31
 8000f14:	18fb      	adds	r3, r7, r3
 8000f16:	781b      	ldrb	r3, [r3, #0]
}
 8000f18:	0018      	movs	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b008      	add	sp, #32
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000008 	.word	0x20000008
 8000f24:	00030d40 	.word	0x00030d40
 8000f28:	fffffefd 	.word	0xfffffefd
 8000f2c:	40012708 	.word	0x40012708
 8000f30:	ffc3ffff 	.word	0xffc3ffff
 8000f34:	fffe0219 	.word	0xfffe0219
 8000f38:	dffffc02 	.word	0xdffffc02
 8000f3c:	07ffff04 	.word	0x07ffff04
 8000f40:	3fffffff 	.word	0x3fffffff
 8000f44:	833fffe7 	.word	0x833fffe7

08000f48 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b087      	sub	sp, #28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f7ff fe11 	bl	8000b80 <LL_ADC_REG_IsConversionOngoing>
 8000f5e:	1e03      	subs	r3, r0, #0
 8000f60:	d16d      	bne.n	800103e <HAL_ADC_Start_DMA+0xf6>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	2254      	movs	r2, #84	; 0x54
 8000f66:	5c9b      	ldrb	r3, [r3, r2]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d101      	bne.n	8000f70 <HAL_ADC_Start_DMA+0x28>
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	e06d      	b.n	800104c <HAL_ADC_Start_DMA+0x104>
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	2254      	movs	r2, #84	; 0x54
 8000f74:	2101      	movs	r1, #1
 8000f76:	5499      	strb	r1, [r3, r2]
    
    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	4013      	ands	r3, r2
 8000f82:	d113      	bne.n	8000fac <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f7ff fdc5 	bl	8000b18 <LL_ADC_IsEnabled>
 8000f8e:	1e03      	subs	r3, r0, #0
 8000f90:	d004      	beq.n	8000f9c <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	0018      	movs	r0, r3
 8000f98:	f7ff fdac 	bl	8000af4 <LL_ADC_Disable>
      }
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	68fa      	ldr	r2, [r7, #12]
 8000fa2:	6812      	ldr	r2, [r2, #0]
 8000fa4:	68d2      	ldr	r2, [r2, #12]
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	60da      	str	r2, [r3, #12]
    }
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000fac:	2317      	movs	r3, #23
 8000fae:	18fc      	adds	r4, r7, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f000 fa3a 	bl	800142c <ADC_Enable>
 8000fb8:	0003      	movs	r3, r0
 8000fba:	7023      	strb	r3, [r4, #0]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000fbc:	2317      	movs	r3, #23
 8000fbe:	18fb      	adds	r3, r7, r3
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d13f      	bne.n	8001046 <HAL_ADC_Start_DMA+0xfe>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fca:	4a22      	ldr	r2, [pc, #136]	; (8001054 <HAL_ADC_Start_DMA+0x10c>)
 8000fcc:	4013      	ands	r3, r2
 8000fce:	2280      	movs	r2, #128	; 0x80
 8000fd0:	0052      	lsls	r2, r2, #1
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	65da      	str	r2, [r3, #92]	; 0x5c
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fe2:	4a1d      	ldr	r2, [pc, #116]	; (8001058 <HAL_ADC_Start_DMA+0x110>)
 8000fe4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fea:	4a1c      	ldr	r2, [pc, #112]	; (800105c <HAL_ADC_Start_DMA+0x114>)
 8000fec:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ff2:	4a1b      	ldr	r2, [pc, #108]	; (8001060 <HAL_ADC_Start_DMA+0x118>)
 8000ff4:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	221c      	movs	r2, #28
 8000ffc:	601a      	str	r2, [r3, #0]
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2254      	movs	r2, #84	; 0x54
 8001002:	2100      	movs	r1, #0
 8001004:	5499      	strb	r1, [r3, r2]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	6812      	ldr	r2, [r2, #0]
 800100e:	6852      	ldr	r2, [r2, #4]
 8001010:	2110      	movs	r1, #16
 8001012:	430a      	orrs	r2, r1
 8001014:	605a      	str	r2, [r3, #4]
      
      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	3340      	adds	r3, #64	; 0x40
 8001020:	0019      	movs	r1, r3
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	2317      	movs	r3, #23
 8001026:	18fc      	adds	r4, r7, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f000 fd27 	bl	8001a7c <HAL_DMA_Start_IT>
 800102e:	0003      	movs	r3, r0
 8001030:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	0018      	movs	r0, r3
 8001038:	f7ff fd90 	bl	8000b5c <LL_ADC_REG_StartConversion>
 800103c:	e003      	b.n	8001046 <HAL_ADC_Start_DMA+0xfe>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800103e:	2317      	movs	r3, #23
 8001040:	18fb      	adds	r3, r7, r3
 8001042:	2202      	movs	r2, #2
 8001044:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001046:	2317      	movs	r3, #23
 8001048:	18fb      	adds	r3, r7, r3
 800104a:	781b      	ldrb	r3, [r3, #0]
}
 800104c:	0018      	movs	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	b007      	add	sp, #28
 8001052:	bd90      	pop	{r4, r7, pc}
 8001054:	fffff0fe 	.word	0xfffff0fe
 8001058:	08001595 	.word	0x08001595
 800105c:	0800165d 	.word	0x0800165d
 8001060:	0800167b 	.word	0x0800167b

08001064 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800106c:	46c0      	nop			; (mov r8, r8)
 800106e:	46bd      	mov	sp, r7
 8001070:	b002      	add	sp, #8
 8001072:	bd80      	pop	{r7, pc}

08001074 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800107c:	46c0      	nop			; (mov r8, r8)
 800107e:	46bd      	mov	sp, r7
 8001080:	b002      	add	sp, #8
 8001082:	bd80      	pop	{r7, pc}

08001084 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800108e:	2317      	movs	r3, #23
 8001090:	18fb      	adds	r3, r7, r3
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
    
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2254      	movs	r2, #84	; 0x54
 800109e:	5c9b      	ldrb	r3, [r3, r2]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d101      	bne.n	80010a8 <HAL_ADC_ConfigChannel+0x24>
 80010a4:	2302      	movs	r3, #2
 80010a6:	e1bc      	b.n	8001422 <HAL_ADC_ConfigChannel+0x39e>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2254      	movs	r2, #84	; 0x54
 80010ac:	2101      	movs	r1, #1
 80010ae:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	0018      	movs	r0, r3
 80010b6:	f7ff fd63 	bl	8000b80 <LL_ADC_REG_IsConversionOngoing>
 80010ba:	1e03      	subs	r3, r0, #0
 80010bc:	d000      	beq.n	80010c0 <HAL_ADC_ConfigChannel+0x3c>
 80010be:	e19f      	b.n	8001400 <HAL_ADC_ConfigChannel+0x37c>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if(sConfig->Rank != ADC_RANK_NONE)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d100      	bne.n	80010ca <HAL_ADC_ConfigChannel+0x46>
 80010c8:	e13e      	b.n	8001348 <HAL_ADC_ConfigChannel+0x2c4>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	691a      	ldr	r2, [r3, #16]
 80010ce:	2380      	movs	r3, #128	; 0x80
 80010d0:	061b      	lsls	r3, r3, #24
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d004      	beq.n	80010e0 <HAL_ADC_ConfigChannel+0x5c>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80010da:	4abf      	ldr	r2, [pc, #764]	; (80013d8 <HAL_ADC_ConfigChannel+0x354>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d108      	bne.n	80010f2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	0019      	movs	r1, r3
 80010ea:	0010      	movs	r0, r2
 80010ec:	f7ff fc89 	bl	8000a02 <LL_ADC_REG_SetSequencerChAdd>
 80010f0:	e0c9      	b.n	8001286 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */
        
        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	211f      	movs	r1, #31
 80010fc:	400b      	ands	r3, r1
 80010fe:	210f      	movs	r1, #15
 8001100:	4099      	lsls	r1, r3
 8001102:	000b      	movs	r3, r1
 8001104:	43db      	mvns	r3, r3
 8001106:	4013      	ands	r3, r2
 8001108:	0019      	movs	r1, r3
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	035b      	lsls	r3, r3, #13
 8001110:	0b5b      	lsrs	r3, r3, #13
 8001112:	d105      	bne.n	8001120 <HAL_ADC_ConfigChannel+0x9c>
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	0e9b      	lsrs	r3, r3, #26
 800111a:	221f      	movs	r2, #31
 800111c:	4013      	ands	r3, r2
 800111e:	e098      	b.n	8001252 <HAL_ADC_ConfigChannel+0x1ce>
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2201      	movs	r2, #1
 8001126:	4013      	ands	r3, r2
 8001128:	d000      	beq.n	800112c <HAL_ADC_ConfigChannel+0xa8>
 800112a:	e091      	b.n	8001250 <HAL_ADC_ConfigChannel+0x1cc>
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2202      	movs	r2, #2
 8001132:	4013      	ands	r3, r2
 8001134:	d000      	beq.n	8001138 <HAL_ADC_ConfigChannel+0xb4>
 8001136:	e089      	b.n	800124c <HAL_ADC_ConfigChannel+0x1c8>
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2204      	movs	r2, #4
 800113e:	4013      	ands	r3, r2
 8001140:	d000      	beq.n	8001144 <HAL_ADC_ConfigChannel+0xc0>
 8001142:	e081      	b.n	8001248 <HAL_ADC_ConfigChannel+0x1c4>
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2208      	movs	r2, #8
 800114a:	4013      	ands	r3, r2
 800114c:	d000      	beq.n	8001150 <HAL_ADC_ConfigChannel+0xcc>
 800114e:	e079      	b.n	8001244 <HAL_ADC_ConfigChannel+0x1c0>
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2210      	movs	r2, #16
 8001156:	4013      	ands	r3, r2
 8001158:	d000      	beq.n	800115c <HAL_ADC_ConfigChannel+0xd8>
 800115a:	e071      	b.n	8001240 <HAL_ADC_ConfigChannel+0x1bc>
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2220      	movs	r2, #32
 8001162:	4013      	ands	r3, r2
 8001164:	d000      	beq.n	8001168 <HAL_ADC_ConfigChannel+0xe4>
 8001166:	e069      	b.n	800123c <HAL_ADC_ConfigChannel+0x1b8>
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2240      	movs	r2, #64	; 0x40
 800116e:	4013      	ands	r3, r2
 8001170:	d000      	beq.n	8001174 <HAL_ADC_ConfigChannel+0xf0>
 8001172:	e061      	b.n	8001238 <HAL_ADC_ConfigChannel+0x1b4>
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2280      	movs	r2, #128	; 0x80
 800117a:	4013      	ands	r3, r2
 800117c:	d000      	beq.n	8001180 <HAL_ADC_ConfigChannel+0xfc>
 800117e:	e059      	b.n	8001234 <HAL_ADC_ConfigChannel+0x1b0>
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	2380      	movs	r3, #128	; 0x80
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	4013      	ands	r3, r2
 800118a:	d151      	bne.n	8001230 <HAL_ADC_ConfigChannel+0x1ac>
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	2380      	movs	r3, #128	; 0x80
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	4013      	ands	r3, r2
 8001196:	d149      	bne.n	800122c <HAL_ADC_ConfigChannel+0x1a8>
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	2380      	movs	r3, #128	; 0x80
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	4013      	ands	r3, r2
 80011a2:	d141      	bne.n	8001228 <HAL_ADC_ConfigChannel+0x1a4>
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	2380      	movs	r3, #128	; 0x80
 80011aa:	011b      	lsls	r3, r3, #4
 80011ac:	4013      	ands	r3, r2
 80011ae:	d139      	bne.n	8001224 <HAL_ADC_ConfigChannel+0x1a0>
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	015b      	lsls	r3, r3, #5
 80011b8:	4013      	ands	r3, r2
 80011ba:	d131      	bne.n	8001220 <HAL_ADC_ConfigChannel+0x19c>
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	2380      	movs	r3, #128	; 0x80
 80011c2:	019b      	lsls	r3, r3, #6
 80011c4:	4013      	ands	r3, r2
 80011c6:	d129      	bne.n	800121c <HAL_ADC_ConfigChannel+0x198>
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	01db      	lsls	r3, r3, #7
 80011d0:	4013      	ands	r3, r2
 80011d2:	d121      	bne.n	8001218 <HAL_ADC_ConfigChannel+0x194>
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	2380      	movs	r3, #128	; 0x80
 80011da:	021b      	lsls	r3, r3, #8
 80011dc:	4013      	ands	r3, r2
 80011de:	d119      	bne.n	8001214 <HAL_ADC_ConfigChannel+0x190>
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	2380      	movs	r3, #128	; 0x80
 80011e6:	025b      	lsls	r3, r3, #9
 80011e8:	4013      	ands	r3, r2
 80011ea:	d111      	bne.n	8001210 <HAL_ADC_ConfigChannel+0x18c>
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	2380      	movs	r3, #128	; 0x80
 80011f2:	029b      	lsls	r3, r3, #10
 80011f4:	4013      	ands	r3, r2
 80011f6:	d109      	bne.n	800120c <HAL_ADC_ConfigChannel+0x188>
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	2380      	movs	r3, #128	; 0x80
 80011fe:	02db      	lsls	r3, r3, #11
 8001200:	4013      	ands	r3, r2
 8001202:	d001      	beq.n	8001208 <HAL_ADC_ConfigChannel+0x184>
 8001204:	2312      	movs	r3, #18
 8001206:	e024      	b.n	8001252 <HAL_ADC_ConfigChannel+0x1ce>
 8001208:	2300      	movs	r3, #0
 800120a:	e022      	b.n	8001252 <HAL_ADC_ConfigChannel+0x1ce>
 800120c:	2311      	movs	r3, #17
 800120e:	e020      	b.n	8001252 <HAL_ADC_ConfigChannel+0x1ce>
 8001210:	2310      	movs	r3, #16
 8001212:	e01e      	b.n	8001252 <HAL_ADC_ConfigChannel+0x1ce>
 8001214:	230f      	movs	r3, #15
 8001216:	e01c      	b.n	8001252 <HAL_ADC_ConfigChannel+0x1ce>
 8001218:	230e      	movs	r3, #14
 800121a:	e01a      	b.n	8001252 <HAL_ADC_ConfigChannel+0x1ce>
 800121c:	230d      	movs	r3, #13
 800121e:	e018      	b.n	8001252 <HAL_ADC_ConfigChannel+0x1ce>
 8001220:	230c      	movs	r3, #12
 8001222:	e016      	b.n	8001252 <HAL_ADC_ConfigChannel+0x1ce>
 8001224:	230b      	movs	r3, #11
 8001226:	e014      	b.n	8001252 <HAL_ADC_ConfigChannel+0x1ce>
 8001228:	230a      	movs	r3, #10
 800122a:	e012      	b.n	8001252 <HAL_ADC_ConfigChannel+0x1ce>
 800122c:	2309      	movs	r3, #9
 800122e:	e010      	b.n	8001252 <HAL_ADC_ConfigChannel+0x1ce>
 8001230:	2308      	movs	r3, #8
 8001232:	e00e      	b.n	8001252 <HAL_ADC_ConfigChannel+0x1ce>
 8001234:	2307      	movs	r3, #7
 8001236:	e00c      	b.n	8001252 <HAL_ADC_ConfigChannel+0x1ce>
 8001238:	2306      	movs	r3, #6
 800123a:	e00a      	b.n	8001252 <HAL_ADC_ConfigChannel+0x1ce>
 800123c:	2305      	movs	r3, #5
 800123e:	e008      	b.n	8001252 <HAL_ADC_ConfigChannel+0x1ce>
 8001240:	2304      	movs	r3, #4
 8001242:	e006      	b.n	8001252 <HAL_ADC_ConfigChannel+0x1ce>
 8001244:	2303      	movs	r3, #3
 8001246:	e004      	b.n	8001252 <HAL_ADC_ConfigChannel+0x1ce>
 8001248:	2302      	movs	r3, #2
 800124a:	e002      	b.n	8001252 <HAL_ADC_ConfigChannel+0x1ce>
 800124c:	2301      	movs	r3, #1
 800124e:	e000      	b.n	8001252 <HAL_ADC_ConfigChannel+0x1ce>
 8001250:	2300      	movs	r3, #0
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	6852      	ldr	r2, [r2, #4]
 8001256:	201f      	movs	r0, #31
 8001258:	4002      	ands	r2, r0
 800125a:	4093      	lsls	r3, r2
 800125c:	000a      	movs	r2, r1
 800125e:	431a      	orrs	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	661a      	str	r2, [r3, #96]	; 0x60
        
        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */        
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	089b      	lsrs	r3, r3, #2
 800126a:	1c5a      	adds	r2, r3, #1
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	69db      	ldr	r3, [r3, #28]
 8001270:	429a      	cmp	r2, r3
 8001272:	d808      	bhi.n	8001286 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6818      	ldr	r0, [r3, #0]
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	6859      	ldr	r1, [r3, #4]
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	001a      	movs	r2, r3
 8001282:	f7ff fb9e 	bl	80009c2 <LL_ADC_REG_SetSequencerRanks>
        }
      }
      
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6818      	ldr	r0, [r3, #0]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	6819      	ldr	r1, [r3, #0]
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	001a      	movs	r2, r3
 8001294:	f7ff fbd8 	bl	8000a48 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	db00      	blt.n	80012a2 <HAL_ADC_ConfigChannel+0x21e>
 80012a0:	e0b8      	b.n	8001414 <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80012a2:	4b4e      	ldr	r3, [pc, #312]	; (80013dc <HAL_ADC_ConfigChannel+0x358>)
 80012a4:	0018      	movs	r0, r3
 80012a6:	f7ff fb51 	bl	800094c <LL_ADC_GetCommonPathInternalCh>
 80012aa:	0003      	movs	r3, r0
 80012ac:	613b      	str	r3, [r7, #16]
        
        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a4b      	ldr	r2, [pc, #300]	; (80013e0 <HAL_ADC_ConfigChannel+0x35c>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d11d      	bne.n	80012f4 <HAL_ADC_ConfigChannel+0x270>
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	2380      	movs	r3, #128	; 0x80
 80012bc:	041b      	lsls	r3, r3, #16
 80012be:	4013      	ands	r3, r2
 80012c0:	d118      	bne.n	80012f4 <HAL_ADC_ConfigChannel+0x270>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	2280      	movs	r2, #128	; 0x80
 80012c6:	0412      	lsls	r2, r2, #16
 80012c8:	4313      	orrs	r3, r2
 80012ca:	4a44      	ldr	r2, [pc, #272]	; (80013dc <HAL_ADC_ConfigChannel+0x358>)
 80012cc:	0019      	movs	r1, r3
 80012ce:	0010      	movs	r0, r2
 80012d0:	f7ff fb28 	bl	8000924 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80012d4:	4b43      	ldr	r3, [pc, #268]	; (80013e4 <HAL_ADC_ConfigChannel+0x360>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4943      	ldr	r1, [pc, #268]	; (80013e8 <HAL_ADC_ConfigChannel+0x364>)
 80012da:	0018      	movs	r0, r3
 80012dc:	f7fe ff14 	bl	8000108 <__udivsi3>
 80012e0:	0003      	movs	r3, r0
 80012e2:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 80012e4:	e002      	b.n	80012ec <HAL_ADC_ConfigChannel+0x268>
          {
            wait_loop_index--;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	3b01      	subs	r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1f9      	bne.n	80012e6 <HAL_ADC_ConfigChannel+0x262>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80012f2:	e08f      	b.n	8001414 <HAL_ADC_ConfigChannel+0x390>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a3c      	ldr	r2, [pc, #240]	; (80013ec <HAL_ADC_ConfigChannel+0x368>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d10e      	bne.n	800131c <HAL_ADC_ConfigChannel+0x298>
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	2380      	movs	r3, #128	; 0x80
 8001302:	045b      	lsls	r3, r3, #17
 8001304:	4013      	ands	r3, r2
 8001306:	d109      	bne.n	800131c <HAL_ADC_ConfigChannel+0x298>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	2280      	movs	r2, #128	; 0x80
 800130c:	0452      	lsls	r2, r2, #17
 800130e:	4313      	orrs	r3, r2
 8001310:	4a32      	ldr	r2, [pc, #200]	; (80013dc <HAL_ADC_ConfigChannel+0x358>)
 8001312:	0019      	movs	r1, r3
 8001314:	0010      	movs	r0, r2
 8001316:	f7ff fb05 	bl	8000924 <LL_ADC_SetCommonPathInternalCh>
 800131a:	e07b      	b.n	8001414 <HAL_ADC_ConfigChannel+0x390>
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a33      	ldr	r2, [pc, #204]	; (80013f0 <HAL_ADC_ConfigChannel+0x36c>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d000      	beq.n	8001328 <HAL_ADC_ConfigChannel+0x2a4>
 8001326:	e075      	b.n	8001414 <HAL_ADC_ConfigChannel+0x390>
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	2380      	movs	r3, #128	; 0x80
 800132c:	03db      	lsls	r3, r3, #15
 800132e:	4013      	ands	r3, r2
 8001330:	d000      	beq.n	8001334 <HAL_ADC_ConfigChannel+0x2b0>
 8001332:	e06f      	b.n	8001414 <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	2280      	movs	r2, #128	; 0x80
 8001338:	03d2      	lsls	r2, r2, #15
 800133a:	4313      	orrs	r3, r2
 800133c:	4a27      	ldr	r2, [pc, #156]	; (80013dc <HAL_ADC_ConfigChannel+0x358>)
 800133e:	0019      	movs	r1, r3
 8001340:	0010      	movs	r0, r2
 8001342:	f7ff faef 	bl	8000924 <LL_ADC_SetCommonPathInternalCh>
 8001346:	e065      	b.n	8001414 <HAL_ADC_ConfigChannel+0x390>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	691a      	ldr	r2, [r3, #16]
 800134c:	2380      	movs	r3, #128	; 0x80
 800134e:	061b      	lsls	r3, r3, #24
 8001350:	429a      	cmp	r2, r3
 8001352:	d004      	beq.n	800135e <HAL_ADC_ConfigChannel+0x2da>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8001358:	4a1f      	ldr	r2, [pc, #124]	; (80013d8 <HAL_ADC_ConfigChannel+0x354>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d107      	bne.n	800136e <HAL_ADC_ConfigChannel+0x2ea>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	0019      	movs	r1, r3
 8001368:	0010      	movs	r0, r2
 800136a:	f7ff fb5b 	bl	8000a24 <LL_ADC_REG_SetSequencerChRem>
      }
      
      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b00      	cmp	r3, #0
 8001374:	da4e      	bge.n	8001414 <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001376:	4b19      	ldr	r3, [pc, #100]	; (80013dc <HAL_ADC_ConfigChannel+0x358>)
 8001378:	0018      	movs	r0, r3
 800137a:	f7ff fae7 	bl	800094c <LL_ADC_GetCommonPathInternalCh>
 800137e:	0003      	movs	r3, r0
 8001380:	613b      	str	r3, [r7, #16]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a16      	ldr	r2, [pc, #88]	; (80013e0 <HAL_ADC_ConfigChannel+0x35c>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d108      	bne.n	800139e <HAL_ADC_ConfigChannel+0x31a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4a19      	ldr	r2, [pc, #100]	; (80013f4 <HAL_ADC_ConfigChannel+0x370>)
 8001390:	4013      	ands	r3, r2
 8001392:	4a12      	ldr	r2, [pc, #72]	; (80013dc <HAL_ADC_ConfigChannel+0x358>)
 8001394:	0019      	movs	r1, r3
 8001396:	0010      	movs	r0, r2
 8001398:	f7ff fac4 	bl	8000924 <LL_ADC_SetCommonPathInternalCh>
 800139c:	e03a      	b.n	8001414 <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a12      	ldr	r2, [pc, #72]	; (80013ec <HAL_ADC_ConfigChannel+0x368>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d108      	bne.n	80013ba <HAL_ADC_ConfigChannel+0x336>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	4a13      	ldr	r2, [pc, #76]	; (80013f8 <HAL_ADC_ConfigChannel+0x374>)
 80013ac:	4013      	ands	r3, r2
 80013ae:	4a0b      	ldr	r2, [pc, #44]	; (80013dc <HAL_ADC_ConfigChannel+0x358>)
 80013b0:	0019      	movs	r1, r3
 80013b2:	0010      	movs	r0, r2
 80013b4:	f7ff fab6 	bl	8000924 <LL_ADC_SetCommonPathInternalCh>
 80013b8:	e02c      	b.n	8001414 <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a0c      	ldr	r2, [pc, #48]	; (80013f0 <HAL_ADC_ConfigChannel+0x36c>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d127      	bne.n	8001414 <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	4a0d      	ldr	r2, [pc, #52]	; (80013fc <HAL_ADC_ConfigChannel+0x378>)
 80013c8:	4013      	ands	r3, r2
 80013ca:	4a04      	ldr	r2, [pc, #16]	; (80013dc <HAL_ADC_ConfigChannel+0x358>)
 80013cc:	0019      	movs	r1, r3
 80013ce:	0010      	movs	r0, r2
 80013d0:	f7ff faa8 	bl	8000924 <LL_ADC_SetCommonPathInternalCh>
 80013d4:	e01e      	b.n	8001414 <HAL_ADC_ConfigChannel+0x390>
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	80000004 	.word	0x80000004
 80013dc:	40012708 	.word	0x40012708
 80013e0:	b0001000 	.word	0xb0001000
 80013e4:	20000008 	.word	0x20000008
 80013e8:	00030d40 	.word	0x00030d40
 80013ec:	b8004000 	.word	0xb8004000
 80013f0:	b4002000 	.word	0xb4002000
 80013f4:	ff7fffff 	.word	0xff7fffff
 80013f8:	feffffff 	.word	0xfeffffff
 80013fc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001404:	2220      	movs	r2, #32
 8001406:	431a      	orrs	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 800140c:	2317      	movs	r3, #23
 800140e:	18fb      	adds	r3, r7, r3
 8001410:	2201      	movs	r2, #1
 8001412:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2254      	movs	r2, #84	; 0x54
 8001418:	2100      	movs	r1, #0
 800141a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800141c:	2317      	movs	r3, #23
 800141e:	18fb      	adds	r3, r7, r3
 8001420:	781b      	ldrb	r3, [r3, #0]
}
 8001422:	0018      	movs	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	b006      	add	sp, #24
 8001428:	bd80      	pop	{r7, pc}
 800142a:	46c0      	nop			; (mov r8, r8)

0800142c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	0018      	movs	r0, r3
 800143a:	f7ff fb6d 	bl	8000b18 <LL_ADC_IsEnabled>
 800143e:	1e03      	subs	r3, r0, #0
 8001440:	d149      	bne.n	80014d6 <ADC_Enable+0xaa>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	4a25      	ldr	r2, [pc, #148]	; (80014e0 <ADC_Enable+0xb4>)
 800144a:	4013      	ands	r3, r2
 800144c:	d00d      	beq.n	800146a <ADC_Enable+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001452:	2210      	movs	r2, #16
 8001454:	431a      	orrs	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800145e:	2201      	movs	r2, #1
 8001460:	431a      	orrs	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	65da      	str	r2, [r3, #92]	; 0x5c
      
      return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e036      	b.n	80014d8 <ADC_Enable+0xac>
    }
    
    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	0018      	movs	r0, r3
 8001470:	f7ff fb2e 	bl	8000ad0 <LL_ADC_Enable>
    
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	7e5b      	ldrb	r3, [r3, #25]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d02c      	beq.n	80014d6 <ADC_Enable+0xaa>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800147c:	f7ff fa48 	bl	8000910 <HAL_GetTick>
 8001480:	0003      	movs	r3, r0
 8001482:	60fb      	str	r3, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001484:	e020      	b.n	80014c8 <ADC_Enable+0x9c>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	0018      	movs	r0, r3
 800148c:	f7ff fb44 	bl	8000b18 <LL_ADC_IsEnabled>
 8001490:	1e03      	subs	r3, r0, #0
 8001492:	d104      	bne.n	800149e <ADC_Enable+0x72>
        {
          LL_ADC_Enable(hadc->Instance);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	0018      	movs	r0, r3
 800149a:	f7ff fb19 	bl	8000ad0 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800149e:	f7ff fa37 	bl	8000910 <HAL_GetTick>
 80014a2:	0002      	movs	r2, r0
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d90d      	bls.n	80014c8 <ADC_Enable+0x9c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b0:	2210      	movs	r2, #16
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	659a      	str	r2, [r3, #88]	; 0x58
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014bc:	2201      	movs	r2, #1
 80014be:	431a      	orrs	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	65da      	str	r2, [r3, #92]	; 0x5c
          
          return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e007      	b.n	80014d8 <ADC_Enable+0xac>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2201      	movs	r2, #1
 80014d0:	4013      	ands	r3, r2
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d1d7      	bne.n	8001486 <ADC_Enable+0x5a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	0018      	movs	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	b004      	add	sp, #16
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	80000017 	.word	0x80000017

080014e4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	0018      	movs	r0, r3
 80014f2:	f7ff fb22 	bl	8000b3a <LL_ADC_IsDisableOngoing>
 80014f6:	0003      	movs	r3, r0
 80014f8:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (   (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	0018      	movs	r0, r3
 8001500:	f7ff fb0a 	bl	8000b18 <LL_ADC_IsEnabled>
 8001504:	1e03      	subs	r3, r0, #0
 8001506:	d040      	beq.n	800158a <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d13d      	bne.n	800158a <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	2205      	movs	r2, #5
 8001516:	4013      	ands	r3, r2
 8001518:	2b01      	cmp	r3, #1
 800151a:	d10d      	bne.n	8001538 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	0018      	movs	r0, r3
 8001522:	f7ff fae7 	bl	8000af4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2203      	movs	r2, #3
 800152c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
    
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800152e:	f7ff f9ef 	bl	8000910 <HAL_GetTick>
 8001532:	0003      	movs	r3, r0
 8001534:	60bb      	str	r3, [r7, #8]
    
    while((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001536:	e022      	b.n	800157e <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153c:	2210      	movs	r2, #16
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001548:	2201      	movs	r2, #1
 800154a:	431a      	orrs	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e01b      	b.n	800158c <ADC_Disable+0xa8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001554:	f7ff f9dc 	bl	8000910 <HAL_GetTick>
 8001558:	0002      	movs	r2, r0
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d90d      	bls.n	800157e <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001566:	2210      	movs	r2, #16
 8001568:	431a      	orrs	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001572:	2201      	movs	r2, #1
 8001574:	431a      	orrs	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	65da      	str	r2, [r3, #92]	; 0x5c
        
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e006      	b.n	800158c <ADC_Disable+0xa8>
    while((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	2201      	movs	r2, #1
 8001586:	4013      	ands	r3, r2
 8001588:	d1e4      	bne.n	8001554 <ADC_Disable+0x70>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	0018      	movs	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	b004      	add	sp, #16
 8001592:	bd80      	pop	{r7, pc}

08001594 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a6:	2250      	movs	r2, #80	; 0x50
 80015a8:	4013      	ands	r3, r2
 80015aa:	d141      	bne.n	8001630 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b0:	2280      	movs	r2, #128	; 0x80
 80015b2:	0092      	lsls	r2, r2, #2
 80015b4:	431a      	orrs	r2, r3
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if(   (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	0018      	movs	r0, r3
 80015c0:	f7ff f9ee 	bl	80009a0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80015c4:	1e03      	subs	r3, r0, #0
 80015c6:	d02e      	beq.n	8001626 <ADC_DMAConvCplt+0x92>
       && (hadc->Init.ContinuousConvMode == DISABLE)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	7e9b      	ldrb	r3, [r3, #26]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d12a      	bne.n	8001626 <ADC_DMAConvCplt+0x92>
      )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2208      	movs	r2, #8
 80015d8:	4013      	ands	r3, r2
 80015da:	2b08      	cmp	r3, #8
 80015dc:	d123      	bne.n	8001626 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	0018      	movs	r0, r3
 80015e4:	f7ff facc 	bl	8000b80 <LL_ADC_REG_IsConversionOngoing>
 80015e8:	1e03      	subs	r3, r0, #0
 80015ea:	d110      	bne.n	800160e <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	6812      	ldr	r2, [r2, #0]
 80015f4:	6852      	ldr	r2, [r2, #4]
 80015f6:	210c      	movs	r1, #12
 80015f8:	438a      	bics	r2, r1
 80015fa:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001600:	4a15      	ldr	r2, [pc, #84]	; (8001658 <ADC_DMAConvCplt+0xc4>)
 8001602:	4013      	ands	r3, r2
 8001604:	2201      	movs	r2, #1
 8001606:	431a      	orrs	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	659a      	str	r2, [r3, #88]	; 0x58
 800160c:	e00b      	b.n	8001626 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001612:	2220      	movs	r2, #32
 8001614:	431a      	orrs	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	659a      	str	r2, [r3, #88]	; 0x58
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800161e:	2201      	movs	r2, #1
 8001620:	431a      	orrs	r2, r3
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	65da      	str	r2, [r3, #92]	; 0x5c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	0018      	movs	r0, r3
 800162a:	f003 fbb3 	bl	8004d94 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800162e:	e00f      	b.n	8001650 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001634:	2210      	movs	r2, #16
 8001636:	4013      	ands	r3, r2
 8001638:	d004      	beq.n	8001644 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	0018      	movs	r0, r3
 800163e:	f7ff fd19 	bl	8001074 <HAL_ADC_ErrorCallback>
}
 8001642:	e005      	b.n	8001650 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	0010      	movs	r0, r2
 800164e:	4798      	blx	r3
}
 8001650:	46c0      	nop			; (mov r8, r8)
 8001652:	46bd      	mov	sp, r7
 8001654:	b004      	add	sp, #16
 8001656:	bd80      	pop	{r7, pc}
 8001658:	fffffefe 	.word	0xfffffefe

0800165c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001668:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	0018      	movs	r0, r3
 800166e:	f7ff fcf9 	bl	8001064 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	46bd      	mov	sp, r7
 8001676:	b004      	add	sp, #16
 8001678:	bd80      	pop	{r7, pc}

0800167a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b084      	sub	sp, #16
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001686:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168c:	2240      	movs	r2, #64	; 0x40
 800168e:	431a      	orrs	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001698:	2204      	movs	r2, #4
 800169a:	431a      	orrs	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	0018      	movs	r0, r3
 80016a4:	f7ff fce6 	bl	8001074 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80016a8:	46c0      	nop			; (mov r8, r8)
 80016aa:	46bd      	mov	sp, r7
 80016ac:	b004      	add	sp, #16
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <LL_ADC_IsEnabled>:
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	2201      	movs	r2, #1
 80016be:	4013      	ands	r3, r2
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d101      	bne.n	80016c8 <LL_ADC_IsEnabled+0x18>
 80016c4:	2301      	movs	r3, #1
 80016c6:	e000      	b.n	80016ca <LL_ADC_IsEnabled+0x1a>
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	0018      	movs	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	b002      	add	sp, #8
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <LL_ADC_IsCalibrationOnGoing>:
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	0fdb      	lsrs	r3, r3, #31
 80016e0:	07da      	lsls	r2, r3, #31
 80016e2:	2380      	movs	r3, #128	; 0x80
 80016e4:	061b      	lsls	r3, r3, #24
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d101      	bne.n	80016ee <LL_ADC_IsCalibrationOnGoing+0x1c>
 80016ea:	2301      	movs	r3, #1
 80016ec:	e000      	b.n	80016f0 <LL_ADC_IsCalibrationOnGoing+0x1e>
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	0018      	movs	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	b002      	add	sp, #8
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80016f8:	b590      	push	{r4, r7, lr}
 80016fa:	b087      	sub	sp, #28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001700:	2300      	movs	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2254      	movs	r2, #84	; 0x54
 8001708:	5c9b      	ldrb	r3, [r3, r2]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d101      	bne.n	8001712 <HAL_ADCEx_Calibration_Start+0x1a>
 800170e:	2302      	movs	r3, #2
 8001710:	e06c      	b.n	80017ec <HAL_ADCEx_Calibration_Start+0xf4>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2254      	movs	r2, #84	; 0x54
 8001716:	2101      	movs	r1, #1
 8001718:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800171a:	2317      	movs	r3, #23
 800171c:	18fc      	adds	r4, r7, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	0018      	movs	r0, r3
 8001722:	f7ff fedf 	bl	80014e4 <ADC_Disable>
 8001726:	0003      	movs	r3, r0
 8001728:	7023      	strb	r3, [r4, #0]
  
  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	0018      	movs	r0, r3
 8001730:	f7ff ffbe 	bl	80016b0 <LL_ADC_IsEnabled>
 8001734:	1e03      	subs	r3, r0, #0
 8001736:	d14c      	bne.n	80017d2 <HAL_ADCEx_Calibration_Start+0xda>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173c:	4a2d      	ldr	r2, [pc, #180]	; (80017f4 <HAL_ADCEx_Calibration_Start+0xfc>)
 800173e:	4013      	ands	r3, r2
 8001740:	2202      	movs	r2, #2
 8001742:	431a      	orrs	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	2203      	movs	r2, #3
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	6812      	ldr	r2, [r2, #0]
 800175c:	68d2      	ldr	r2, [r2, #12]
 800175e:	2103      	movs	r1, #3
 8001760:	438a      	bics	r2, r1
 8001762:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	6812      	ldr	r2, [r2, #0]
 800176c:	6892      	ldr	r2, [r2, #8]
 800176e:	2180      	movs	r1, #128	; 0x80
 8001770:	0609      	lsls	r1, r1, #24
 8001772:	430a      	orrs	r2, r1
 8001774:	609a      	str	r2, [r3, #8]
    
    /* Wait for calibration completion */
    while(LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001776:	e014      	b.n	80017a2 <HAL_ADCEx_Calibration_Start+0xaa>
    {
      wait_loop_index++;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	3301      	adds	r3, #1
 800177c:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	4a1d      	ldr	r2, [pc, #116]	; (80017f8 <HAL_ADCEx_Calibration_Start+0x100>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d90d      	bls.n	80017a2 <HAL_ADCEx_Calibration_Start+0xaa>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178a:	2212      	movs	r2, #18
 800178c:	4393      	bics	r3, r2
 800178e:	2210      	movs	r2, #16
 8001790:	431a      	orrs	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2254      	movs	r2, #84	; 0x54
 800179a:	2100      	movs	r1, #0
 800179c:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e024      	b.n	80017ec <HAL_ADCEx_Calibration_Start+0xf4>
    while(LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	0018      	movs	r0, r3
 80017a8:	f7ff ff93 	bl	80016d2 <LL_ADC_IsCalibrationOnGoing>
 80017ac:	1e03      	subs	r3, r0, #0
 80017ae:	d1e3      	bne.n	8001778 <HAL_ADCEx_Calibration_Start+0x80>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	6812      	ldr	r2, [r2, #0]
 80017b8:	68d1      	ldr	r1, [r2, #12]
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	430a      	orrs	r2, r1
 80017be:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c4:	2203      	movs	r2, #3
 80017c6:	4393      	bics	r3, r2
 80017c8:	2201      	movs	r2, #1
 80017ca:	431a      	orrs	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	659a      	str	r2, [r3, #88]	; 0x58
 80017d0:	e005      	b.n	80017de <HAL_ADCEx_Calibration_Start+0xe6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d6:	2210      	movs	r2, #16
 80017d8:	431a      	orrs	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2254      	movs	r2, #84	; 0x54
 80017e2:	2100      	movs	r1, #0
 80017e4:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80017e6:	2317      	movs	r3, #23
 80017e8:	18fb      	adds	r3, r7, r3
 80017ea:	781b      	ldrb	r3, [r3, #0]
}
 80017ec:	0018      	movs	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b007      	add	sp, #28
 80017f2:	bd90      	pop	{r4, r7, pc}
 80017f4:	fffffefd 	.word	0xfffffefd
 80017f8:	0002f1ff 	.word	0x0002f1ff

080017fc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	0002      	movs	r2, r0
 8001804:	1dfb      	adds	r3, r7, #7
 8001806:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <NVIC_EnableIRQ+0x28>)
 800180a:	1dfa      	adds	r2, r7, #7
 800180c:	7812      	ldrb	r2, [r2, #0]
 800180e:	0011      	movs	r1, r2
 8001810:	221f      	movs	r2, #31
 8001812:	400a      	ands	r2, r1
 8001814:	2101      	movs	r1, #1
 8001816:	4091      	lsls	r1, r2
 8001818:	000a      	movs	r2, r1
 800181a:	601a      	str	r2, [r3, #0]
}
 800181c:	46c0      	nop			; (mov r8, r8)
 800181e:	46bd      	mov	sp, r7
 8001820:	b002      	add	sp, #8
 8001822:	bd80      	pop	{r7, pc}
 8001824:	e000e100 	.word	0xe000e100

08001828 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001828:	b5b0      	push	{r4, r5, r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	0002      	movs	r2, r0
 8001830:	6039      	str	r1, [r7, #0]
 8001832:	1dfb      	adds	r3, r7, #7
 8001834:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8001836:	1dfb      	adds	r3, r7, #7
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b7f      	cmp	r3, #127	; 0x7f
 800183c:	d932      	bls.n	80018a4 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800183e:	4c2f      	ldr	r4, [pc, #188]	; (80018fc <NVIC_SetPriority+0xd4>)
 8001840:	1dfb      	adds	r3, r7, #7
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	001a      	movs	r2, r3
 8001846:	230f      	movs	r3, #15
 8001848:	4013      	ands	r3, r2
 800184a:	3b08      	subs	r3, #8
 800184c:	0899      	lsrs	r1, r3, #2
 800184e:	4a2b      	ldr	r2, [pc, #172]	; (80018fc <NVIC_SetPriority+0xd4>)
 8001850:	1dfb      	adds	r3, r7, #7
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	0018      	movs	r0, r3
 8001856:	230f      	movs	r3, #15
 8001858:	4003      	ands	r3, r0
 800185a:	3b08      	subs	r3, #8
 800185c:	089b      	lsrs	r3, r3, #2
 800185e:	3306      	adds	r3, #6
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	18d3      	adds	r3, r2, r3
 8001864:	3304      	adds	r3, #4
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	1dfa      	adds	r2, r7, #7
 800186a:	7812      	ldrb	r2, [r2, #0]
 800186c:	0010      	movs	r0, r2
 800186e:	2203      	movs	r2, #3
 8001870:	4002      	ands	r2, r0
 8001872:	00d2      	lsls	r2, r2, #3
 8001874:	20ff      	movs	r0, #255	; 0xff
 8001876:	4090      	lsls	r0, r2
 8001878:	0002      	movs	r2, r0
 800187a:	43d2      	mvns	r2, r2
 800187c:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	019b      	lsls	r3, r3, #6
 8001882:	20ff      	movs	r0, #255	; 0xff
 8001884:	4018      	ands	r0, r3
 8001886:	1dfb      	adds	r3, r7, #7
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	001d      	movs	r5, r3
 800188c:	2303      	movs	r3, #3
 800188e:	402b      	ands	r3, r5
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	4098      	lsls	r0, r3
 8001894:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001896:	431a      	orrs	r2, r3
 8001898:	1d8b      	adds	r3, r1, #6
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	18e3      	adds	r3, r4, r3
 800189e:	3304      	adds	r3, #4
 80018a0:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80018a2:	e027      	b.n	80018f4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018a4:	4c16      	ldr	r4, [pc, #88]	; (8001900 <NVIC_SetPriority+0xd8>)
 80018a6:	1dfb      	adds	r3, r7, #7
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	b25b      	sxtb	r3, r3
 80018ac:	089b      	lsrs	r3, r3, #2
 80018ae:	4914      	ldr	r1, [pc, #80]	; (8001900 <NVIC_SetPriority+0xd8>)
 80018b0:	1dfa      	adds	r2, r7, #7
 80018b2:	7812      	ldrb	r2, [r2, #0]
 80018b4:	b252      	sxtb	r2, r2
 80018b6:	0892      	lsrs	r2, r2, #2
 80018b8:	32c0      	adds	r2, #192	; 0xc0
 80018ba:	0092      	lsls	r2, r2, #2
 80018bc:	5852      	ldr	r2, [r2, r1]
 80018be:	1df9      	adds	r1, r7, #7
 80018c0:	7809      	ldrb	r1, [r1, #0]
 80018c2:	0008      	movs	r0, r1
 80018c4:	2103      	movs	r1, #3
 80018c6:	4001      	ands	r1, r0
 80018c8:	00c9      	lsls	r1, r1, #3
 80018ca:	20ff      	movs	r0, #255	; 0xff
 80018cc:	4088      	lsls	r0, r1
 80018ce:	0001      	movs	r1, r0
 80018d0:	43c9      	mvns	r1, r1
 80018d2:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	0192      	lsls	r2, r2, #6
 80018d8:	20ff      	movs	r0, #255	; 0xff
 80018da:	4010      	ands	r0, r2
 80018dc:	1dfa      	adds	r2, r7, #7
 80018de:	7812      	ldrb	r2, [r2, #0]
 80018e0:	0015      	movs	r5, r2
 80018e2:	2203      	movs	r2, #3
 80018e4:	402a      	ands	r2, r5
 80018e6:	00d2      	lsls	r2, r2, #3
 80018e8:	4090      	lsls	r0, r2
 80018ea:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018ec:	430a      	orrs	r2, r1
 80018ee:	33c0      	adds	r3, #192	; 0xc0
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	511a      	str	r2, [r3, r4]
}
 80018f4:	46c0      	nop			; (mov r8, r8)
 80018f6:	46bd      	mov	sp, r7
 80018f8:	b002      	add	sp, #8
 80018fa:	bdb0      	pop	{r4, r5, r7, pc}
 80018fc:	e000ed00 	.word	0xe000ed00
 8001900:	e000e100 	.word	0xe000e100

08001904 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
 800190e:	230f      	movs	r3, #15
 8001910:	18fb      	adds	r3, r7, r3
 8001912:	1c02      	adds	r2, r0, #0
 8001914:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	230f      	movs	r3, #15
 800191a:	18fb      	adds	r3, r7, r3
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	b25b      	sxtb	r3, r3
 8001920:	0011      	movs	r1, r2
 8001922:	0018      	movs	r0, r3
 8001924:	f7ff ff80 	bl	8001828 <NVIC_SetPriority>
}
 8001928:	46c0      	nop			; (mov r8, r8)
 800192a:	46bd      	mov	sp, r7
 800192c:	b004      	add	sp, #16
 800192e:	bd80      	pop	{r7, pc}

08001930 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	0002      	movs	r2, r0
 8001938:	1dfb      	adds	r3, r7, #7
 800193a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800193c:	1dfb      	adds	r3, r7, #7
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	b25b      	sxtb	r3, r3
 8001942:	0018      	movs	r0, r3
 8001944:	f7ff ff5a 	bl	80017fc <NVIC_EnableIRQ>
}
 8001948:	46c0      	nop			; (mov r8, r8)
 800194a:	46bd      	mov	sp, r7
 800194c:	b002      	add	sp, #8
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e083      	b.n	8001a6a <HAL_DMA_Init+0x11a>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a43      	ldr	r2, [pc, #268]	; (8001a74 <HAL_DMA_Init+0x124>)
 8001968:	4694      	mov	ip, r2
 800196a:	4463      	add	r3, ip
 800196c:	2114      	movs	r1, #20
 800196e:	0018      	movs	r0, r3
 8001970:	f7fe fbca 	bl	8000108 <__udivsi3>
 8001974:	0003      	movs	r3, r0
 8001976:	009a      	lsls	r2, r3, #2
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2225      	movs	r2, #37	; 0x25
 8001980:	2102      	movs	r1, #2
 8001982:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6812      	ldr	r2, [r2, #0]
 800198c:	6812      	ldr	r2, [r2, #0]
 800198e:	493a      	ldr	r1, [pc, #232]	; (8001a78 <HAL_DMA_Init+0x128>)
 8001990:	400a      	ands	r2, r1
 8001992:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	6812      	ldr	r2, [r2, #0]
 800199c:	6811      	ldr	r1, [r2, #0]
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	6890      	ldr	r0, [r2, #8]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68d2      	ldr	r2, [r2, #12]
 80019a6:	4310      	orrs	r0, r2
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	6912      	ldr	r2, [r2, #16]
 80019ac:	4310      	orrs	r0, r2
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6952      	ldr	r2, [r2, #20]
 80019b2:	4310      	orrs	r0, r2
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6992      	ldr	r2, [r2, #24]
 80019b8:	4310      	orrs	r0, r2
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	69d2      	ldr	r2, [r2, #28]
 80019be:	4310      	orrs	r0, r2
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	6a12      	ldr	r2, [r2, #32]
 80019c4:	4302      	orrs	r2, r0
 80019c6:	430a      	orrs	r2, r1
 80019c8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	0018      	movs	r0, r3
 80019ce:	f000 f9d3 	bl	8001d78 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689a      	ldr	r2, [r3, #8]
 80019d6:	2380      	movs	r3, #128	; 0x80
 80019d8:	01db      	lsls	r3, r3, #7
 80019da:	429a      	cmp	r2, r3
 80019dc:	d102      	bne.n	80019e4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6852      	ldr	r2, [r2, #4]
 80019ec:	21ff      	movs	r1, #255	; 0xff
 80019ee:	400a      	ands	r2, r1
 80019f0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80019fa:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d011      	beq.n	8001a28 <HAL_DMA_Init+0xd8>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b04      	cmp	r3, #4
 8001a0a:	d80d      	bhi.n	8001a28 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	0018      	movs	r0, r3
 8001a10:	f000 f9de 	bl	8001dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	e008      	b.n	8001a3a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2225      	movs	r2, #37	; 0x25
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2224      	movs	r2, #36	; 0x24
 8001a64:	2100      	movs	r1, #0
 8001a66:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	b002      	add	sp, #8
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	bffdfff8 	.word	0xbffdfff8
 8001a78:	ffff800f 	.word	0xffff800f

08001a7c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
 8001a88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a8a:	2317      	movs	r3, #23
 8001a8c:	18fb      	adds	r3, r7, r3
 8001a8e:	2200      	movs	r2, #0
 8001a90:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2224      	movs	r2, #36	; 0x24
 8001a96:	5c9b      	ldrb	r3, [r3, r2]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d101      	bne.n	8001aa0 <HAL_DMA_Start_IT+0x24>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	e070      	b.n	8001b82 <HAL_DMA_Start_IT+0x106>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2224      	movs	r2, #36	; 0x24
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2225      	movs	r2, #37	; 0x25
 8001aac:	5c9b      	ldrb	r3, [r3, r2]
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d157      	bne.n	8001b64 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2225      	movs	r2, #37	; 0x25
 8001ab8:	2102      	movs	r1, #2
 8001aba:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	6812      	ldr	r2, [r2, #0]
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	2101      	movs	r1, #1
 8001ace:	438a      	bics	r2, r1
 8001ad0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	68b9      	ldr	r1, [r7, #8]
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f000 f90d 	bl	8001cf8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d008      	beq.n	8001af8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	6812      	ldr	r2, [r2, #0]
 8001aee:	6812      	ldr	r2, [r2, #0]
 8001af0:	210e      	movs	r1, #14
 8001af2:	430a      	orrs	r2, r1
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	e00f      	b.n	8001b18 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	68fa      	ldr	r2, [r7, #12]
 8001afe:	6812      	ldr	r2, [r2, #0]
 8001b00:	6812      	ldr	r2, [r2, #0]
 8001b02:	2104      	movs	r1, #4
 8001b04:	438a      	bics	r2, r1
 8001b06:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	6812      	ldr	r2, [r2, #0]
 8001b10:	6812      	ldr	r2, [r2, #0]
 8001b12:	210a      	movs	r1, #10
 8001b14:	430a      	orrs	r2, r1
 8001b16:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	2380      	movs	r3, #128	; 0x80
 8001b20:	025b      	lsls	r3, r3, #9
 8001b22:	4013      	ands	r3, r2
 8001b24:	d008      	beq.n	8001b38 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001b2e:	6812      	ldr	r2, [r2, #0]
 8001b30:	2180      	movs	r1, #128	; 0x80
 8001b32:	0049      	lsls	r1, r1, #1
 8001b34:	430a      	orrs	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d008      	beq.n	8001b52 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b48:	6812      	ldr	r2, [r2, #0]
 8001b4a:	2180      	movs	r1, #128	; 0x80
 8001b4c:	0049      	lsls	r1, r1, #1
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	6812      	ldr	r2, [r2, #0]
 8001b5a:	6812      	ldr	r2, [r2, #0]
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	e007      	b.n	8001b74 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2224      	movs	r2, #36	; 0x24
 8001b68:	2100      	movs	r1, #0
 8001b6a:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b6c:	2317      	movs	r3, #23
 8001b6e:	18fb      	adds	r3, r7, r3
 8001b70:	2202      	movs	r2, #2
 8001b72:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2224      	movs	r2, #36	; 0x24
 8001b78:	2100      	movs	r1, #0
 8001b7a:	5499      	strb	r1, [r3, r2]

  return status;
 8001b7c:	2317      	movs	r3, #23
 8001b7e:	18fb      	adds	r3, r7, r3
 8001b80:	781b      	ldrb	r3, [r3, #0]
}
 8001b82:	0018      	movs	r0, r3
 8001b84:	46bd      	mov	sp, r7
 8001b86:	b006      	add	sp, #24
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8001b94:	4b57      	ldr	r3, [pc, #348]	; (8001cf4 <HAL_DMA_IRQHandler+0x168>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	221c      	movs	r2, #28
 8001ba8:	4013      	ands	r3, r2
 8001baa:	2204      	movs	r2, #4
 8001bac:	409a      	lsls	r2, r3
 8001bae:	0013      	movs	r3, r2
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d028      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x7c>
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	2204      	movs	r2, #4
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d024      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x7c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2220      	movs	r2, #32
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d107      	bne.n	8001bda <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6812      	ldr	r2, [r2, #0]
 8001bd2:	6812      	ldr	r2, [r2, #0]
 8001bd4:	2104      	movs	r1, #4
 8001bd6:	438a      	bics	r2, r1
 8001bd8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8001bda:	4a46      	ldr	r2, [pc, #280]	; (8001cf4 <HAL_DMA_IRQHandler+0x168>)
 8001bdc:	4b45      	ldr	r3, [pc, #276]	; (8001cf4 <HAL_DMA_IRQHandler+0x168>)
 8001bde:	6859      	ldr	r1, [r3, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	201c      	movs	r0, #28
 8001be6:	4003      	ands	r3, r0
 8001be8:	2004      	movs	r0, #4
 8001bea:	4098      	lsls	r0, r3
 8001bec:	0003      	movs	r3, r0
 8001bee:	430b      	orrs	r3, r1
 8001bf0:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d100      	bne.n	8001bfc <HAL_DMA_IRQHandler+0x70>
 8001bfa:	e075      	b.n	8001ce8 <HAL_DMA_IRQHandler+0x15c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	0010      	movs	r0, r2
 8001c04:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001c06:	e06f      	b.n	8001ce8 <HAL_DMA_IRQHandler+0x15c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	221c      	movs	r2, #28
 8001c0e:	4013      	ands	r3, r2
 8001c10:	2202      	movs	r2, #2
 8001c12:	409a      	lsls	r2, r3
 8001c14:	0013      	movs	r3, r2
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d02f      	beq.n	8001c7c <HAL_DMA_IRQHandler+0xf0>
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	2202      	movs	r2, #2
 8001c20:	4013      	ands	r3, r2
 8001c22:	d02b      	beq.n	8001c7c <HAL_DMA_IRQHandler+0xf0>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2220      	movs	r2, #32
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d10b      	bne.n	8001c48 <HAL_DMA_IRQHandler+0xbc>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6812      	ldr	r2, [r2, #0]
 8001c38:	6812      	ldr	r2, [r2, #0]
 8001c3a:	210a      	movs	r1, #10
 8001c3c:	438a      	bics	r2, r1
 8001c3e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2225      	movs	r2, #37	; 0x25
 8001c44:	2101      	movs	r1, #1
 8001c46:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8001c48:	4a2a      	ldr	r2, [pc, #168]	; (8001cf4 <HAL_DMA_IRQHandler+0x168>)
 8001c4a:	4b2a      	ldr	r3, [pc, #168]	; (8001cf4 <HAL_DMA_IRQHandler+0x168>)
 8001c4c:	6859      	ldr	r1, [r3, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	201c      	movs	r0, #28
 8001c54:	4003      	ands	r3, r0
 8001c56:	2002      	movs	r0, #2
 8001c58:	4098      	lsls	r0, r3
 8001c5a:	0003      	movs	r3, r0
 8001c5c:	430b      	orrs	r3, r1
 8001c5e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2224      	movs	r2, #36	; 0x24
 8001c64:	2100      	movs	r1, #0
 8001c66:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d03b      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x15c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	0010      	movs	r0, r2
 8001c78:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001c7a:	e035      	b.n	8001ce8 <HAL_DMA_IRQHandler+0x15c>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c80:	221c      	movs	r2, #28
 8001c82:	4013      	ands	r3, r2
 8001c84:	2208      	movs	r2, #8
 8001c86:	409a      	lsls	r2, r3
 8001c88:	0013      	movs	r3, r2
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d02c      	beq.n	8001cea <HAL_DMA_IRQHandler+0x15e>
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	2208      	movs	r2, #8
 8001c94:	4013      	ands	r3, r2
 8001c96:	d028      	beq.n	8001cea <HAL_DMA_IRQHandler+0x15e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	6812      	ldr	r2, [r2, #0]
 8001ca2:	210e      	movs	r1, #14
 8001ca4:	438a      	bics	r2, r1
 8001ca6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex& 0x1cU)));
 8001ca8:	4a12      	ldr	r2, [pc, #72]	; (8001cf4 <HAL_DMA_IRQHandler+0x168>)
 8001caa:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <HAL_DMA_IRQHandler+0x168>)
 8001cac:	6859      	ldr	r1, [r3, #4]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	201c      	movs	r0, #28
 8001cb4:	4003      	ands	r3, r0
 8001cb6:	2001      	movs	r0, #1
 8001cb8:	4098      	lsls	r0, r3
 8001cba:	0003      	movs	r3, r0
 8001cbc:	430b      	orrs	r3, r1
 8001cbe:	6053      	str	r3, [r2, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2225      	movs	r2, #37	; 0x25
 8001cca:	2101      	movs	r1, #1
 8001ccc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2224      	movs	r2, #36	; 0x24
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d005      	beq.n	8001cea <HAL_DMA_IRQHandler+0x15e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	0010      	movs	r0, r2
 8001ce6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001ce8:	46c0      	nop			; (mov r8, r8)
 8001cea:	46c0      	nop			; (mov r8, r8)
}
 8001cec:	46bd      	mov	sp, r7
 8001cee:	b004      	add	sp, #16
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	40020000 	.word	0x40020000

08001cf8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
 8001d04:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001d0e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d004      	beq.n	8001d22 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001d20:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8001d22:	4a14      	ldr	r2, [pc, #80]	; (8001d74 <DMA_SetConfig+0x7c>)
 8001d24:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <DMA_SetConfig+0x7c>)
 8001d26:	6859      	ldr	r1, [r3, #4]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2c:	201c      	movs	r0, #28
 8001d2e:	4003      	ands	r3, r0
 8001d30:	2001      	movs	r0, #1
 8001d32:	4098      	lsls	r0, r3
 8001d34:	0003      	movs	r3, r0
 8001d36:	430b      	orrs	r3, r1
 8001d38:	6053      	str	r3, [r2, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	2b10      	cmp	r3, #16
 8001d48:	d108      	bne.n	8001d5c <DMA_SetConfig+0x64>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d5a:	e007      	b.n	8001d6c <DMA_SetConfig+0x74>
    hdma->Instance->CPAR = SrcAddress;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68ba      	ldr	r2, [r7, #8]
 8001d62:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	60da      	str	r2, [r3, #12]
}
 8001d6c:	46c0      	nop			; (mov r8, r8)
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b004      	add	sp, #16
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40020000 	.word	0x40020000

08001d78 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	001a      	movs	r2, r3
 8001d86:	23ff      	movs	r3, #255	; 0xff
 8001d88:	4013      	ands	r3, r2
 8001d8a:	3b08      	subs	r3, #8
 8001d8c:	2114      	movs	r1, #20
 8001d8e:	0018      	movs	r0, r3
 8001d90:	f7fe f9ba 	bl	8000108 <__udivsi3>
 8001d94:	0003      	movs	r3, r0
 8001d96:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	089b      	lsrs	r3, r3, #2
 8001d9e:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001da0:	4694      	mov	ip, r2
 8001da2:	4463      	add	r3, ip
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	001a      	movs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a07      	ldr	r2, [pc, #28]	; (8001dcc <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001db0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	221c      	movs	r2, #28
 8001db6:	4013      	ands	r3, r2
 8001db8:	2201      	movs	r2, #1
 8001dba:	409a      	lsls	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001dc0:	46c0      	nop			; (mov r8, r8)
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	b004      	add	sp, #16
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	10008200 	.word	0x10008200
 8001dcc:	40020880 	.word	0x40020880

08001dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	22ff      	movs	r2, #255	; 0xff
 8001dde:	4013      	ands	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001de6:	4694      	mov	ip, r2
 8001de8:	4463      	add	r3, ip
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	001a      	movs	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a07      	ldr	r2, [pc, #28]	; (8001e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001df6:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	2203      	movs	r2, #3
 8001dfe:	4013      	ands	r3, r2
 8001e00:	2201      	movs	r2, #1
 8001e02:	409a      	lsls	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001e08:	46c0      	nop			; (mov r8, r8)
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	b004      	add	sp, #16
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	1000823f 	.word	0x1000823f
 8001e14:	40020940 	.word	0x40020940

08001e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e26:	e147      	b.n	80020b8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	4091      	lsls	r1, r2
 8001e32:	000a      	movs	r2, r1
 8001e34:	4013      	ands	r3, r2
 8001e36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d100      	bne.n	8001e40 <HAL_GPIO_Init+0x28>
 8001e3e:	e138      	b.n	80020b2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d003      	beq.n	8001e50 <HAL_GPIO_Init+0x38>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b12      	cmp	r3, #18
 8001e4e:	d123      	bne.n	8001e98 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	08da      	lsrs	r2, r3, #3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3208      	adds	r2, #8
 8001e58:	0092      	lsls	r2, r2, #2
 8001e5a:	58d3      	ldr	r3, [r2, r3]
 8001e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2207      	movs	r2, #7
 8001e62:	4013      	ands	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	220f      	movs	r2, #15
 8001e68:	409a      	lsls	r2, r3
 8001e6a:	0013      	movs	r3, r2
 8001e6c:	43da      	mvns	r2, r3
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4013      	ands	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	2107      	movs	r1, #7
 8001e7c:	400b      	ands	r3, r1
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	409a      	lsls	r2, r3
 8001e82:	0013      	movs	r3, r2
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	08da      	lsrs	r2, r3, #3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3208      	adds	r2, #8
 8001e92:	0092      	lsls	r2, r2, #2
 8001e94:	6939      	ldr	r1, [r7, #16]
 8001e96:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	409a      	lsls	r2, r3
 8001ea6:	0013      	movs	r3, r2
 8001ea8:	43da      	mvns	r2, r3
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	4013      	ands	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	401a      	ands	r2, r3
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	409a      	lsls	r2, r3
 8001ebe:	0013      	movs	r3, r2
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d00b      	beq.n	8001eec <HAL_GPIO_Init+0xd4>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d007      	beq.n	8001eec <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ee0:	2b11      	cmp	r3, #17
 8001ee2:	d003      	beq.n	8001eec <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b12      	cmp	r3, #18
 8001eea:	d130      	bne.n	8001f4e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	409a      	lsls	r2, r3
 8001efa:	0013      	movs	r3, r2
 8001efc:	43da      	mvns	r2, r3
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4013      	ands	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	68da      	ldr	r2, [r3, #12]
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	409a      	lsls	r2, r3
 8001f0e:	0013      	movs	r3, r2
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f22:	2201      	movs	r2, #1
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	409a      	lsls	r2, r3
 8001f28:	0013      	movs	r3, r2
 8001f2a:	43da      	mvns	r2, r3
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	091b      	lsrs	r3, r3, #4
 8001f38:	2201      	movs	r2, #1
 8001f3a:	401a      	ands	r2, r3
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	409a      	lsls	r2, r3
 8001f40:	0013      	movs	r3, r2
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	2203      	movs	r2, #3
 8001f5a:	409a      	lsls	r2, r3
 8001f5c:	0013      	movs	r3, r2
 8001f5e:	43da      	mvns	r2, r3
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4013      	ands	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	409a      	lsls	r2, r3
 8001f70:	0013      	movs	r3, r2
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	2380      	movs	r3, #128	; 0x80
 8001f84:	055b      	lsls	r3, r3, #21
 8001f86:	4013      	ands	r3, r2
 8001f88:	d100      	bne.n	8001f8c <HAL_GPIO_Init+0x174>
 8001f8a:	e092      	b.n	80020b2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001f8c:	4a50      	ldr	r2, [pc, #320]	; (80020d0 <HAL_GPIO_Init+0x2b8>)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	089b      	lsrs	r3, r3, #2
 8001f92:	3318      	adds	r3, #24
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	589b      	ldr	r3, [r3, r2]
 8001f98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	220f      	movs	r2, #15
 8001fa4:	409a      	lsls	r2, r3
 8001fa6:	0013      	movs	r3, r2
 8001fa8:	43da      	mvns	r2, r3
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	4013      	ands	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	23a0      	movs	r3, #160	; 0xa0
 8001fb4:	05db      	lsls	r3, r3, #23
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d013      	beq.n	8001fe2 <HAL_GPIO_Init+0x1ca>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a45      	ldr	r2, [pc, #276]	; (80020d4 <HAL_GPIO_Init+0x2bc>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d00d      	beq.n	8001fde <HAL_GPIO_Init+0x1c6>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a44      	ldr	r2, [pc, #272]	; (80020d8 <HAL_GPIO_Init+0x2c0>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d007      	beq.n	8001fda <HAL_GPIO_Init+0x1c2>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a43      	ldr	r2, [pc, #268]	; (80020dc <HAL_GPIO_Init+0x2c4>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d101      	bne.n	8001fd6 <HAL_GPIO_Init+0x1be>
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e006      	b.n	8001fe4 <HAL_GPIO_Init+0x1cc>
 8001fd6:	2305      	movs	r3, #5
 8001fd8:	e004      	b.n	8001fe4 <HAL_GPIO_Init+0x1cc>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e002      	b.n	8001fe4 <HAL_GPIO_Init+0x1cc>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <HAL_GPIO_Init+0x1cc>
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	2103      	movs	r1, #3
 8001fe8:	400a      	ands	r2, r1
 8001fea:	00d2      	lsls	r2, r2, #3
 8001fec:	4093      	lsls	r3, r2
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001ff4:	4936      	ldr	r1, [pc, #216]	; (80020d0 <HAL_GPIO_Init+0x2b8>)
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	089b      	lsrs	r3, r3, #2
 8001ffa:	3318      	adds	r3, #24
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002002:	4a33      	ldr	r2, [pc, #204]	; (80020d0 <HAL_GPIO_Init+0x2b8>)
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	58d3      	ldr	r3, [r2, r3]
 8002008:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	43da      	mvns	r2, r3
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	4013      	ands	r3, r2
 8002012:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	2380      	movs	r3, #128	; 0x80
 800201a:	025b      	lsls	r3, r3, #9
 800201c:	4013      	ands	r3, r2
 800201e:	d003      	beq.n	8002028 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	4313      	orrs	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002028:	4929      	ldr	r1, [pc, #164]	; (80020d0 <HAL_GPIO_Init+0x2b8>)
 800202a:	2280      	movs	r2, #128	; 0x80
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8002030:	4a27      	ldr	r2, [pc, #156]	; (80020d0 <HAL_GPIO_Init+0x2b8>)
 8002032:	2384      	movs	r3, #132	; 0x84
 8002034:	58d3      	ldr	r3, [r2, r3]
 8002036:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	43da      	mvns	r2, r3
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	4013      	ands	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	2380      	movs	r3, #128	; 0x80
 8002048:	029b      	lsls	r3, r3, #10
 800204a:	4013      	ands	r3, r2
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4313      	orrs	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002056:	491e      	ldr	r1, [pc, #120]	; (80020d0 <HAL_GPIO_Init+0x2b8>)
 8002058:	2284      	movs	r2, #132	; 0x84
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800205e:	4b1c      	ldr	r3, [pc, #112]	; (80020d0 <HAL_GPIO_Init+0x2b8>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	43da      	mvns	r2, r3
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4013      	ands	r3, r2
 800206c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	035b      	lsls	r3, r3, #13
 8002076:	4013      	ands	r3, r2
 8002078:	d003      	beq.n	8002082 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4313      	orrs	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002082:	4b13      	ldr	r3, [pc, #76]	; (80020d0 <HAL_GPIO_Init+0x2b8>)
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002088:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <HAL_GPIO_Init+0x2b8>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	43da      	mvns	r2, r3
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4013      	ands	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	2380      	movs	r3, #128	; 0x80
 800209e:	039b      	lsls	r3, r3, #14
 80020a0:	4013      	ands	r3, r2
 80020a2:	d003      	beq.n	80020ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020ac:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <HAL_GPIO_Init+0x2b8>)
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	3301      	adds	r3, #1
 80020b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	40da      	lsrs	r2, r3
 80020c0:	1e13      	subs	r3, r2, #0
 80020c2:	d000      	beq.n	80020c6 <HAL_GPIO_Init+0x2ae>
 80020c4:	e6b0      	b.n	8001e28 <HAL_GPIO_Init+0x10>
  }
}
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	46bd      	mov	sp, r7
 80020ca:	b006      	add	sp, #24
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	40021800 	.word	0x40021800
 80020d4:	50000400 	.word	0x50000400
 80020d8:	50000800 	.word	0x50000800
 80020dc:	50000c00 	.word	0x50000c00

080020e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	0008      	movs	r0, r1
 80020ea:	0011      	movs	r1, r2
 80020ec:	1cbb      	adds	r3, r7, #2
 80020ee:	1c02      	adds	r2, r0, #0
 80020f0:	801a      	strh	r2, [r3, #0]
 80020f2:	1c7b      	adds	r3, r7, #1
 80020f4:	1c0a      	adds	r2, r1, #0
 80020f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020f8:	1c7b      	adds	r3, r7, #1
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d004      	beq.n	800210a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002100:	1cbb      	adds	r3, r7, #2
 8002102:	881a      	ldrh	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002108:	e003      	b.n	8002112 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800210a:	1cbb      	adds	r3, r7, #2
 800210c:	881a      	ldrh	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	46bd      	mov	sp, r7
 8002116:	b002      	add	sp, #8
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e081      	b.n	8002232 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2241      	movs	r2, #65	; 0x41
 8002132:	5c9b      	ldrb	r3, [r3, r2]
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d107      	bne.n	800214a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2240      	movs	r2, #64	; 0x40
 800213e:	2100      	movs	r1, #0
 8002140:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	0018      	movs	r0, r3
 8002146:	f002 ff01 	bl	8004f4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2241      	movs	r2, #65	; 0x41
 800214e:	2124      	movs	r1, #36	; 0x24
 8002150:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6812      	ldr	r2, [r2, #0]
 800215a:	6812      	ldr	r2, [r2, #0]
 800215c:	2101      	movs	r1, #1
 800215e:	438a      	bics	r2, r1
 8002160:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6852      	ldr	r2, [r2, #4]
 800216a:	4934      	ldr	r1, [pc, #208]	; (800223c <HAL_I2C_Init+0x120>)
 800216c:	400a      	ands	r2, r1
 800216e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	6812      	ldr	r2, [r2, #0]
 8002178:	6892      	ldr	r2, [r2, #8]
 800217a:	4931      	ldr	r1, [pc, #196]	; (8002240 <HAL_I2C_Init+0x124>)
 800217c:	400a      	ands	r2, r1
 800217e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d108      	bne.n	800219a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6892      	ldr	r2, [r2, #8]
 8002190:	2180      	movs	r1, #128	; 0x80
 8002192:	0209      	lsls	r1, r1, #8
 8002194:	430a      	orrs	r2, r1
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	e007      	b.n	80021aa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	6892      	ldr	r2, [r2, #8]
 80021a2:	2184      	movs	r1, #132	; 0x84
 80021a4:	0209      	lsls	r1, r1, #8
 80021a6:	430a      	orrs	r2, r1
 80021a8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d104      	bne.n	80021bc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2280      	movs	r2, #128	; 0x80
 80021b8:	0112      	lsls	r2, r2, #4
 80021ba:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	6812      	ldr	r2, [r2, #0]
 80021c4:	6852      	ldr	r2, [r2, #4]
 80021c6:	491f      	ldr	r1, [pc, #124]	; (8002244 <HAL_I2C_Init+0x128>)
 80021c8:	430a      	orrs	r2, r1
 80021ca:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	6812      	ldr	r2, [r2, #0]
 80021d4:	68d2      	ldr	r2, [r2, #12]
 80021d6:	491a      	ldr	r1, [pc, #104]	; (8002240 <HAL_I2C_Init+0x124>)
 80021d8:	400a      	ands	r2, r1
 80021da:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	6911      	ldr	r1, [r2, #16]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6952      	ldr	r2, [r2, #20]
 80021e8:	4311      	orrs	r1, r2
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6992      	ldr	r2, [r2, #24]
 80021ee:	0212      	lsls	r2, r2, #8
 80021f0:	430a      	orrs	r2, r1
 80021f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	69d1      	ldr	r1, [r2, #28]
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	6a12      	ldr	r2, [r2, #32]
 8002200:	430a      	orrs	r2, r1
 8002202:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6812      	ldr	r2, [r2, #0]
 800220c:	6812      	ldr	r2, [r2, #0]
 800220e:	2101      	movs	r1, #1
 8002210:	430a      	orrs	r2, r1
 8002212:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2241      	movs	r2, #65	; 0x41
 800221e:	2120      	movs	r1, #32
 8002220:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2242      	movs	r2, #66	; 0x42
 800222c:	2100      	movs	r1, #0
 800222e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	0018      	movs	r0, r3
 8002234:	46bd      	mov	sp, r7
 8002236:	b002      	add	sp, #8
 8002238:	bd80      	pop	{r7, pc}
 800223a:	46c0      	nop			; (mov r8, r8)
 800223c:	f0ffffff 	.word	0xf0ffffff
 8002240:	ffff7fff 	.word	0xffff7fff
 8002244:	02008000 	.word	0x02008000

08002248 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2241      	movs	r2, #65	; 0x41
 8002256:	5c9b      	ldrb	r3, [r3, r2]
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b20      	cmp	r3, #32
 800225c:	d138      	bne.n	80022d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2240      	movs	r2, #64	; 0x40
 8002262:	5c9b      	ldrb	r3, [r3, r2]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d101      	bne.n	800226c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002268:	2302      	movs	r3, #2
 800226a:	e032      	b.n	80022d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2240      	movs	r2, #64	; 0x40
 8002270:	2101      	movs	r1, #1
 8002272:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2241      	movs	r2, #65	; 0x41
 8002278:	2124      	movs	r1, #36	; 0x24
 800227a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	6812      	ldr	r2, [r2, #0]
 8002286:	2101      	movs	r1, #1
 8002288:	438a      	bics	r2, r1
 800228a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6812      	ldr	r2, [r2, #0]
 8002294:	6812      	ldr	r2, [r2, #0]
 8002296:	4911      	ldr	r1, [pc, #68]	; (80022dc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002298:	400a      	ands	r2, r1
 800229a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	6811      	ldr	r1, [r2, #0]
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	6812      	ldr	r2, [r2, #0]
 80022b6:	2101      	movs	r1, #1
 80022b8:	430a      	orrs	r2, r1
 80022ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2241      	movs	r2, #65	; 0x41
 80022c0:	2120      	movs	r1, #32
 80022c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2240      	movs	r2, #64	; 0x40
 80022c8:	2100      	movs	r1, #0
 80022ca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	e000      	b.n	80022d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022d0:	2302      	movs	r3, #2
  }
}
 80022d2:	0018      	movs	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	b002      	add	sp, #8
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	ffffefff 	.word	0xffffefff

080022e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2241      	movs	r2, #65	; 0x41
 80022ee:	5c9b      	ldrb	r3, [r3, r2]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b20      	cmp	r3, #32
 80022f4:	d139      	bne.n	800236a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2240      	movs	r2, #64	; 0x40
 80022fa:	5c9b      	ldrb	r3, [r3, r2]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d101      	bne.n	8002304 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002300:	2302      	movs	r3, #2
 8002302:	e033      	b.n	800236c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2240      	movs	r2, #64	; 0x40
 8002308:	2101      	movs	r1, #1
 800230a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2241      	movs	r2, #65	; 0x41
 8002310:	2124      	movs	r1, #36	; 0x24
 8002312:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6812      	ldr	r2, [r2, #0]
 800231c:	6812      	ldr	r2, [r2, #0]
 800231e:	2101      	movs	r1, #1
 8002320:	438a      	bics	r2, r1
 8002322:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4a11      	ldr	r2, [pc, #68]	; (8002374 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002330:	4013      	ands	r3, r2
 8002332:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	021b      	lsls	r3, r3, #8
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	4313      	orrs	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6812      	ldr	r2, [r2, #0]
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	2101      	movs	r1, #1
 8002352:	430a      	orrs	r2, r1
 8002354:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2241      	movs	r2, #65	; 0x41
 800235a:	2120      	movs	r1, #32
 800235c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2240      	movs	r2, #64	; 0x40
 8002362:	2100      	movs	r1, #0
 8002364:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002366:	2300      	movs	r3, #0
 8002368:	e000      	b.n	800236c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800236a:	2302      	movs	r3, #2
  }
}
 800236c:	0018      	movs	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	b004      	add	sp, #16
 8002372:	bd80      	pop	{r7, pc}
 8002374:	fffff0ff 	.word	0xfffff0ff

08002378 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002380:	4b18      	ldr	r3, [pc, #96]	; (80023e4 <HAL_PWREx_ControlVoltageScaling+0x6c>)
 8002382:	4a18      	ldr	r2, [pc, #96]	; (80023e4 <HAL_PWREx_ControlVoltageScaling+0x6c>)
 8002384:	6812      	ldr	r2, [r2, #0]
 8002386:	4918      	ldr	r1, [pc, #96]	; (80023e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002388:	4011      	ands	r1, r2
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	430a      	orrs	r2, r1
 800238e:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	429a      	cmp	r2, r3
 8002398:	d11f      	bne.n	80023da <HAL_PWREx_ControlVoltageScaling+0x62>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 800239a:	4b14      	ldr	r3, [pc, #80]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0x74>)
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	0013      	movs	r3, r2
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	189b      	adds	r3, r3, r2
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	4912      	ldr	r1, [pc, #72]	; (80023f0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80023a8:	0018      	movs	r0, r3
 80023aa:	f7fd fead 	bl	8000108 <__udivsi3>
 80023ae:	0003      	movs	r3, r0
 80023b0:	3301      	adds	r3, #1
 80023b2:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023b4:	e008      	b.n	80023c8 <HAL_PWREx_ControlVoltageScaling+0x50>
    {
      if(wait_loop_index != 0U)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d003      	beq.n	80023c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	3b01      	subs	r3, #1
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	e001      	b.n	80023c8 <HAL_PWREx_ControlVoltageScaling+0x50>
      }
      else
      {
        return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e009      	b.n	80023dc <HAL_PWREx_ControlVoltageScaling+0x64>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023c8:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <HAL_PWREx_ControlVoltageScaling+0x6c>)
 80023ca:	695a      	ldr	r2, [r3, #20]
 80023cc:	2380      	movs	r3, #128	; 0x80
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	401a      	ands	r2, r3
 80023d2:	2380      	movs	r3, #128	; 0x80
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d0ed      	beq.n	80023b6 <HAL_PWREx_ControlVoltageScaling+0x3e>
      }
    }
  }

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	0018      	movs	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	b004      	add	sp, #16
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40007000 	.word	0x40007000
 80023e8:	fffff9ff 	.word	0xfffff9ff
 80023ec:	20000008 	.word	0x20000008
 80023f0:	000f4240 	.word	0x000f4240

080023f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b088      	sub	sp, #32
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e2bf      	b.n	8002986 <HAL_RCC_OscConfig+0x592>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2201      	movs	r2, #1
 800240c:	4013      	ands	r3, r2
 800240e:	d100      	bne.n	8002412 <HAL_RCC_OscConfig+0x1e>
 8002410:	e07c      	b.n	800250c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002412:	4bc4      	ldr	r3, [pc, #784]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	2238      	movs	r2, #56	; 0x38
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800241c:	4bc1      	ldr	r3, [pc, #772]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	2203      	movs	r2, #3
 8002422:	4013      	ands	r3, r2
 8002424:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	2b10      	cmp	r3, #16
 800242a:	d102      	bne.n	8002432 <HAL_RCC_OscConfig+0x3e>
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	2b03      	cmp	r3, #3
 8002430:	d002      	beq.n	8002438 <HAL_RCC_OscConfig+0x44>
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	2b08      	cmp	r3, #8
 8002436:	d10b      	bne.n	8002450 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002438:	4bba      	ldr	r3, [pc, #744]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	2380      	movs	r3, #128	; 0x80
 800243e:	029b      	lsls	r3, r3, #10
 8002440:	4013      	ands	r3, r2
 8002442:	d062      	beq.n	800250a <HAL_RCC_OscConfig+0x116>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d15e      	bne.n	800250a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e29a      	b.n	8002986 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	2380      	movs	r3, #128	; 0x80
 8002456:	025b      	lsls	r3, r3, #9
 8002458:	429a      	cmp	r2, r3
 800245a:	d107      	bne.n	800246c <HAL_RCC_OscConfig+0x78>
 800245c:	4bb1      	ldr	r3, [pc, #708]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 800245e:	4ab1      	ldr	r2, [pc, #708]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 8002460:	6812      	ldr	r2, [r2, #0]
 8002462:	2180      	movs	r1, #128	; 0x80
 8002464:	0249      	lsls	r1, r1, #9
 8002466:	430a      	orrs	r2, r1
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	e020      	b.n	80024ae <HAL_RCC_OscConfig+0xba>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	23a0      	movs	r3, #160	; 0xa0
 8002472:	02db      	lsls	r3, r3, #11
 8002474:	429a      	cmp	r2, r3
 8002476:	d10e      	bne.n	8002496 <HAL_RCC_OscConfig+0xa2>
 8002478:	4baa      	ldr	r3, [pc, #680]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 800247a:	4aaa      	ldr	r2, [pc, #680]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 800247c:	6812      	ldr	r2, [r2, #0]
 800247e:	2180      	movs	r1, #128	; 0x80
 8002480:	02c9      	lsls	r1, r1, #11
 8002482:	430a      	orrs	r2, r1
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	4ba7      	ldr	r3, [pc, #668]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 8002488:	4aa6      	ldr	r2, [pc, #664]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 800248a:	6812      	ldr	r2, [r2, #0]
 800248c:	2180      	movs	r1, #128	; 0x80
 800248e:	0249      	lsls	r1, r1, #9
 8002490:	430a      	orrs	r2, r1
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	e00b      	b.n	80024ae <HAL_RCC_OscConfig+0xba>
 8002496:	4ba3      	ldr	r3, [pc, #652]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 8002498:	4aa2      	ldr	r2, [pc, #648]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 800249a:	6812      	ldr	r2, [r2, #0]
 800249c:	49a2      	ldr	r1, [pc, #648]	; (8002728 <HAL_RCC_OscConfig+0x334>)
 800249e:	400a      	ands	r2, r1
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	4ba0      	ldr	r3, [pc, #640]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 80024a4:	4a9f      	ldr	r2, [pc, #636]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	49a0      	ldr	r1, [pc, #640]	; (800272c <HAL_RCC_OscConfig+0x338>)
 80024aa:	400a      	ands	r2, r1
 80024ac:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d014      	beq.n	80024e0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b6:	f7fe fa2b 	bl	8000910 <HAL_GetTick>
 80024ba:	0003      	movs	r3, r0
 80024bc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c0:	f7fe fa26 	bl	8000910 <HAL_GetTick>
 80024c4:	0002      	movs	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b64      	cmp	r3, #100	; 0x64
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e259      	b.n	8002986 <HAL_RCC_OscConfig+0x592>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024d2:	4b94      	ldr	r3, [pc, #592]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	2380      	movs	r3, #128	; 0x80
 80024d8:	029b      	lsls	r3, r3, #10
 80024da:	4013      	ands	r3, r2
 80024dc:	d0f0      	beq.n	80024c0 <HAL_RCC_OscConfig+0xcc>
 80024de:	e015      	b.n	800250c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e0:	f7fe fa16 	bl	8000910 <HAL_GetTick>
 80024e4:	0003      	movs	r3, r0
 80024e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ea:	f7fe fa11 	bl	8000910 <HAL_GetTick>
 80024ee:	0002      	movs	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b64      	cmp	r3, #100	; 0x64
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e244      	b.n	8002986 <HAL_RCC_OscConfig+0x592>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024fc:	4b89      	ldr	r3, [pc, #548]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	2380      	movs	r3, #128	; 0x80
 8002502:	029b      	lsls	r3, r3, #10
 8002504:	4013      	ands	r3, r2
 8002506:	d1f0      	bne.n	80024ea <HAL_RCC_OscConfig+0xf6>
 8002508:	e000      	b.n	800250c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800250a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2202      	movs	r2, #2
 8002512:	4013      	ands	r3, r2
 8002514:	d100      	bne.n	8002518 <HAL_RCC_OscConfig+0x124>
 8002516:	e093      	b.n	8002640 <HAL_RCC_OscConfig+0x24c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002518:	4b82      	ldr	r3, [pc, #520]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	2238      	movs	r2, #56	; 0x38
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002522:	4b80      	ldr	r3, [pc, #512]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	2203      	movs	r2, #3
 8002528:	4013      	ands	r3, r2
 800252a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	2b10      	cmp	r3, #16
 8002530:	d102      	bne.n	8002538 <HAL_RCC_OscConfig+0x144>
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	2b02      	cmp	r3, #2
 8002536:	d002      	beq.n	800253e <HAL_RCC_OscConfig+0x14a>
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d131      	bne.n	80025a2 <HAL_RCC_OscConfig+0x1ae>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800253e:	4b79      	ldr	r3, [pc, #484]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	2380      	movs	r3, #128	; 0x80
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4013      	ands	r3, r2
 8002548:	d005      	beq.n	8002556 <HAL_RCC_OscConfig+0x162>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e217      	b.n	8002986 <HAL_RCC_OscConfig+0x592>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002556:	4a73      	ldr	r2, [pc, #460]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 8002558:	4b72      	ldr	r3, [pc, #456]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	4974      	ldr	r1, [pc, #464]	; (8002730 <HAL_RCC_OscConfig+0x33c>)
 800255e:	4019      	ands	r1, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	021b      	lsls	r3, r3, #8
 8002566:	430b      	orrs	r3, r1
 8002568:	6053      	str	r3, [r2, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d111      	bne.n	8002594 <HAL_RCC_OscConfig+0x1a0>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002570:	4a6c      	ldr	r2, [pc, #432]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 8002572:	4b6c      	ldr	r3, [pc, #432]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	496f      	ldr	r1, [pc, #444]	; (8002734 <HAL_RCC_OscConfig+0x340>)
 8002578:	4019      	ands	r1, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	430b      	orrs	r3, r1
 8002580:	6013      	str	r3, [r2, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002582:	4b68      	ldr	r3, [pc, #416]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	0adb      	lsrs	r3, r3, #11
 8002588:	2207      	movs	r2, #7
 800258a:	4013      	ands	r3, r2
 800258c:	4a6a      	ldr	r2, [pc, #424]	; (8002738 <HAL_RCC_OscConfig+0x344>)
 800258e:	40da      	lsrs	r2, r3
 8002590:	4b6a      	ldr	r3, [pc, #424]	; (800273c <HAL_RCC_OscConfig+0x348>)
 8002592:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002594:	2000      	movs	r0, #0
 8002596:	f002 fd4f 	bl	8005038 <HAL_InitTick>
 800259a:	1e03      	subs	r3, r0, #0
 800259c:	d04f      	beq.n	800263e <HAL_RCC_OscConfig+0x24a>
        {
          return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e1f1      	b.n	8002986 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d02e      	beq.n	8002608 <HAL_RCC_OscConfig+0x214>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80025aa:	4a5e      	ldr	r2, [pc, #376]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 80025ac:	4b5d      	ldr	r3, [pc, #372]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4960      	ldr	r1, [pc, #384]	; (8002734 <HAL_RCC_OscConfig+0x340>)
 80025b2:	4019      	ands	r1, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	430b      	orrs	r3, r1
 80025ba:	6013      	str	r3, [r2, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80025bc:	4b59      	ldr	r3, [pc, #356]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 80025be:	4a59      	ldr	r2, [pc, #356]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 80025c0:	6812      	ldr	r2, [r2, #0]
 80025c2:	2180      	movs	r1, #128	; 0x80
 80025c4:	0049      	lsls	r1, r1, #1
 80025c6:	430a      	orrs	r2, r1
 80025c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ca:	f7fe f9a1 	bl	8000910 <HAL_GetTick>
 80025ce:	0003      	movs	r3, r0
 80025d0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d4:	f7fe f99c 	bl	8000910 <HAL_GetTick>
 80025d8:	0002      	movs	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e1cf      	b.n	8002986 <HAL_RCC_OscConfig+0x592>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025e6:	4b4f      	ldr	r3, [pc, #316]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	2380      	movs	r3, #128	; 0x80
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	4013      	ands	r3, r2
 80025f0:	d0f0      	beq.n	80025d4 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f2:	4a4c      	ldr	r2, [pc, #304]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 80025f4:	4b4b      	ldr	r3, [pc, #300]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	494d      	ldr	r1, [pc, #308]	; (8002730 <HAL_RCC_OscConfig+0x33c>)
 80025fa:	4019      	ands	r1, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	021b      	lsls	r3, r3, #8
 8002602:	430b      	orrs	r3, r1
 8002604:	6053      	str	r3, [r2, #4]
 8002606:	e01b      	b.n	8002640 <HAL_RCC_OscConfig+0x24c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002608:	4b46      	ldr	r3, [pc, #280]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 800260a:	4a46      	ldr	r2, [pc, #280]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 800260c:	6812      	ldr	r2, [r2, #0]
 800260e:	494c      	ldr	r1, [pc, #304]	; (8002740 <HAL_RCC_OscConfig+0x34c>)
 8002610:	400a      	ands	r2, r1
 8002612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002614:	f7fe f97c 	bl	8000910 <HAL_GetTick>
 8002618:	0003      	movs	r3, r0
 800261a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x23c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800261e:	f7fe f977 	bl	8000910 <HAL_GetTick>
 8002622:	0002      	movs	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e1aa      	b.n	8002986 <HAL_RCC_OscConfig+0x592>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002630:	4b3c      	ldr	r3, [pc, #240]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	2380      	movs	r3, #128	; 0x80
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	4013      	ands	r3, r2
 800263a:	d1f0      	bne.n	800261e <HAL_RCC_OscConfig+0x22a>
 800263c:	e000      	b.n	8002640 <HAL_RCC_OscConfig+0x24c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800263e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2208      	movs	r2, #8
 8002646:	4013      	ands	r3, r2
 8002648:	d047      	beq.n	80026da <HAL_RCC_OscConfig+0x2e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800264a:	4b36      	ldr	r3, [pc, #216]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	2238      	movs	r2, #56	; 0x38
 8002650:	4013      	ands	r3, r2
 8002652:	2b18      	cmp	r3, #24
 8002654:	d10a      	bne.n	800266c <HAL_RCC_OscConfig+0x278>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002656:	4b33      	ldr	r3, [pc, #204]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 8002658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800265a:	2202      	movs	r2, #2
 800265c:	4013      	ands	r3, r2
 800265e:	d03c      	beq.n	80026da <HAL_RCC_OscConfig+0x2e6>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d138      	bne.n	80026da <HAL_RCC_OscConfig+0x2e6>
      {
        return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e18c      	b.n	8002986 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d019      	beq.n	80026a8 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002674:	4b2b      	ldr	r3, [pc, #172]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 8002676:	4a2b      	ldr	r2, [pc, #172]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 8002678:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800267a:	2101      	movs	r1, #1
 800267c:	430a      	orrs	r2, r1
 800267e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002680:	f7fe f946 	bl	8000910 <HAL_GetTick>
 8002684:	0003      	movs	r3, r0
 8002686:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x2a8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800268a:	f7fe f941 	bl	8000910 <HAL_GetTick>
 800268e:	0002      	movs	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x2a8>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e174      	b.n	8002986 <HAL_RCC_OscConfig+0x592>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800269c:	4b21      	ldr	r3, [pc, #132]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 800269e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026a0:	2202      	movs	r2, #2
 80026a2:	4013      	ands	r3, r2
 80026a4:	d0f1      	beq.n	800268a <HAL_RCC_OscConfig+0x296>
 80026a6:	e018      	b.n	80026da <HAL_RCC_OscConfig+0x2e6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80026a8:	4b1e      	ldr	r3, [pc, #120]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 80026aa:	4a1e      	ldr	r2, [pc, #120]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 80026ac:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80026ae:	2101      	movs	r1, #1
 80026b0:	438a      	bics	r2, r1
 80026b2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b4:	f7fe f92c 	bl	8000910 <HAL_GetTick>
 80026b8:	0003      	movs	r3, r0
 80026ba:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x2dc>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026be:	f7fe f927 	bl	8000910 <HAL_GetTick>
 80026c2:	0002      	movs	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e15a      	b.n	8002986 <HAL_RCC_OscConfig+0x592>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026d0:	4b14      	ldr	r3, [pc, #80]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 80026d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d4:	2202      	movs	r2, #2
 80026d6:	4013      	ands	r3, r2
 80026d8:	d1f1      	bne.n	80026be <HAL_RCC_OscConfig+0x2ca>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2204      	movs	r2, #4
 80026e0:	4013      	ands	r3, r2
 80026e2:	d100      	bne.n	80026e6 <HAL_RCC_OscConfig+0x2f2>
 80026e4:	e0c4      	b.n	8002870 <HAL_RCC_OscConfig+0x47c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026e6:	231f      	movs	r3, #31
 80026e8:	18fb      	adds	r3, r7, r3
 80026ea:	2200      	movs	r2, #0
 80026ec:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80026ee:	4b0d      	ldr	r3, [pc, #52]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	2238      	movs	r2, #56	; 0x38
 80026f4:	4013      	ands	r3, r2
 80026f6:	2b20      	cmp	r3, #32
 80026f8:	d10c      	bne.n	8002714 <HAL_RCC_OscConfig+0x320>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80026fa:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 80026fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fe:	2202      	movs	r2, #2
 8002700:	4013      	ands	r3, r2
 8002702:	d100      	bne.n	8002706 <HAL_RCC_OscConfig+0x312>
 8002704:	e0b4      	b.n	8002870 <HAL_RCC_OscConfig+0x47c>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d000      	beq.n	8002710 <HAL_RCC_OscConfig+0x31c>
 800270e:	e0af      	b.n	8002870 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e138      	b.n	8002986 <HAL_RCC_OscConfig+0x592>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002714:	4b03      	ldr	r3, [pc, #12]	; (8002724 <HAL_RCC_OscConfig+0x330>)
 8002716:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002718:	2380      	movs	r3, #128	; 0x80
 800271a:	055b      	lsls	r3, r3, #21
 800271c:	4013      	ands	r3, r2
 800271e:	d111      	bne.n	8002744 <HAL_RCC_OscConfig+0x350>
 8002720:	2301      	movs	r3, #1
 8002722:	e010      	b.n	8002746 <HAL_RCC_OscConfig+0x352>
 8002724:	40021000 	.word	0x40021000
 8002728:	fffeffff 	.word	0xfffeffff
 800272c:	fffbffff 	.word	0xfffbffff
 8002730:	ffff80ff 	.word	0xffff80ff
 8002734:	ffffc7ff 	.word	0xffffc7ff
 8002738:	00f42400 	.word	0x00f42400
 800273c:	20000008 	.word	0x20000008
 8002740:	fffffeff 	.word	0xfffffeff
 8002744:	2300      	movs	r3, #0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d011      	beq.n	800276e <HAL_RCC_OscConfig+0x37a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800274a:	4b91      	ldr	r3, [pc, #580]	; (8002990 <HAL_RCC_OscConfig+0x59c>)
 800274c:	4a90      	ldr	r2, [pc, #576]	; (8002990 <HAL_RCC_OscConfig+0x59c>)
 800274e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002750:	2180      	movs	r1, #128	; 0x80
 8002752:	0549      	lsls	r1, r1, #21
 8002754:	430a      	orrs	r2, r1
 8002756:	63da      	str	r2, [r3, #60]	; 0x3c
 8002758:	4b8d      	ldr	r3, [pc, #564]	; (8002990 <HAL_RCC_OscConfig+0x59c>)
 800275a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800275c:	2380      	movs	r3, #128	; 0x80
 800275e:	055b      	lsls	r3, r3, #21
 8002760:	4013      	ands	r3, r2
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002766:	231f      	movs	r3, #31
 8002768:	18fb      	adds	r3, r7, r3
 800276a:	2201      	movs	r2, #1
 800276c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800276e:	4b89      	ldr	r3, [pc, #548]	; (8002994 <HAL_RCC_OscConfig+0x5a0>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	2380      	movs	r3, #128	; 0x80
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	4013      	ands	r3, r2
 8002778:	d11a      	bne.n	80027b0 <HAL_RCC_OscConfig+0x3bc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800277a:	4b86      	ldr	r3, [pc, #536]	; (8002994 <HAL_RCC_OscConfig+0x5a0>)
 800277c:	4a85      	ldr	r2, [pc, #532]	; (8002994 <HAL_RCC_OscConfig+0x5a0>)
 800277e:	6812      	ldr	r2, [r2, #0]
 8002780:	2180      	movs	r1, #128	; 0x80
 8002782:	0049      	lsls	r1, r1, #1
 8002784:	430a      	orrs	r2, r1
 8002786:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002788:	f7fe f8c2 	bl	8000910 <HAL_GetTick>
 800278c:	0003      	movs	r3, r0
 800278e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x3b0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002792:	f7fe f8bd 	bl	8000910 <HAL_GetTick>
 8002796:	0002      	movs	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x3b0>
          {
            return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e0f0      	b.n	8002986 <HAL_RCC_OscConfig+0x592>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027a4:	4b7b      	ldr	r3, [pc, #492]	; (8002994 <HAL_RCC_OscConfig+0x5a0>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	2380      	movs	r3, #128	; 0x80
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	4013      	ands	r3, r2
 80027ae:	d0f0      	beq.n	8002792 <HAL_RCC_OscConfig+0x39e>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d106      	bne.n	80027c6 <HAL_RCC_OscConfig+0x3d2>
 80027b8:	4b75      	ldr	r3, [pc, #468]	; (8002990 <HAL_RCC_OscConfig+0x59c>)
 80027ba:	4a75      	ldr	r2, [pc, #468]	; (8002990 <HAL_RCC_OscConfig+0x59c>)
 80027bc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80027be:	2101      	movs	r1, #1
 80027c0:	430a      	orrs	r2, r1
 80027c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80027c4:	e01c      	b.n	8002800 <HAL_RCC_OscConfig+0x40c>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	2b05      	cmp	r3, #5
 80027cc:	d10c      	bne.n	80027e8 <HAL_RCC_OscConfig+0x3f4>
 80027ce:	4b70      	ldr	r3, [pc, #448]	; (8002990 <HAL_RCC_OscConfig+0x59c>)
 80027d0:	4a6f      	ldr	r2, [pc, #444]	; (8002990 <HAL_RCC_OscConfig+0x59c>)
 80027d2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80027d4:	2104      	movs	r1, #4
 80027d6:	430a      	orrs	r2, r1
 80027d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80027da:	4b6d      	ldr	r3, [pc, #436]	; (8002990 <HAL_RCC_OscConfig+0x59c>)
 80027dc:	4a6c      	ldr	r2, [pc, #432]	; (8002990 <HAL_RCC_OscConfig+0x59c>)
 80027de:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80027e0:	2101      	movs	r1, #1
 80027e2:	430a      	orrs	r2, r1
 80027e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80027e6:	e00b      	b.n	8002800 <HAL_RCC_OscConfig+0x40c>
 80027e8:	4b69      	ldr	r3, [pc, #420]	; (8002990 <HAL_RCC_OscConfig+0x59c>)
 80027ea:	4a69      	ldr	r2, [pc, #420]	; (8002990 <HAL_RCC_OscConfig+0x59c>)
 80027ec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80027ee:	2101      	movs	r1, #1
 80027f0:	438a      	bics	r2, r1
 80027f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80027f4:	4b66      	ldr	r3, [pc, #408]	; (8002990 <HAL_RCC_OscConfig+0x59c>)
 80027f6:	4a66      	ldr	r2, [pc, #408]	; (8002990 <HAL_RCC_OscConfig+0x59c>)
 80027f8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80027fa:	2104      	movs	r1, #4
 80027fc:	438a      	bics	r2, r1
 80027fe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d014      	beq.n	8002832 <HAL_RCC_OscConfig+0x43e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002808:	f7fe f882 	bl	8000910 <HAL_GetTick>
 800280c:	0003      	movs	r3, r0
 800280e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002810:	e009      	b.n	8002826 <HAL_RCC_OscConfig+0x432>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002812:	f7fe f87d 	bl	8000910 <HAL_GetTick>
 8002816:	0002      	movs	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	4a5e      	ldr	r2, [pc, #376]	; (8002998 <HAL_RCC_OscConfig+0x5a4>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x432>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e0af      	b.n	8002986 <HAL_RCC_OscConfig+0x592>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002826:	4b5a      	ldr	r3, [pc, #360]	; (8002990 <HAL_RCC_OscConfig+0x59c>)
 8002828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282a:	2202      	movs	r2, #2
 800282c:	4013      	ands	r3, r2
 800282e:	d0f0      	beq.n	8002812 <HAL_RCC_OscConfig+0x41e>
 8002830:	e013      	b.n	800285a <HAL_RCC_OscConfig+0x466>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002832:	f7fe f86d 	bl	8000910 <HAL_GetTick>
 8002836:	0003      	movs	r3, r0
 8002838:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800283a:	e009      	b.n	8002850 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800283c:	f7fe f868 	bl	8000910 <HAL_GetTick>
 8002840:	0002      	movs	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	4a54      	ldr	r2, [pc, #336]	; (8002998 <HAL_RCC_OscConfig+0x5a4>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e09a      	b.n	8002986 <HAL_RCC_OscConfig+0x592>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002850:	4b4f      	ldr	r3, [pc, #316]	; (8002990 <HAL_RCC_OscConfig+0x59c>)
 8002852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002854:	2202      	movs	r2, #2
 8002856:	4013      	ands	r3, r2
 8002858:	d1f0      	bne.n	800283c <HAL_RCC_OscConfig+0x448>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800285a:	231f      	movs	r3, #31
 800285c:	18fb      	adds	r3, r7, r3
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d105      	bne.n	8002870 <HAL_RCC_OscConfig+0x47c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002864:	4b4a      	ldr	r3, [pc, #296]	; (8002990 <HAL_RCC_OscConfig+0x59c>)
 8002866:	4a4a      	ldr	r2, [pc, #296]	; (8002990 <HAL_RCC_OscConfig+0x59c>)
 8002868:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800286a:	494c      	ldr	r1, [pc, #304]	; (800299c <HAL_RCC_OscConfig+0x5a8>)
 800286c:	400a      	ands	r2, r1
 800286e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d100      	bne.n	800287a <HAL_RCC_OscConfig+0x486>
 8002878:	e084      	b.n	8002984 <HAL_RCC_OscConfig+0x590>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800287a:	4b45      	ldr	r3, [pc, #276]	; (8002990 <HAL_RCC_OscConfig+0x59c>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2238      	movs	r2, #56	; 0x38
 8002880:	4013      	ands	r3, r2
 8002882:	2b10      	cmp	r3, #16
 8002884:	d100      	bne.n	8002888 <HAL_RCC_OscConfig+0x494>
 8002886:	e07b      	b.n	8002980 <HAL_RCC_OscConfig+0x58c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	2b02      	cmp	r3, #2
 800288e:	d150      	bne.n	8002932 <HAL_RCC_OscConfig+0x53e>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002890:	4b3f      	ldr	r3, [pc, #252]	; (8002990 <HAL_RCC_OscConfig+0x59c>)
 8002892:	4a3f      	ldr	r2, [pc, #252]	; (8002990 <HAL_RCC_OscConfig+0x59c>)
 8002894:	6812      	ldr	r2, [r2, #0]
 8002896:	4942      	ldr	r1, [pc, #264]	; (80029a0 <HAL_RCC_OscConfig+0x5ac>)
 8002898:	400a      	ands	r2, r1
 800289a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289c:	f7fe f838 	bl	8000910 <HAL_GetTick>
 80028a0:	0003      	movs	r3, r0
 80028a2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x4c4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a6:	f7fe f833 	bl	8000910 <HAL_GetTick>
 80028aa:	0002      	movs	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x4c4>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e066      	b.n	8002986 <HAL_RCC_OscConfig+0x592>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028b8:	4b35      	ldr	r3, [pc, #212]	; (8002990 <HAL_RCC_OscConfig+0x59c>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	2380      	movs	r3, #128	; 0x80
 80028be:	049b      	lsls	r3, r3, #18
 80028c0:	4013      	ands	r3, r2
 80028c2:	d1f0      	bne.n	80028a6 <HAL_RCC_OscConfig+0x4b2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028c4:	4a32      	ldr	r2, [pc, #200]	; (8002990 <HAL_RCC_OscConfig+0x59c>)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	4319      	orrs	r1, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d4:	4319      	orrs	r1, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028da:	021b      	lsls	r3, r3, #8
 80028dc:	4319      	orrs	r1, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	4319      	orrs	r1, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	430b      	orrs	r3, r1
 80028ea:	60d3      	str	r3, [r2, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028ec:	4b28      	ldr	r3, [pc, #160]	; (8002990 <HAL_RCC_OscConfig+0x59c>)
 80028ee:	4a28      	ldr	r2, [pc, #160]	; (8002990 <HAL_RCC_OscConfig+0x59c>)
 80028f0:	6812      	ldr	r2, [r2, #0]
 80028f2:	2180      	movs	r1, #128	; 0x80
 80028f4:	0449      	lsls	r1, r1, #17
 80028f6:	430a      	orrs	r2, r1
 80028f8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80028fa:	4b25      	ldr	r3, [pc, #148]	; (8002990 <HAL_RCC_OscConfig+0x59c>)
 80028fc:	4a24      	ldr	r2, [pc, #144]	; (8002990 <HAL_RCC_OscConfig+0x59c>)
 80028fe:	68d2      	ldr	r2, [r2, #12]
 8002900:	2180      	movs	r1, #128	; 0x80
 8002902:	0549      	lsls	r1, r1, #21
 8002904:	430a      	orrs	r2, r1
 8002906:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002908:	f7fe f802 	bl	8000910 <HAL_GetTick>
 800290c:	0003      	movs	r3, r0
 800290e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x530>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002912:	f7fd fffd 	bl	8000910 <HAL_GetTick>
 8002916:	0002      	movs	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x530>
          {
            return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e030      	b.n	8002986 <HAL_RCC_OscConfig+0x592>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002924:	4b1a      	ldr	r3, [pc, #104]	; (8002990 <HAL_RCC_OscConfig+0x59c>)
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	2380      	movs	r3, #128	; 0x80
 800292a:	049b      	lsls	r3, r3, #18
 800292c:	4013      	ands	r3, r2
 800292e:	d0f0      	beq.n	8002912 <HAL_RCC_OscConfig+0x51e>
 8002930:	e028      	b.n	8002984 <HAL_RCC_OscConfig+0x590>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002932:	4b17      	ldr	r3, [pc, #92]	; (8002990 <HAL_RCC_OscConfig+0x59c>)
 8002934:	4a16      	ldr	r2, [pc, #88]	; (8002990 <HAL_RCC_OscConfig+0x59c>)
 8002936:	6812      	ldr	r2, [r2, #0]
 8002938:	4919      	ldr	r1, [pc, #100]	; (80029a0 <HAL_RCC_OscConfig+0x5ac>)
 800293a:	400a      	ands	r2, r1
 800293c:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800293e:	4b14      	ldr	r3, [pc, #80]	; (8002990 <HAL_RCC_OscConfig+0x59c>)
 8002940:	4a13      	ldr	r2, [pc, #76]	; (8002990 <HAL_RCC_OscConfig+0x59c>)
 8002942:	68d2      	ldr	r2, [r2, #12]
 8002944:	2103      	movs	r1, #3
 8002946:	438a      	bics	r2, r1
 8002948:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800294a:	4b11      	ldr	r3, [pc, #68]	; (8002990 <HAL_RCC_OscConfig+0x59c>)
 800294c:	4a10      	ldr	r2, [pc, #64]	; (8002990 <HAL_RCC_OscConfig+0x59c>)
 800294e:	68d2      	ldr	r2, [r2, #12]
 8002950:	4914      	ldr	r1, [pc, #80]	; (80029a4 <HAL_RCC_OscConfig+0x5b0>)
 8002952:	400a      	ands	r2, r1
 8002954:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002956:	f7fd ffdb 	bl	8000910 <HAL_GetTick>
 800295a:	0003      	movs	r3, r0
 800295c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x57e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002960:	f7fd ffd6 	bl	8000910 <HAL_GetTick>
 8002964:	0002      	movs	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x57e>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e009      	b.n	8002986 <HAL_RCC_OscConfig+0x592>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002972:	4b07      	ldr	r3, [pc, #28]	; (8002990 <HAL_RCC_OscConfig+0x59c>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	2380      	movs	r3, #128	; 0x80
 8002978:	049b      	lsls	r3, r3, #18
 800297a:	4013      	ands	r3, r2
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x56c>
 800297e:	e001      	b.n	8002984 <HAL_RCC_OscConfig+0x590>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e000      	b.n	8002986 <HAL_RCC_OscConfig+0x592>
    }
  }
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	0018      	movs	r0, r3
 8002988:	46bd      	mov	sp, r7
 800298a:	b008      	add	sp, #32
 800298c:	bd80      	pop	{r7, pc}
 800298e:	46c0      	nop			; (mov r8, r8)
 8002990:	40021000 	.word	0x40021000
 8002994:	40007000 	.word	0x40007000
 8002998:	00001388 	.word	0x00001388
 800299c:	efffffff 	.word	0xefffffff
 80029a0:	feffffff 	.word	0xfeffffff
 80029a4:	eefeffff 	.word	0xeefeffff

080029a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e0e5      	b.n	8002b88 <HAL_RCC_ClockConfig+0x1e0>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029bc:	4b74      	ldr	r3, [pc, #464]	; (8002b90 <HAL_RCC_ClockConfig+0x1e8>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2207      	movs	r2, #7
 80029c2:	401a      	ands	r2, r3
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d21e      	bcs.n	8002a08 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ca:	4b71      	ldr	r3, [pc, #452]	; (8002b90 <HAL_RCC_ClockConfig+0x1e8>)
 80029cc:	4a70      	ldr	r2, [pc, #448]	; (8002b90 <HAL_RCC_ClockConfig+0x1e8>)
 80029ce:	6812      	ldr	r2, [r2, #0]
 80029d0:	2107      	movs	r1, #7
 80029d2:	438a      	bics	r2, r1
 80029d4:	0011      	movs	r1, r2
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029dc:	f7fd ff98 	bl	8000910 <HAL_GetTick>
 80029e0:	0003      	movs	r3, r0
 80029e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029e4:	e009      	b.n	80029fa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e6:	f7fd ff93 	bl	8000910 <HAL_GetTick>
 80029ea:	0002      	movs	r2, r0
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	4a68      	ldr	r2, [pc, #416]	; (8002b94 <HAL_RCC_ClockConfig+0x1ec>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e0c6      	b.n	8002b88 <HAL_RCC_ClockConfig+0x1e0>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029fa:	4b65      	ldr	r3, [pc, #404]	; (8002b90 <HAL_RCC_ClockConfig+0x1e8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2207      	movs	r2, #7
 8002a00:	401a      	ands	r2, r3
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d1ee      	bne.n	80029e6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d014      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x94>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2204      	movs	r2, #4
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d006      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002a1c:	4b5e      	ldr	r3, [pc, #376]	; (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002a1e:	4a5e      	ldr	r2, [pc, #376]	; (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002a20:	6892      	ldr	r2, [r2, #8]
 8002a22:	21e0      	movs	r1, #224	; 0xe0
 8002a24:	01c9      	lsls	r1, r1, #7
 8002a26:	430a      	orrs	r2, r1
 8002a28:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a2a:	4a5b      	ldr	r2, [pc, #364]	; (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002a2c:	4b5a      	ldr	r3, [pc, #360]	; (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	495a      	ldr	r1, [pc, #360]	; (8002b9c <HAL_RCC_ClockConfig+0x1f4>)
 8002a32:	4019      	ands	r1, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	430b      	orrs	r3, r1
 8002a3a:	6093      	str	r3, [r2, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2201      	movs	r2, #1
 8002a42:	4013      	ands	r3, r2
 8002a44:	d057      	beq.n	8002af6 <HAL_RCC_ClockConfig+0x14e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d107      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a4e:	4b52      	ldr	r3, [pc, #328]	; (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	2380      	movs	r3, #128	; 0x80
 8002a54:	029b      	lsls	r3, r3, #10
 8002a56:	4013      	ands	r3, r2
 8002a58:	d12b      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0x10a>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e094      	b.n	8002b88 <HAL_RCC_ClockConfig+0x1e0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d107      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a66:	4b4c      	ldr	r3, [pc, #304]	; (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	2380      	movs	r3, #128	; 0x80
 8002a6c:	049b      	lsls	r3, r3, #18
 8002a6e:	4013      	ands	r3, r2
 8002a70:	d11f      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0x10a>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e088      	b.n	8002b88 <HAL_RCC_ClockConfig+0x1e0>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d107      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xe6>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a7e:	4b46      	ldr	r3, [pc, #280]	; (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	2380      	movs	r3, #128	; 0x80
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	4013      	ands	r3, r2
 8002a88:	d113      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0x10a>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e07c      	b.n	8002b88 <HAL_RCC_ClockConfig+0x1e0>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b03      	cmp	r3, #3
 8002a94:	d106      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0xfc>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a96:	4b40      	ldr	r3, [pc, #256]	; (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	d108      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0x10a>
      {
        return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e071      	b.n	8002b88 <HAL_RCC_ClockConfig+0x1e0>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aa4:	4b3c      	ldr	r3, [pc, #240]	; (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d101      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0x10a>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e06a      	b.n	8002b88 <HAL_RCC_ClockConfig+0x1e0>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ab2:	4a39      	ldr	r2, [pc, #228]	; (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab4:	4b38      	ldr	r3, [pc, #224]	; (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	2107      	movs	r1, #7
 8002aba:	438b      	bics	r3, r1
 8002abc:	0019      	movs	r1, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	430b      	orrs	r3, r1
 8002ac4:	6093      	str	r3, [r2, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ac6:	f7fd ff23 	bl	8000910 <HAL_GetTick>
 8002aca:	0003      	movs	r3, r0
 8002acc:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ace:	e009      	b.n	8002ae4 <HAL_RCC_ClockConfig+0x13c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad0:	f7fd ff1e 	bl	8000910 <HAL_GetTick>
 8002ad4:	0002      	movs	r2, r0
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	4a2e      	ldr	r2, [pc, #184]	; (8002b94 <HAL_RCC_ClockConfig+0x1ec>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_ClockConfig+0x13c>
      {
        return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e051      	b.n	8002b88 <HAL_RCC_ClockConfig+0x1e0>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae4:	4b2c      	ldr	r3, [pc, #176]	; (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2238      	movs	r2, #56	; 0x38
 8002aea:	401a      	ands	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d1ec      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002af6:	4b26      	ldr	r3, [pc, #152]	; (8002b90 <HAL_RCC_ClockConfig+0x1e8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2207      	movs	r2, #7
 8002afc:	401a      	ands	r2, r3
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d91e      	bls.n	8002b42 <HAL_RCC_ClockConfig+0x19a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b04:	4b22      	ldr	r3, [pc, #136]	; (8002b90 <HAL_RCC_ClockConfig+0x1e8>)
 8002b06:	4a22      	ldr	r2, [pc, #136]	; (8002b90 <HAL_RCC_ClockConfig+0x1e8>)
 8002b08:	6812      	ldr	r2, [r2, #0]
 8002b0a:	2107      	movs	r1, #7
 8002b0c:	438a      	bics	r2, r1
 8002b0e:	0011      	movs	r1, r2
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b16:	f7fd fefb 	bl	8000910 <HAL_GetTick>
 8002b1a:	0003      	movs	r3, r0
 8002b1c:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b1e:	e009      	b.n	8002b34 <HAL_RCC_ClockConfig+0x18c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b20:	f7fd fef6 	bl	8000910 <HAL_GetTick>
 8002b24:	0002      	movs	r2, r0
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	4a1a      	ldr	r2, [pc, #104]	; (8002b94 <HAL_RCC_ClockConfig+0x1ec>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_ClockConfig+0x18c>
      {
        return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e029      	b.n	8002b88 <HAL_RCC_ClockConfig+0x1e0>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b34:	4b16      	ldr	r3, [pc, #88]	; (8002b90 <HAL_RCC_ClockConfig+0x1e8>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2207      	movs	r2, #7
 8002b3a:	401a      	ands	r2, r3
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d1ee      	bne.n	8002b20 <HAL_RCC_ClockConfig+0x178>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2204      	movs	r2, #4
 8002b48:	4013      	ands	r3, r2
 8002b4a:	d008      	beq.n	8002b5e <HAL_RCC_ClockConfig+0x1b6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002b4c:	4a12      	ldr	r2, [pc, #72]	; (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002b4e:	4b12      	ldr	r3, [pc, #72]	; (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	4913      	ldr	r1, [pc, #76]	; (8002ba0 <HAL_RCC_ClockConfig+0x1f8>)
 8002b54:	4019      	ands	r1, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	430b      	orrs	r3, r1
 8002b5c:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002b5e:	f000 f825 	bl	8002bac <HAL_RCC_GetSysClockFreq>
 8002b62:	0001      	movs	r1, r0
 8002b64:	4b0c      	ldr	r3, [pc, #48]	; (8002b98 <HAL_RCC_ClockConfig+0x1f0>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	0a1b      	lsrs	r3, r3, #8
 8002b6a:	220f      	movs	r2, #15
 8002b6c:	401a      	ands	r2, r3
 8002b6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ba4 <HAL_RCC_ClockConfig+0x1fc>)
 8002b70:	0092      	lsls	r2, r2, #2
 8002b72:	58d3      	ldr	r3, [r2, r3]
 8002b74:	221f      	movs	r2, #31
 8002b76:	4013      	ands	r3, r2
 8002b78:	000a      	movs	r2, r1
 8002b7a:	40da      	lsrs	r2, r3
 8002b7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ba8 <HAL_RCC_ClockConfig+0x200>)
 8002b7e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(TICK_INT_PRIORITY);
 8002b80:	2000      	movs	r0, #0
 8002b82:	f002 fa59 	bl	8005038 <HAL_InitTick>
 8002b86:	0003      	movs	r3, r0
}
 8002b88:	0018      	movs	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	b004      	add	sp, #16
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40022000 	.word	0x40022000
 8002b94:	00001388 	.word	0x00001388
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	fffff0ff 	.word	0xfffff0ff
 8002ba0:	ffff8fff 	.word	0xffff8fff
 8002ba4:	080052ec 	.word	0x080052ec
 8002ba8:	20000008 	.word	0x20000008

08002bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002bb2:	4b3c      	ldr	r3, [pc, #240]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	2238      	movs	r2, #56	; 0x38
 8002bb8:	4013      	ands	r3, r2
 8002bba:	d10f      	bne.n	8002bdc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002bbc:	4b39      	ldr	r3, [pc, #228]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	0adb      	lsrs	r3, r3, #11
 8002bc2:	2207      	movs	r2, #7
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	409a      	lsls	r2, r3
 8002bca:	0013      	movs	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002bce:	68f9      	ldr	r1, [r7, #12]
 8002bd0:	4835      	ldr	r0, [pc, #212]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002bd2:	f7fd fa99 	bl	8000108 <__udivsi3>
 8002bd6:	0003      	movs	r3, r0
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	e05d      	b.n	8002c98 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002bdc:	4b31      	ldr	r3, [pc, #196]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2238      	movs	r2, #56	; 0x38
 8002be2:	4013      	ands	r3, r2
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d102      	bne.n	8002bee <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002be8:	4b30      	ldr	r3, [pc, #192]	; (8002cac <HAL_RCC_GetSysClockFreq+0x100>)
 8002bea:	613b      	str	r3, [r7, #16]
 8002bec:	e054      	b.n	8002c98 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002bee:	4b2d      	ldr	r3, [pc, #180]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	2238      	movs	r2, #56	; 0x38
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	2b10      	cmp	r3, #16
 8002bf8:	d138      	bne.n	8002c6c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002bfa:	4b2a      	ldr	r3, [pc, #168]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	2203      	movs	r2, #3
 8002c00:	4013      	ands	r3, r2
 8002c02:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c04:	4b27      	ldr	r3, [pc, #156]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	091b      	lsrs	r3, r3, #4
 8002c0a:	2207      	movs	r2, #7
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	3301      	adds	r3, #1
 8002c10:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2b03      	cmp	r3, #3
 8002c16:	d10d      	bne.n	8002c34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	4824      	ldr	r0, [pc, #144]	; (8002cac <HAL_RCC_GetSysClockFreq+0x100>)
 8002c1c:	f7fd fa74 	bl	8000108 <__udivsi3>
 8002c20:	0003      	movs	r3, r0
 8002c22:	0019      	movs	r1, r3
 8002c24:	4b1f      	ldr	r3, [pc, #124]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	0a1b      	lsrs	r3, r3, #8
 8002c2a:	227f      	movs	r2, #127	; 0x7f
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	434b      	muls	r3, r1
 8002c30:	617b      	str	r3, [r7, #20]
        break;
 8002c32:	e00d      	b.n	8002c50 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	481c      	ldr	r0, [pc, #112]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002c38:	f7fd fa66 	bl	8000108 <__udivsi3>
 8002c3c:	0003      	movs	r3, r0
 8002c3e:	0019      	movs	r1, r3
 8002c40:	4b18      	ldr	r3, [pc, #96]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	0a1b      	lsrs	r3, r3, #8
 8002c46:	227f      	movs	r2, #127	; 0x7f
 8002c48:	4013      	ands	r3, r2
 8002c4a:	434b      	muls	r3, r1
 8002c4c:	617b      	str	r3, [r7, #20]
        break;
 8002c4e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002c50:	4b14      	ldr	r3, [pc, #80]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	0f5b      	lsrs	r3, r3, #29
 8002c56:	2207      	movs	r2, #7
 8002c58:	4013      	ands	r3, r2
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c5e:	6839      	ldr	r1, [r7, #0]
 8002c60:	6978      	ldr	r0, [r7, #20]
 8002c62:	f7fd fa51 	bl	8000108 <__udivsi3>
 8002c66:	0003      	movs	r3, r0
 8002c68:	613b      	str	r3, [r7, #16]
 8002c6a:	e015      	b.n	8002c98 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002c6c:	4b0d      	ldr	r3, [pc, #52]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	2238      	movs	r2, #56	; 0x38
 8002c72:	4013      	ands	r3, r2
 8002c74:	2b20      	cmp	r3, #32
 8002c76:	d103      	bne.n	8002c80 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002c78:	2380      	movs	r3, #128	; 0x80
 8002c7a:	021b      	lsls	r3, r3, #8
 8002c7c:	613b      	str	r3, [r7, #16]
 8002c7e:	e00b      	b.n	8002c98 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002c80:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	2238      	movs	r2, #56	; 0x38
 8002c86:	4013      	ands	r3, r2
 8002c88:	2b18      	cmp	r3, #24
 8002c8a:	d103      	bne.n	8002c94 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002c8c:	23fa      	movs	r3, #250	; 0xfa
 8002c8e:	01db      	lsls	r3, r3, #7
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	e001      	b.n	8002c98 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002c98:	693b      	ldr	r3, [r7, #16]
}
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	b006      	add	sp, #24
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	00f42400 	.word	0x00f42400
 8002cac:	007a1200 	.word	0x007a1200

08002cb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb4:	4b02      	ldr	r3, [pc, #8]	; (8002cc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
}
 8002cb8:	0018      	movs	r0, r3
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	20000008 	.word	0x20000008

08002cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8002cc8:	f7ff fff2 	bl	8002cb0 <HAL_RCC_GetHCLKFreq>
 8002ccc:	0001      	movs	r1, r0
 8002cce:	4b07      	ldr	r3, [pc, #28]	; (8002cec <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	0b1b      	lsrs	r3, r3, #12
 8002cd4:	2207      	movs	r2, #7
 8002cd6:	401a      	ands	r2, r3
 8002cd8:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8002cda:	0092      	lsls	r2, r2, #2
 8002cdc:	58d3      	ldr	r3, [r2, r3]
 8002cde:	221f      	movs	r2, #31
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	40d9      	lsrs	r1, r3
 8002ce4:	000b      	movs	r3, r1
}
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	0800532c 	.word	0x0800532c

08002cf4 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2207      	movs	r2, #7
 8002d02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d04:	4b0e      	ldr	r3, [pc, #56]	; (8002d40 <HAL_RCC_GetClockConfig+0x4c>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	2207      	movs	r2, #7
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d10:	4b0b      	ldr	r3, [pc, #44]	; (8002d40 <HAL_RCC_GetClockConfig+0x4c>)
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	23f0      	movs	r3, #240	; 0xf0
 8002d16:	011b      	lsls	r3, r3, #4
 8002d18:	401a      	ands	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8002d1e:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <HAL_RCC_GetClockConfig+0x4c>)
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	23e0      	movs	r3, #224	; 0xe0
 8002d24:	01db      	lsls	r3, r3, #7
 8002d26:	401a      	ands	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d2c:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <HAL_RCC_GetClockConfig+0x50>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2207      	movs	r2, #7
 8002d32:	401a      	ands	r2, r3
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	601a      	str	r2, [r3, #0]
}
 8002d38:	46c0      	nop			; (mov r8, r8)
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	b002      	add	sp, #8
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40021000 	.word	0x40021000
 8002d44:	40022000 	.word	0x40022000

08002d48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002d50:	2313      	movs	r3, #19
 8002d52:	18fb      	adds	r3, r7, r3
 8002d54:	2200      	movs	r2, #0
 8002d56:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d58:	2312      	movs	r3, #18
 8002d5a:	18fb      	adds	r3, r7, r3
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	2380      	movs	r3, #128	; 0x80
 8002d66:	029b      	lsls	r3, r3, #10
 8002d68:	4013      	ands	r3, r2
 8002d6a:	d100      	bne.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002d6c:	e0a3      	b.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d6e:	2311      	movs	r3, #17
 8002d70:	18fb      	adds	r3, r7, r3
 8002d72:	2200      	movs	r2, #0
 8002d74:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d76:	4bbf      	ldr	r3, [pc, #764]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002d78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d7a:	2380      	movs	r3, #128	; 0x80
 8002d7c:	055b      	lsls	r3, r3, #21
 8002d7e:	4013      	ands	r3, r2
 8002d80:	d111      	bne.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d82:	4bbc      	ldr	r3, [pc, #752]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002d84:	4abb      	ldr	r2, [pc, #748]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002d86:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d88:	2180      	movs	r1, #128	; 0x80
 8002d8a:	0549      	lsls	r1, r1, #21
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d90:	4bb8      	ldr	r3, [pc, #736]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002d92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d94:	2380      	movs	r3, #128	; 0x80
 8002d96:	055b      	lsls	r3, r3, #21
 8002d98:	4013      	ands	r3, r2
 8002d9a:	60bb      	str	r3, [r7, #8]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d9e:	2311      	movs	r3, #17
 8002da0:	18fb      	adds	r3, r7, r3
 8002da2:	2201      	movs	r2, #1
 8002da4:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002da6:	4bb4      	ldr	r3, [pc, #720]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002da8:	4ab3      	ldr	r2, [pc, #716]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002daa:	6812      	ldr	r2, [r2, #0]
 8002dac:	2180      	movs	r1, #128	; 0x80
 8002dae:	0049      	lsls	r1, r1, #1
 8002db0:	430a      	orrs	r2, r1
 8002db2:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002db4:	f7fd fdac 	bl	8000910 <HAL_GetTick>
 8002db8:	0003      	movs	r3, r0
 8002dba:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dbc:	e00b      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dbe:	f7fd fda7 	bl	8000910 <HAL_GetTick>
 8002dc2:	0002      	movs	r2, r0
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d904      	bls.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8002dcc:	2313      	movs	r3, #19
 8002dce:	18fb      	adds	r3, r7, r3
 8002dd0:	2203      	movs	r2, #3
 8002dd2:	701a      	strb	r2, [r3, #0]
        break;
 8002dd4:	e005      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dd6:	4ba8      	ldr	r3, [pc, #672]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	2380      	movs	r3, #128	; 0x80
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	4013      	ands	r3, r2
 8002de0:	d0ed      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 8002de2:	2313      	movs	r3, #19
 8002de4:	18fb      	adds	r3, r7, r3
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d153      	bne.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002dec:	4ba1      	ldr	r3, [pc, #644]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002dee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002df0:	23c0      	movs	r3, #192	; 0xc0
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4013      	ands	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d019      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0xea>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d014      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e08:	4b9a      	ldr	r3, [pc, #616]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0c:	4a9b      	ldr	r2, [pc, #620]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002e0e:	4013      	ands	r3, r2
 8002e10:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e12:	4b98      	ldr	r3, [pc, #608]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002e14:	4a97      	ldr	r2, [pc, #604]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002e16:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e18:	2180      	movs	r1, #128	; 0x80
 8002e1a:	0249      	lsls	r1, r1, #9
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e20:	4b94      	ldr	r3, [pc, #592]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002e22:	4a94      	ldr	r2, [pc, #592]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002e24:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e26:	4996      	ldr	r1, [pc, #600]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e28:	400a      	ands	r2, r1
 8002e2a:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e2c:	4b91      	ldr	r3, [pc, #580]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	2201      	movs	r2, #1
 8002e36:	4013      	ands	r3, r2
 8002e38:	d016      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3a:	f7fd fd69 	bl	8000910 <HAL_GetTick>
 8002e3e:	0003      	movs	r3, r0
 8002e40:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e42:	e00c      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e44:	f7fd fd64 	bl	8000910 <HAL_GetTick>
 8002e48:	0002      	movs	r2, r0
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	4a8d      	ldr	r2, [pc, #564]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d904      	bls.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8002e54:	2313      	movs	r3, #19
 8002e56:	18fb      	adds	r3, r7, r3
 8002e58:	2203      	movs	r2, #3
 8002e5a:	701a      	strb	r2, [r3, #0]
            break;
 8002e5c:	e004      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e5e:	4b85      	ldr	r3, [pc, #532]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e62:	2202      	movs	r2, #2
 8002e64:	4013      	ands	r3, r2
 8002e66:	d0ed      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8002e68:	2313      	movs	r3, #19
 8002e6a:	18fb      	adds	r3, r7, r3
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d109      	bne.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e72:	4a80      	ldr	r2, [pc, #512]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002e74:	4b7f      	ldr	r3, [pc, #508]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e78:	4980      	ldr	r1, [pc, #512]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002e7a:	4019      	ands	r1, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e80:	430b      	orrs	r3, r1
 8002e82:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002e84:	e00c      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e86:	2312      	movs	r3, #18
 8002e88:	18fb      	adds	r3, r7, r3
 8002e8a:	2213      	movs	r2, #19
 8002e8c:	18ba      	adds	r2, r7, r2
 8002e8e:	7812      	ldrb	r2, [r2, #0]
 8002e90:	701a      	strb	r2, [r3, #0]
 8002e92:	e005      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e94:	2312      	movs	r3, #18
 8002e96:	18fb      	adds	r3, r7, r3
 8002e98:	2213      	movs	r2, #19
 8002e9a:	18ba      	adds	r2, r7, r2
 8002e9c:	7812      	ldrb	r2, [r2, #0]
 8002e9e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ea0:	2311      	movs	r3, #17
 8002ea2:	18fb      	adds	r3, r7, r3
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d105      	bne.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eaa:	4b72      	ldr	r3, [pc, #456]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002eac:	4a71      	ldr	r2, [pc, #452]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002eae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002eb0:	4975      	ldr	r1, [pc, #468]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002eb2:	400a      	ands	r2, r1
 8002eb4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	d009      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ec0:	4a6c      	ldr	r2, [pc, #432]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002ec2:	4b6c      	ldr	r3, [pc, #432]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec6:	2103      	movs	r1, #3
 8002ec8:	438b      	bics	r3, r1
 8002eca:	0019      	movs	r1, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	430b      	orrs	r3, r1
 8002ed2:	6553      	str	r3, [r2, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2202      	movs	r2, #2
 8002eda:	4013      	ands	r3, r2
 8002edc:	d009      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ede:	4a65      	ldr	r2, [pc, #404]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002ee0:	4b64      	ldr	r3, [pc, #400]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee4:	210c      	movs	r1, #12
 8002ee6:	438b      	bics	r3, r1
 8002ee8:	0019      	movs	r1, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	430b      	orrs	r3, r1
 8002ef0:	6553      	str	r3, [r2, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	4013      	ands	r3, r2
 8002efa:	d008      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002efc:	4a5d      	ldr	r2, [pc, #372]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002efe:	4b5d      	ldr	r3, [pc, #372]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f02:	4962      	ldr	r1, [pc, #392]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002f04:	4019      	ands	r1, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	430b      	orrs	r3, r1
 8002f0c:	6553      	str	r3, [r2, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	2380      	movs	r3, #128	; 0x80
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4013      	ands	r3, r2
 8002f18:	d008      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f1a:	4a56      	ldr	r2, [pc, #344]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002f1c:	4b55      	ldr	r3, [pc, #340]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f20:	495b      	ldr	r1, [pc, #364]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002f22:	4019      	ands	r1, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	430b      	orrs	r3, r1
 8002f2a:	6553      	str	r3, [r2, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	2380      	movs	r3, #128	; 0x80
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	4013      	ands	r3, r2
 8002f36:	d008      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x202>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f38:	4a4e      	ldr	r2, [pc, #312]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002f3a:	4b4e      	ldr	r3, [pc, #312]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3e:	4955      	ldr	r1, [pc, #340]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002f40:	4019      	ands	r1, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	430b      	orrs	r3, r1
 8002f48:	6553      	str	r3, [r2, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2240      	movs	r2, #64	; 0x40
 8002f50:	4013      	ands	r3, r2
 8002f52:	d008      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x21e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f54:	4a47      	ldr	r2, [pc, #284]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002f56:	4b47      	ldr	r3, [pc, #284]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5a:	494f      	ldr	r1, [pc, #316]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002f5c:	4019      	ands	r1, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	430b      	orrs	r3, r1
 8002f64:	6553      	str	r3, [r2, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	2380      	movs	r3, #128	; 0x80
 8002f6c:	01db      	lsls	r3, r3, #7
 8002f6e:	4013      	ands	r3, r2
 8002f70:	d015      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f72:	4a40      	ldr	r2, [pc, #256]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002f74:	4b3f      	ldr	r3, [pc, #252]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	0899      	lsrs	r1, r3, #2
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	430b      	orrs	r3, r1
 8002f82:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a1a      	ldr	r2, [r3, #32]
 8002f88:	2380      	movs	r3, #128	; 0x80
 8002f8a:	05db      	lsls	r3, r3, #23
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d106      	bne.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x256>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002f90:	4b38      	ldr	r3, [pc, #224]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002f92:	4a38      	ldr	r2, [pc, #224]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002f94:	68d2      	ldr	r2, [r2, #12]
 8002f96:	2180      	movs	r1, #128	; 0x80
 8002f98:	0249      	lsls	r1, r1, #9
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR_CECSEL)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	2380      	movs	r3, #128	; 0x80
 8002fa4:	031b      	lsls	r3, r3, #12
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	d009      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002faa:	4a32      	ldr	r2, [pc, #200]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002fac:	4b31      	ldr	r3, [pc, #196]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb0:	2140      	movs	r1, #64	; 0x40
 8002fb2:	438b      	bics	r3, r1
 8002fb4:	0019      	movs	r1, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	430b      	orrs	r3, r1
 8002fbc:	6553      	str	r3, [r2, #84]	; 0x54
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	2380      	movs	r3, #128	; 0x80
 8002fc4:	039b      	lsls	r3, r3, #14
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	d015      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002fca:	4a2a      	ldr	r2, [pc, #168]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002fcc:	4b29      	ldr	r3, [pc, #164]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd0:	4932      	ldr	r1, [pc, #200]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002fd2:	4019      	ands	r1, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fe0:	2380      	movs	r3, #128	; 0x80
 8002fe2:	03db      	lsls	r3, r3, #15
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d106      	bne.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002fe8:	4b22      	ldr	r3, [pc, #136]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002fea:	4a22      	ldr	r2, [pc, #136]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002fec:	68d2      	ldr	r2, [r2, #12]
 8002fee:	2180      	movs	r1, #128	; 0x80
 8002ff0:	0449      	lsls	r1, r1, #17
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	2380      	movs	r3, #128	; 0x80
 8002ffc:	03db      	lsls	r3, r3, #15
 8002ffe:	4013      	ands	r3, r2
 8003000:	d015      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003002:	4a1c      	ldr	r2, [pc, #112]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8003004:	4b1b      	ldr	r3, [pc, #108]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8003006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003008:	4925      	ldr	r1, [pc, #148]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800300a:	4019      	ands	r1, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003010:	430b      	orrs	r3, r1
 8003012:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003018:	2380      	movs	r3, #128	; 0x80
 800301a:	045b      	lsls	r3, r3, #17
 800301c:	429a      	cmp	r2, r3
 800301e:	d106      	bne.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003020:	4b14      	ldr	r3, [pc, #80]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8003022:	4a14      	ldr	r2, [pc, #80]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8003024:	68d2      	ldr	r2, [r2, #12]
 8003026:	2180      	movs	r1, #128	; 0x80
 8003028:	0449      	lsls	r1, r1, #17
 800302a:	430a      	orrs	r2, r1
 800302c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	2380      	movs	r3, #128	; 0x80
 8003034:	011b      	lsls	r3, r3, #4
 8003036:	4013      	ands	r3, r2
 8003038:	d015      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800303a:	4a0e      	ldr	r2, [pc, #56]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 800303c:	4b0d      	ldr	r3, [pc, #52]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 800303e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003040:	4918      	ldr	r1, [pc, #96]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003042:	4019      	ands	r1, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	430b      	orrs	r3, r1
 800304a:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	695a      	ldr	r2, [r3, #20]
 8003050:	2380      	movs	r3, #128	; 0x80
 8003052:	01db      	lsls	r3, r3, #7
 8003054:	429a      	cmp	r2, r3
 8003056:	d106      	bne.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003058:	4b06      	ldr	r3, [pc, #24]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 800305a:	4a06      	ldr	r2, [pc, #24]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 800305c:	68d2      	ldr	r2, [r2, #12]
 800305e:	2180      	movs	r1, #128	; 0x80
 8003060:	0249      	lsls	r1, r1, #9
 8003062:	430a      	orrs	r2, r1
 8003064:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 8003066:	2312      	movs	r3, #18
 8003068:	18fb      	adds	r3, r7, r3
 800306a:	781b      	ldrb	r3, [r3, #0]
}
 800306c:	0018      	movs	r0, r3
 800306e:	46bd      	mov	sp, r7
 8003070:	b006      	add	sp, #24
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40021000 	.word	0x40021000
 8003078:	40007000 	.word	0x40007000
 800307c:	fffffcff 	.word	0xfffffcff
 8003080:	fffeffff 	.word	0xfffeffff
 8003084:	00001388 	.word	0x00001388
 8003088:	efffffff 	.word	0xefffffff
 800308c:	fffff3ff 	.word	0xfffff3ff
 8003090:	fff3ffff 	.word	0xfff3ffff
 8003094:	ffcfffff 	.word	0xffcfffff
 8003098:	ffffcfff 	.word	0xffffcfff
 800309c:	ffbfffff 	.word	0xffbfffff
 80030a0:	feffffff 	.word	0xfeffffff
 80030a4:	ffff3fff 	.word	0xffff3fff

080030a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e01e      	b.n	80030f8 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	223d      	movs	r2, #61	; 0x3d
 80030be:	5c9b      	ldrb	r3, [r3, r2]
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d107      	bne.n	80030d6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	223c      	movs	r2, #60	; 0x3c
 80030ca:	2100      	movs	r1, #0
 80030cc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	0018      	movs	r0, r3
 80030d2:	f001 ff8b 	bl	8004fec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	223d      	movs	r2, #61	; 0x3d
 80030da:	2102      	movs	r1, #2
 80030dc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3304      	adds	r3, #4
 80030e6:	0019      	movs	r1, r3
 80030e8:	0010      	movs	r0, r2
 80030ea:	f000 f985 	bl	80033f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	223d      	movs	r2, #61	; 0x3d
 80030f2:	2101      	movs	r1, #1
 80030f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	0018      	movs	r0, r3
 80030fa:	46bd      	mov	sp, r7
 80030fc:	b002      	add	sp, #8
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6812      	ldr	r2, [r2, #0]
 8003110:	68d2      	ldr	r2, [r2, #12]
 8003112:	2101      	movs	r1, #1
 8003114:	430a      	orrs	r2, r1
 8003116:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	4a0c      	ldr	r2, [pc, #48]	; (8003150 <HAL_TIM_Base_Start_IT+0x50>)
 8003120:	4013      	ands	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2b06      	cmp	r3, #6
 8003128:	d00c      	beq.n	8003144 <HAL_TIM_Base_Start_IT+0x44>
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	2380      	movs	r3, #128	; 0x80
 800312e:	025b      	lsls	r3, r3, #9
 8003130:	429a      	cmp	r2, r3
 8003132:	d007      	beq.n	8003144 <HAL_TIM_Base_Start_IT+0x44>
  {
  __HAL_TIM_ENABLE(htim);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6812      	ldr	r2, [r2, #0]
 800313c:	6812      	ldr	r2, [r2, #0]
 800313e:	2101      	movs	r1, #1
 8003140:	430a      	orrs	r2, r1
 8003142:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	0018      	movs	r0, r3
 8003148:	46bd      	mov	sp, r7
 800314a:	b004      	add	sp, #16
 800314c:	bd80      	pop	{r7, pc}
 800314e:	46c0      	nop			; (mov r8, r8)
 8003150:	00010007 	.word	0x00010007

08003154 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	2202      	movs	r2, #2
 8003164:	4013      	ands	r3, r2
 8003166:	2b02      	cmp	r3, #2
 8003168:	d124      	bne.n	80031b4 <HAL_TIM_IRQHandler+0x60>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	2202      	movs	r2, #2
 8003172:	4013      	ands	r3, r2
 8003174:	2b02      	cmp	r3, #2
 8003176:	d11d      	bne.n	80031b4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2203      	movs	r2, #3
 800317e:	4252      	negs	r2, r2
 8003180:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	2203      	movs	r2, #3
 8003190:	4013      	ands	r3, r2
 8003192:	d004      	beq.n	800319e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	0018      	movs	r0, r3
 8003198:	f000 f916 	bl	80033c8 <HAL_TIM_IC_CaptureCallback>
 800319c:	e007      	b.n	80031ae <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	0018      	movs	r0, r3
 80031a2:	f000 f909 	bl	80033b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	0018      	movs	r0, r3
 80031aa:	f000 f915 	bl	80033d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	2204      	movs	r2, #4
 80031bc:	4013      	ands	r3, r2
 80031be:	2b04      	cmp	r3, #4
 80031c0:	d125      	bne.n	800320e <HAL_TIM_IRQHandler+0xba>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	2204      	movs	r2, #4
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b04      	cmp	r3, #4
 80031ce:	d11e      	bne.n	800320e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2205      	movs	r2, #5
 80031d6:	4252      	negs	r2, r2
 80031d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2202      	movs	r2, #2
 80031de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699a      	ldr	r2, [r3, #24]
 80031e6:	23c0      	movs	r3, #192	; 0xc0
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4013      	ands	r3, r2
 80031ec:	d004      	beq.n	80031f8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	0018      	movs	r0, r3
 80031f2:	f000 f8e9 	bl	80033c8 <HAL_TIM_IC_CaptureCallback>
 80031f6:	e007      	b.n	8003208 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	0018      	movs	r0, r3
 80031fc:	f000 f8dc 	bl	80033b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	0018      	movs	r0, r3
 8003204:	f000 f8e8 	bl	80033d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	2208      	movs	r2, #8
 8003216:	4013      	ands	r3, r2
 8003218:	2b08      	cmp	r3, #8
 800321a:	d124      	bne.n	8003266 <HAL_TIM_IRQHandler+0x112>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	2208      	movs	r2, #8
 8003224:	4013      	ands	r3, r2
 8003226:	2b08      	cmp	r3, #8
 8003228:	d11d      	bne.n	8003266 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2209      	movs	r2, #9
 8003230:	4252      	negs	r2, r2
 8003232:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2204      	movs	r2, #4
 8003238:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	69db      	ldr	r3, [r3, #28]
 8003240:	2203      	movs	r2, #3
 8003242:	4013      	ands	r3, r2
 8003244:	d004      	beq.n	8003250 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	0018      	movs	r0, r3
 800324a:	f000 f8bd 	bl	80033c8 <HAL_TIM_IC_CaptureCallback>
 800324e:	e007      	b.n	8003260 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	0018      	movs	r0, r3
 8003254:	f000 f8b0 	bl	80033b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	0018      	movs	r0, r3
 800325c:	f000 f8bc 	bl	80033d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	2210      	movs	r2, #16
 800326e:	4013      	ands	r3, r2
 8003270:	2b10      	cmp	r3, #16
 8003272:	d125      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	2210      	movs	r2, #16
 800327c:	4013      	ands	r3, r2
 800327e:	2b10      	cmp	r3, #16
 8003280:	d11e      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2211      	movs	r2, #17
 8003288:	4252      	negs	r2, r2
 800328a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2208      	movs	r2, #8
 8003290:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	69da      	ldr	r2, [r3, #28]
 8003298:	23c0      	movs	r3, #192	; 0xc0
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4013      	ands	r3, r2
 800329e:	d004      	beq.n	80032aa <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	0018      	movs	r0, r3
 80032a4:	f000 f890 	bl	80033c8 <HAL_TIM_IC_CaptureCallback>
 80032a8:	e007      	b.n	80032ba <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	0018      	movs	r0, r3
 80032ae:	f000 f883 	bl	80033b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	0018      	movs	r0, r3
 80032b6:	f000 f88f 	bl	80033d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	2201      	movs	r2, #1
 80032c8:	4013      	ands	r3, r2
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d10f      	bne.n	80032ee <HAL_TIM_IRQHandler+0x19a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	2201      	movs	r2, #1
 80032d6:	4013      	ands	r3, r2
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d108      	bne.n	80032ee <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2202      	movs	r2, #2
 80032e2:	4252      	negs	r2, r2
 80032e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	0018      	movs	r0, r3
 80032ea:	f001 fd79 	bl	8004de0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	2280      	movs	r2, #128	; 0x80
 80032f6:	4013      	ands	r3, r2
 80032f8:	2b80      	cmp	r3, #128	; 0x80
 80032fa:	d10f      	bne.n	800331c <HAL_TIM_IRQHandler+0x1c8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	2280      	movs	r2, #128	; 0x80
 8003304:	4013      	ands	r3, r2
 8003306:	2b80      	cmp	r3, #128	; 0x80
 8003308:	d108      	bne.n	800331c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2281      	movs	r2, #129	; 0x81
 8003310:	4252      	negs	r2, r2
 8003312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	0018      	movs	r0, r3
 8003318:	f000 f94c 	bl	80035b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	691a      	ldr	r2, [r3, #16]
 8003322:	2380      	movs	r3, #128	; 0x80
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	401a      	ands	r2, r3
 8003328:	2380      	movs	r3, #128	; 0x80
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	429a      	cmp	r2, r3
 800332e:	d10e      	bne.n	800334e <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	2280      	movs	r2, #128	; 0x80
 8003338:	4013      	ands	r3, r2
 800333a:	2b80      	cmp	r3, #128	; 0x80
 800333c:	d107      	bne.n	800334e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a1c      	ldr	r2, [pc, #112]	; (80033b4 <HAL_TIM_IRQHandler+0x260>)
 8003344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	0018      	movs	r0, r3
 800334a:	f000 f93b 	bl	80035c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	2240      	movs	r2, #64	; 0x40
 8003356:	4013      	ands	r3, r2
 8003358:	2b40      	cmp	r3, #64	; 0x40
 800335a:	d10f      	bne.n	800337c <HAL_TIM_IRQHandler+0x228>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	2240      	movs	r2, #64	; 0x40
 8003364:	4013      	ands	r3, r2
 8003366:	2b40      	cmp	r3, #64	; 0x40
 8003368:	d108      	bne.n	800337c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2241      	movs	r2, #65	; 0x41
 8003370:	4252      	negs	r2, r2
 8003372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	0018      	movs	r0, r3
 8003378:	f000 f836 	bl	80033e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	2220      	movs	r2, #32
 8003384:	4013      	ands	r3, r2
 8003386:	2b20      	cmp	r3, #32
 8003388:	d10f      	bne.n	80033aa <HAL_TIM_IRQHandler+0x256>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	2220      	movs	r2, #32
 8003392:	4013      	ands	r3, r2
 8003394:	2b20      	cmp	r3, #32
 8003396:	d108      	bne.n	80033aa <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2221      	movs	r2, #33	; 0x21
 800339e:	4252      	negs	r2, r2
 80033a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	0018      	movs	r0, r3
 80033a6:	f000 f8fd 	bl	80035a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	46bd      	mov	sp, r7
 80033ae:	b002      	add	sp, #8
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	fffffeff 	.word	0xfffffeff

080033b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033c0:	46c0      	nop			; (mov r8, r8)
 80033c2:	46bd      	mov	sp, r7
 80033c4:	b002      	add	sp, #8
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033d0:	46c0      	nop			; (mov r8, r8)
 80033d2:	46bd      	mov	sp, r7
 80033d4:	b002      	add	sp, #8
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033e0:	46c0      	nop			; (mov r8, r8)
 80033e2:	46bd      	mov	sp, r7
 80033e4:	b002      	add	sp, #8
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033f0:	46c0      	nop			; (mov r8, r8)
 80033f2:	46bd      	mov	sp, r7
 80033f4:	b002      	add	sp, #8
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a34      	ldr	r2, [pc, #208]	; (80034dc <TIM_Base_SetConfig+0xe4>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d008      	beq.n	8003422 <TIM_Base_SetConfig+0x2a>
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	2380      	movs	r3, #128	; 0x80
 8003414:	05db      	lsls	r3, r3, #23
 8003416:	429a      	cmp	r2, r3
 8003418:	d003      	beq.n	8003422 <TIM_Base_SetConfig+0x2a>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a30      	ldr	r2, [pc, #192]	; (80034e0 <TIM_Base_SetConfig+0xe8>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d108      	bne.n	8003434 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2270      	movs	r2, #112	; 0x70
 8003426:	4393      	bics	r3, r2
 8003428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	4313      	orrs	r3, r2
 8003432:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a29      	ldr	r2, [pc, #164]	; (80034dc <TIM_Base_SetConfig+0xe4>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d018      	beq.n	800346e <TIM_Base_SetConfig+0x76>
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	2380      	movs	r3, #128	; 0x80
 8003440:	05db      	lsls	r3, r3, #23
 8003442:	429a      	cmp	r2, r3
 8003444:	d013      	beq.n	800346e <TIM_Base_SetConfig+0x76>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a25      	ldr	r2, [pc, #148]	; (80034e0 <TIM_Base_SetConfig+0xe8>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d00f      	beq.n	800346e <TIM_Base_SetConfig+0x76>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a24      	ldr	r2, [pc, #144]	; (80034e4 <TIM_Base_SetConfig+0xec>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d00b      	beq.n	800346e <TIM_Base_SetConfig+0x76>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a23      	ldr	r2, [pc, #140]	; (80034e8 <TIM_Base_SetConfig+0xf0>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d007      	beq.n	800346e <TIM_Base_SetConfig+0x76>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a22      	ldr	r2, [pc, #136]	; (80034ec <TIM_Base_SetConfig+0xf4>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d003      	beq.n	800346e <TIM_Base_SetConfig+0x76>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a21      	ldr	r2, [pc, #132]	; (80034f0 <TIM_Base_SetConfig+0xf8>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d108      	bne.n	8003480 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	4a20      	ldr	r2, [pc, #128]	; (80034f4 <TIM_Base_SetConfig+0xfc>)
 8003472:	4013      	ands	r3, r2
 8003474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	4313      	orrs	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2280      	movs	r2, #128	; 0x80
 8003484:	4393      	bics	r3, r2
 8003486:	001a      	movs	r2, r3
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	4313      	orrs	r3, r2
 800348e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	689a      	ldr	r2, [r3, #8]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a0c      	ldr	r2, [pc, #48]	; (80034dc <TIM_Base_SetConfig+0xe4>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d00b      	beq.n	80034c6 <TIM_Base_SetConfig+0xce>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a0d      	ldr	r2, [pc, #52]	; (80034e8 <TIM_Base_SetConfig+0xf0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d007      	beq.n	80034c6 <TIM_Base_SetConfig+0xce>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a0c      	ldr	r2, [pc, #48]	; (80034ec <TIM_Base_SetConfig+0xf4>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d003      	beq.n	80034c6 <TIM_Base_SetConfig+0xce>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a0b      	ldr	r2, [pc, #44]	; (80034f0 <TIM_Base_SetConfig+0xf8>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d103      	bne.n	80034ce <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	691a      	ldr	r2, [r3, #16]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	615a      	str	r2, [r3, #20]
}
 80034d4:	46c0      	nop			; (mov r8, r8)
 80034d6:	46bd      	mov	sp, r7
 80034d8:	b004      	add	sp, #16
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40012c00 	.word	0x40012c00
 80034e0:	40000400 	.word	0x40000400
 80034e4:	40002000 	.word	0x40002000
 80034e8:	40014000 	.word	0x40014000
 80034ec:	40014400 	.word	0x40014400
 80034f0:	40014800 	.word	0x40014800
 80034f4:	fffffcff 	.word	0xfffffcff

080034f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	223c      	movs	r2, #60	; 0x3c
 8003506:	5c9b      	ldrb	r3, [r3, r2]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d101      	bne.n	8003510 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800350c:	2302      	movs	r3, #2
 800350e:	e040      	b.n	8003592 <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	223c      	movs	r2, #60	; 0x3c
 8003514:	2101      	movs	r1, #1
 8003516:	5499      	strb	r1, [r3, r2]
  
  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	223d      	movs	r2, #61	; 0x3d
 800351c:	2102      	movs	r1, #2
 800351e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a19      	ldr	r2, [pc, #100]	; (800359c <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d108      	bne.n	800354c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	4a18      	ldr	r2, [pc, #96]	; (80035a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800353e:	4013      	ands	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	4313      	orrs	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2270      	movs	r2, #112	; 0x70
 8003550:	4393      	bics	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	4313      	orrs	r3, r2
 800355c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	2280      	movs	r2, #128	; 0x80
 8003562:	4393      	bics	r3, r2
 8003564:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	4313      	orrs	r3, r2
 800356e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	609a      	str	r2, [r3, #8]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	223d      	movs	r2, #61	; 0x3d
 8003584:	2101      	movs	r1, #1
 8003586:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	223c      	movs	r2, #60	; 0x3c
 800358c:	2100      	movs	r1, #0
 800358e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	0018      	movs	r0, r3
 8003594:	46bd      	mov	sp, r7
 8003596:	b004      	add	sp, #16
 8003598:	bd80      	pop	{r7, pc}
 800359a:	46c0      	nop			; (mov r8, r8)
 800359c:	40012c00 	.word	0x40012c00
 80035a0:	ff0fffff 	.word	0xff0fffff

080035a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035ac:	46c0      	nop			; (mov r8, r8)
 80035ae:	46bd      	mov	sp, r7
 80035b0:	b002      	add	sp, #8
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035bc:	46c0      	nop			; (mov r8, r8)
 80035be:	46bd      	mov	sp, r7
 80035c0:	b002      	add	sp, #8
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80035cc:	46c0      	nop			; (mov r8, r8)
 80035ce:	46bd      	mov	sp, r7
 80035d0:	b002      	add	sp, #8
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	0002      	movs	r2, r0
 80035dc:	1dbb      	adds	r3, r7, #6
 80035de:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80035e0:	2300      	movs	r3, #0
 80035e2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80035e4:	1dbb      	adds	r3, r7, #6
 80035e6:	2200      	movs	r2, #0
 80035e8:	5e9b      	ldrsh	r3, [r3, r2]
 80035ea:	2b84      	cmp	r3, #132	; 0x84
 80035ec:	d006      	beq.n	80035fc <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 80035ee:	1dbb      	adds	r3, r7, #6
 80035f0:	2200      	movs	r2, #0
 80035f2:	5e9a      	ldrsh	r2, [r3, r2]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	18d3      	adds	r3, r2, r3
 80035f8:	3303      	adds	r3, #3
 80035fa:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80035fc:	68fb      	ldr	r3, [r7, #12]
}
 80035fe:	0018      	movs	r0, r3
 8003600:	46bd      	mov	sp, r7
 8003602:	b004      	add	sp, #16
 8003604:	bd80      	pop	{r7, pc}

08003606 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800360a:	f000 fd19 	bl	8004040 <vTaskStartScheduler>
  
  return osOK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	0018      	movs	r0, r3
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003616:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003618:	b087      	sub	sp, #28
 800361a:	af02      	add	r7, sp, #8
 800361c:	6078      	str	r0, [r7, #4]
 800361e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685c      	ldr	r4, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800362c:	b29e      	uxth	r6, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2208      	movs	r2, #8
 8003632:	5e9b      	ldrsh	r3, [r3, r2]
 8003634:	0018      	movs	r0, r3
 8003636:	f7ff ffcd 	bl	80035d4 <makeFreeRtosPriority>
 800363a:	0001      	movs	r1, r0
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	230c      	movs	r3, #12
 8003640:	18fb      	adds	r3, r7, r3
 8003642:	9301      	str	r3, [sp, #4]
 8003644:	9100      	str	r1, [sp, #0]
 8003646:	0013      	movs	r3, r2
 8003648:	0032      	movs	r2, r6
 800364a:	0029      	movs	r1, r5
 800364c:	0020      	movs	r0, r4
 800364e:	f000 fb9d 	bl	8003d8c <xTaskCreate>
 8003652:	0003      	movs	r3, r0
 8003654:	2b01      	cmp	r3, #1
 8003656:	d001      	beq.n	800365c <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 8003658:	2300      	movs	r3, #0
 800365a:	e000      	b.n	800365e <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 800365c:	68fb      	ldr	r3, [r7, #12]
}
 800365e:	0018      	movs	r0, r3
 8003660:	46bd      	mov	sp, r7
 8003662:	b005      	add	sp, #20
 8003664:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003666 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <osDelay+0x16>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	e000      	b.n	800367e <osDelay+0x18>
 800367c:	2301      	movs	r3, #1
 800367e:	0018      	movs	r0, r3
 8003680:	f000 fcb8 	bl	8003ff4 <vTaskDelay>
  
  return osOK;
 8003684:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003686:	0018      	movs	r0, r3
 8003688:	46bd      	mov	sp, r7
 800368a:	b004      	add	sp, #16
 800368c:	bd80      	pop	{r7, pc}

0800368e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b082      	sub	sp, #8
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	3308      	adds	r3, #8
 800369a:	001a      	movs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	4252      	negs	r2, r2
 80036a6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3308      	adds	r3, #8
 80036ac:	001a      	movs	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	3308      	adds	r3, #8
 80036b6:	001a      	movs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80036c2:	46c0      	nop			; (mov r8, r8)
 80036c4:	46bd      	mov	sp, r7
 80036c6:	b002      	add	sp, #8
 80036c8:	bd80      	pop	{r7, pc}

080036ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b082      	sub	sp, #8
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80036d8:	46c0      	nop			; (mov r8, r8)
 80036da:	46bd      	mov	sp, r7
 80036dc:	b002      	add	sp, #8
 80036de:	bd80      	pop	{r7, pc}

080036e0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	689a      	ldr	r2, [r3, #8]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	1c5a      	adds	r2, r3, #1
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	601a      	str	r2, [r3, #0]
}
 800371c:	46c0      	nop			; (mov r8, r8)
 800371e:	46bd      	mov	sp, r7
 8003720:	b004      	add	sp, #16
 8003722:	bd80      	pop	{r7, pc}

08003724 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	3301      	adds	r3, #1
 8003738:	d103      	bne.n	8003742 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	e00c      	b.n	800375c <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	3308      	adds	r3, #8
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	e002      	b.n	8003750 <vListInsert+0x2c>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	429a      	cmp	r2, r3
 800375a:	d9f6      	bls.n	800374a <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	1c5a      	adds	r2, r3, #1
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	601a      	str	r2, [r3, #0]
}
 8003788:	46c0      	nop			; (mov r8, r8)
 800378a:	46bd      	mov	sp, r7
 800378c:	b004      	add	sp, #16
 800378e:	bd80      	pop	{r7, pc}

08003790 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	6892      	ldr	r2, [r2, #8]
 80037a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6852      	ldr	r2, [r2, #4]
 80037b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d103      	bne.n	80037c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	1e5a      	subs	r2, r3, #1
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
}
 80037d8:	0018      	movs	r0, r3
 80037da:	46bd      	mov	sp, r7
 80037dc:	b004      	add	sp, #16
 80037de:	bd80      	pop	{r7, pc}

080037e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	3b04      	subs	r3, #4
 80037f0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2280      	movs	r2, #128	; 0x80
 80037f6:	0452      	lsls	r2, r2, #17
 80037f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	3b04      	subs	r3, #4
 80037fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	3b04      	subs	r3, #4
 800380a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800380c:	4a08      	ldr	r2, [pc, #32]	; (8003830 <pxPortInitialiseStack+0x50>)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	3b14      	subs	r3, #20
 8003816:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	3b20      	subs	r3, #32
 8003822:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003824:	68fb      	ldr	r3, [r7, #12]
}
 8003826:	0018      	movs	r0, r3
 8003828:	46bd      	mov	sp, r7
 800382a:	b004      	add	sp, #16
 800382c:	bd80      	pop	{r7, pc}
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	08003835 	.word	0x08003835

08003834 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800383a:	2300      	movs	r3, #0
 800383c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800383e:	4b07      	ldr	r3, [pc, #28]	; (800385c <prvTaskExitError+0x28>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	3301      	adds	r3, #1
 8003844:	d001      	beq.n	800384a <prvTaskExitError+0x16>
 8003846:	b672      	cpsid	i
 8003848:	e7fe      	b.n	8003848 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800384a:	b672      	cpsid	i
	while( ulDummy == 0 )
 800384c:	46c0      	nop			; (mov r8, r8)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0fc      	beq.n	800384e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003854:	46c0      	nop			; (mov r8, r8)
 8003856:	46bd      	mov	sp, r7
 8003858:	b002      	add	sp, #8
 800385a:	bd80      	pop	{r7, pc}
 800385c:	20000004 	.word	0x20000004

08003860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8003864:	46c0      	nop			; (mov r8, r8)
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	0000      	movs	r0, r0
 800386c:	0000      	movs	r0, r0
	...

08003870 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8003870:	4a0b      	ldr	r2, [pc, #44]	; (80038a0 <pxCurrentTCBConst2>)
 8003872:	6813      	ldr	r3, [r2, #0]
 8003874:	6818      	ldr	r0, [r3, #0]
 8003876:	3020      	adds	r0, #32
 8003878:	f380 8809 	msr	PSP, r0
 800387c:	2002      	movs	r0, #2
 800387e:	f380 8814 	msr	CONTROL, r0
 8003882:	f3bf 8f6f 	isb	sy
 8003886:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8003888:	46ae      	mov	lr, r5
 800388a:	bc08      	pop	{r3}
 800388c:	bc04      	pop	{r2}
 800388e:	b662      	cpsie	i
 8003890:	4718      	bx	r3
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	46c0      	nop			; (mov r8, r8)
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	46c0      	nop			; (mov r8, r8)
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	46c0      	nop			; (mov r8, r8)
 800389e:	46c0      	nop			; (mov r8, r8)

080038a0 <pxCurrentTCBConst2>:
 80038a0:	20000c40 	.word	0x20000c40
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80038a4:	46c0      	nop			; (mov r8, r8)
 80038a6:	46c0      	nop			; (mov r8, r8)

080038a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80038ac:	4b0e      	ldr	r3, [pc, #56]	; (80038e8 <xPortStartScheduler+0x40>)
 80038ae:	4a0e      	ldr	r2, [pc, #56]	; (80038e8 <xPortStartScheduler+0x40>)
 80038b0:	6812      	ldr	r2, [r2, #0]
 80038b2:	21ff      	movs	r1, #255	; 0xff
 80038b4:	0409      	lsls	r1, r1, #16
 80038b6:	430a      	orrs	r2, r1
 80038b8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80038ba:	4b0b      	ldr	r3, [pc, #44]	; (80038e8 <xPortStartScheduler+0x40>)
 80038bc:	4a0a      	ldr	r2, [pc, #40]	; (80038e8 <xPortStartScheduler+0x40>)
 80038be:	6812      	ldr	r2, [r2, #0]
 80038c0:	21ff      	movs	r1, #255	; 0xff
 80038c2:	0609      	lsls	r1, r1, #24
 80038c4:	430a      	orrs	r2, r1
 80038c6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80038c8:	f000 f898 	bl	80039fc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80038cc:	4b07      	ldr	r3, [pc, #28]	; (80038ec <xPortStartScheduler+0x44>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80038d2:	f7ff ffcd 	bl	8003870 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80038d6:	f000 fd39 	bl	800434c <vTaskSwitchContext>
	prvTaskExitError();
 80038da:	f7ff ffab 	bl	8003834 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	0018      	movs	r0, r3
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	e000ed20 	.word	0xe000ed20
 80038ec:	20000004 	.word	0x20000004

080038f0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80038f4:	4b05      	ldr	r3, [pc, #20]	; (800390c <vPortYield+0x1c>)
 80038f6:	2280      	movs	r2, #128	; 0x80
 80038f8:	0552      	lsls	r2, r2, #21
 80038fa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80038fc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003900:	f3bf 8f6f 	isb	sy
}
 8003904:	46c0      	nop			; (mov r8, r8)
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	46c0      	nop			; (mov r8, r8)
 800390c:	e000ed04 	.word	0xe000ed04

08003910 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8003914:	b672      	cpsid	i
    uxCriticalNesting++;
 8003916:	4b06      	ldr	r3, [pc, #24]	; (8003930 <vPortEnterCritical+0x20>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	4b04      	ldr	r3, [pc, #16]	; (8003930 <vPortEnterCritical+0x20>)
 800391e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8003920:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003924:	f3bf 8f6f 	isb	sy
}
 8003928:	46c0      	nop			; (mov r8, r8)
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	20000004 	.word	0x20000004

08003934 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003938:	4b09      	ldr	r3, [pc, #36]	; (8003960 <vPortExitCritical+0x2c>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d101      	bne.n	8003944 <vPortExitCritical+0x10>
 8003940:	b672      	cpsid	i
 8003942:	e7fe      	b.n	8003942 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8003944:	4b06      	ldr	r3, [pc, #24]	; (8003960 <vPortExitCritical+0x2c>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	1e5a      	subs	r2, r3, #1
 800394a:	4b05      	ldr	r3, [pc, #20]	; (8003960 <vPortExitCritical+0x2c>)
 800394c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800394e:	4b04      	ldr	r3, [pc, #16]	; (8003960 <vPortExitCritical+0x2c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d100      	bne.n	8003958 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8003956:	b662      	cpsie	i
    }
}
 8003958:	46c0      	nop			; (mov r8, r8)
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	46c0      	nop			; (mov r8, r8)
 8003960:	20000004 	.word	0x20000004

08003964 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8003964:	f3ef 8010 	mrs	r0, PRIMASK
 8003968:	b672      	cpsid	i
 800396a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800396c:	46c0      	nop			; (mov r8, r8)
 800396e:	0018      	movs	r0, r3

08003970 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8003970:	f380 8810 	msr	PRIMASK, r0
 8003974:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8003976:	46c0      	nop			; (mov r8, r8)
	...

08003980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003980:	f3ef 8009 	mrs	r0, PSP
 8003984:	4b0e      	ldr	r3, [pc, #56]	; (80039c0 <pxCurrentTCBConst>)
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	3820      	subs	r0, #32
 800398a:	6010      	str	r0, [r2, #0]
 800398c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800398e:	4644      	mov	r4, r8
 8003990:	464d      	mov	r5, r9
 8003992:	4656      	mov	r6, sl
 8003994:	465f      	mov	r7, fp
 8003996:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8003998:	b508      	push	{r3, lr}
 800399a:	b672      	cpsid	i
 800399c:	f000 fcd6 	bl	800434c <vTaskSwitchContext>
 80039a0:	b662      	cpsie	i
 80039a2:	bc0c      	pop	{r2, r3}
 80039a4:	6811      	ldr	r1, [r2, #0]
 80039a6:	6808      	ldr	r0, [r1, #0]
 80039a8:	3010      	adds	r0, #16
 80039aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80039ac:	46a0      	mov	r8, r4
 80039ae:	46a9      	mov	r9, r5
 80039b0:	46b2      	mov	sl, r6
 80039b2:	46bb      	mov	fp, r7
 80039b4:	f380 8809 	msr	PSP, r0
 80039b8:	3820      	subs	r0, #32
 80039ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80039bc:	4718      	bx	r3
 80039be:	46c0      	nop			; (mov r8, r8)

080039c0 <pxCurrentTCBConst>:
 80039c0:	20000c40 	.word	0x20000c40
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80039c4:	46c0      	nop			; (mov r8, r8)
 80039c6:	46c0      	nop			; (mov r8, r8)

080039c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80039ce:	f7ff ffc9 	bl	8003964 <ulSetInterruptMaskFromISR>
 80039d2:	0003      	movs	r3, r0
 80039d4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80039d6:	f000 fc05 	bl	80041e4 <xTaskIncrementTick>
 80039da:	1e03      	subs	r3, r0, #0
 80039dc:	d003      	beq.n	80039e6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80039de:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <SysTick_Handler+0x30>)
 80039e0:	2280      	movs	r2, #128	; 0x80
 80039e2:	0552      	lsls	r2, r2, #21
 80039e4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	0018      	movs	r0, r3
 80039ea:	f7ff ffc1 	bl	8003970 <vClearInterruptMaskFromISR>
}
 80039ee:	46c0      	nop			; (mov r8, r8)
 80039f0:	46bd      	mov	sp, r7
 80039f2:	b002      	add	sp, #8
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	46c0      	nop			; (mov r8, r8)
 80039f8:	e000ed04 	.word	0xe000ed04

080039fc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 80039fc:	b5b0      	push	{r4, r5, r7, lr}
 80039fe:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8003a00:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <prvSetupTimerInterrupt+0x34>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8003a06:	4b0b      	ldr	r3, [pc, #44]	; (8003a34 <prvSetupTimerInterrupt+0x38>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003a0c:	4c0a      	ldr	r4, [pc, #40]	; (8003a38 <prvSetupTimerInterrupt+0x3c>)
 8003a0e:	4b0b      	ldr	r3, [pc, #44]	; (8003a3c <prvSetupTimerInterrupt+0x40>)
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	23fa      	movs	r3, #250	; 0xfa
 8003a14:	0099      	lsls	r1, r3, #2
 8003a16:	0010      	movs	r0, r2
 8003a18:	f7fc fb76 	bl	8000108 <__udivsi3>
 8003a1c:	0003      	movs	r3, r0
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	6023      	str	r3, [r4, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8003a22:	4b03      	ldr	r3, [pc, #12]	; (8003a30 <prvSetupTimerInterrupt+0x34>)
 8003a24:	2207      	movs	r2, #7
 8003a26:	601a      	str	r2, [r3, #0]
}
 8003a28:	46c0      	nop			; (mov r8, r8)
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bdb0      	pop	{r4, r5, r7, pc}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	e000e010 	.word	0xe000e010
 8003a34:	e000e018 	.word	0xe000e018
 8003a38:	e000e014 	.word	0xe000e014
 8003a3c:	20000008 	.word	0x20000008

08003a40 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8003a4c:	f000 fb32 	bl	80040b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003a50:	4b49      	ldr	r3, [pc, #292]	; (8003b78 <pvPortMalloc+0x138>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003a58:	f000 f8e0 	bl	8003c1c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003a5c:	4b47      	ldr	r3, [pc, #284]	; (8003b7c <pvPortMalloc+0x13c>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	4013      	ands	r3, r2
 8003a64:	d000      	beq.n	8003a68 <pvPortMalloc+0x28>
 8003a66:	e079      	b.n	8003b5c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d012      	beq.n	8003a94 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8003a6e:	2208      	movs	r2, #8
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	189b      	adds	r3, r3, r2
 8003a74:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2207      	movs	r2, #7
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	d00a      	beq.n	8003a94 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2207      	movs	r2, #7
 8003a82:	4393      	bics	r3, r2
 8003a84:	3308      	adds	r3, #8
 8003a86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2207      	movs	r2, #7
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	d001      	beq.n	8003a94 <pvPortMalloc+0x54>
 8003a90:	b672      	cpsid	i
 8003a92:	e7fe      	b.n	8003a92 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d060      	beq.n	8003b5c <pvPortMalloc+0x11c>
 8003a9a:	4b39      	ldr	r3, [pc, #228]	; (8003b80 <pvPortMalloc+0x140>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d85b      	bhi.n	8003b5c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003aa4:	4b37      	ldr	r3, [pc, #220]	; (8003b84 <pvPortMalloc+0x144>)
 8003aa6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8003aa8:	4b36      	ldr	r3, [pc, #216]	; (8003b84 <pvPortMalloc+0x144>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003aae:	e004      	b.n	8003aba <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d203      	bcs.n	8003acc <pvPortMalloc+0x8c>
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1f1      	bne.n	8003ab0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003acc:	4b2a      	ldr	r3, [pc, #168]	; (8003b78 <pvPortMalloc+0x138>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d042      	beq.n	8003b5c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2208      	movs	r2, #8
 8003adc:	189b      	adds	r3, r3, r2
 8003ade:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	1ad2      	subs	r2, r2, r3
 8003af0:	2308      	movs	r3, #8
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d916      	bls.n	8003b26 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	18d3      	adds	r3, r2, r3
 8003afe:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2207      	movs	r2, #7
 8003b04:	4013      	ands	r3, r2
 8003b06:	d001      	beq.n	8003b0c <pvPortMalloc+0xcc>
 8003b08:	b672      	cpsid	i
 8003b0a:	e7fe      	b.n	8003b0a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	1ad2      	subs	r2, r2, r3
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	0018      	movs	r0, r3
 8003b22:	f000 f8db 	bl	8003cdc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003b26:	4b16      	ldr	r3, [pc, #88]	; (8003b80 <pvPortMalloc+0x140>)
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	1ad2      	subs	r2, r2, r3
 8003b30:	4b13      	ldr	r3, [pc, #76]	; (8003b80 <pvPortMalloc+0x140>)
 8003b32:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003b34:	4b12      	ldr	r3, [pc, #72]	; (8003b80 <pvPortMalloc+0x140>)
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	4b13      	ldr	r3, [pc, #76]	; (8003b88 <pvPortMalloc+0x148>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d203      	bcs.n	8003b48 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003b40:	4b0f      	ldr	r3, [pc, #60]	; (8003b80 <pvPortMalloc+0x140>)
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	4b10      	ldr	r3, [pc, #64]	; (8003b88 <pvPortMalloc+0x148>)
 8003b46:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <pvPortMalloc+0x13c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	431a      	orrs	r2, r3
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003b5c:	f000 fab6 	bl	80040cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2207      	movs	r2, #7
 8003b64:	4013      	ands	r3, r2
 8003b66:	d001      	beq.n	8003b6c <pvPortMalloc+0x12c>
 8003b68:	b672      	cpsid	i
 8003b6a:	e7fe      	b.n	8003b6a <pvPortMalloc+0x12a>
	return pvReturn;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
}
 8003b6e:	0018      	movs	r0, r3
 8003b70:	46bd      	mov	sp, r7
 8003b72:	b006      	add	sp, #24
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	46c0      	nop			; (mov r8, r8)
 8003b78:	20000c30 	.word	0x20000c30
 8003b7c:	20000c3c 	.word	0x20000c3c
 8003b80:	20000c34 	.word	0x20000c34
 8003b84:	20000c28 	.word	0x20000c28
 8003b88:	20000c38 	.word	0x20000c38

08003b8c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d035      	beq.n	8003c0a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003b9e:	2308      	movs	r3, #8
 8003ba0:	425b      	negs	r3, r3
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	18d3      	adds	r3, r2, r3
 8003ba6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	4b18      	ldr	r3, [pc, #96]	; (8003c14 <vPortFree+0x88>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	d101      	bne.n	8003bbc <vPortFree+0x30>
 8003bb8:	b672      	cpsid	i
 8003bba:	e7fe      	b.n	8003bba <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <vPortFree+0x3c>
 8003bc4:	b672      	cpsid	i
 8003bc6:	e7fe      	b.n	8003bc6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	4b11      	ldr	r3, [pc, #68]	; (8003c14 <vPortFree+0x88>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	d01a      	beq.n	8003c0a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d116      	bne.n	8003c0a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	4b0c      	ldr	r3, [pc, #48]	; (8003c14 <vPortFree+0x88>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	43db      	mvns	r3, r3
 8003be6:	401a      	ands	r2, r3
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003bec:	f000 fa62 	bl	80040b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	4b08      	ldr	r3, [pc, #32]	; (8003c18 <vPortFree+0x8c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	18d2      	adds	r2, r2, r3
 8003bfa:	4b07      	ldr	r3, [pc, #28]	; (8003c18 <vPortFree+0x8c>)
 8003bfc:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	0018      	movs	r0, r3
 8003c02:	f000 f86b 	bl	8003cdc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003c06:	f000 fa61 	bl	80040cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003c0a:	46c0      	nop			; (mov r8, r8)
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	b004      	add	sp, #16
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	46c0      	nop			; (mov r8, r8)
 8003c14:	20000c3c 	.word	0x20000c3c
 8003c18:	20000c34 	.word	0x20000c34

08003c1c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003c22:	23c0      	movs	r3, #192	; 0xc0
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003c28:	4b26      	ldr	r3, [pc, #152]	; (8003cc4 <prvHeapInit+0xa8>)
 8003c2a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2207      	movs	r2, #7
 8003c30:	4013      	ands	r3, r2
 8003c32:	d00c      	beq.n	8003c4e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	3307      	adds	r3, #7
 8003c38:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2207      	movs	r2, #7
 8003c3e:	4393      	bics	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	1ad2      	subs	r2, r2, r3
 8003c48:	4b1e      	ldr	r3, [pc, #120]	; (8003cc4 <prvHeapInit+0xa8>)
 8003c4a:	18d3      	adds	r3, r2, r3
 8003c4c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003c52:	4b1d      	ldr	r3, [pc, #116]	; (8003cc8 <prvHeapInit+0xac>)
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003c58:	4b1b      	ldr	r3, [pc, #108]	; (8003cc8 <prvHeapInit+0xac>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	18d3      	adds	r3, r2, r3
 8003c64:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003c66:	2208      	movs	r2, #8
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	1a9b      	subs	r3, r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2207      	movs	r2, #7
 8003c72:	4393      	bics	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	4b14      	ldr	r3, [pc, #80]	; (8003ccc <prvHeapInit+0xb0>)
 8003c7a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8003c7c:	4b13      	ldr	r3, [pc, #76]	; (8003ccc <prvHeapInit+0xb0>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2200      	movs	r2, #0
 8003c82:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003c84:	4b11      	ldr	r3, [pc, #68]	; (8003ccc <prvHeapInit+0xb0>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	1ad2      	subs	r2, r2, r3
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003c9a:	4b0c      	ldr	r3, [pc, #48]	; (8003ccc <prvHeapInit+0xb0>)
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	4b0a      	ldr	r3, [pc, #40]	; (8003cd0 <prvHeapInit+0xb4>)
 8003ca8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	4b09      	ldr	r3, [pc, #36]	; (8003cd4 <prvHeapInit+0xb8>)
 8003cb0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003cb2:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <prvHeapInit+0xbc>)
 8003cb4:	2280      	movs	r2, #128	; 0x80
 8003cb6:	0612      	lsls	r2, r2, #24
 8003cb8:	601a      	str	r2, [r3, #0]
}
 8003cba:	46c0      	nop			; (mov r8, r8)
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	b004      	add	sp, #16
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	46c0      	nop			; (mov r8, r8)
 8003cc4:	20000028 	.word	0x20000028
 8003cc8:	20000c28 	.word	0x20000c28
 8003ccc:	20000c30 	.word	0x20000c30
 8003cd0:	20000c38 	.word	0x20000c38
 8003cd4:	20000c34 	.word	0x20000c34
 8003cd8:	20000c3c 	.word	0x20000c3c

08003cdc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003ce4:	4b27      	ldr	r3, [pc, #156]	; (8003d84 <prvInsertBlockIntoFreeList+0xa8>)
 8003ce6:	60fb      	str	r3, [r7, #12]
 8003ce8:	e002      	b.n	8003cf0 <prvInsertBlockIntoFreeList+0x14>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d3f7      	bcc.n	8003cea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	18d2      	adds	r2, r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d108      	bne.n	8003d1e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	18d2      	adds	r2, r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	18d2      	adds	r2, r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d118      	bne.n	8003d64 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	4b14      	ldr	r3, [pc, #80]	; (8003d88 <prvInsertBlockIntoFreeList+0xac>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d00d      	beq.n	8003d5a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	18d2      	adds	r2, r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	e008      	b.n	8003d6c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003d5a:	4b0b      	ldr	r3, [pc, #44]	; (8003d88 <prvInsertBlockIntoFreeList+0xac>)
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	e003      	b.n	8003d6c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d002      	beq.n	8003d7a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d7a:	46c0      	nop			; (mov r8, r8)
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	b004      	add	sp, #16
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	46c0      	nop			; (mov r8, r8)
 8003d84:	20000c28 	.word	0x20000c28
 8003d88:	20000c30 	.word	0x20000c30

08003d8c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003d8c:	b590      	push	{r4, r7, lr}
 8003d8e:	b08d      	sub	sp, #52	; 0x34
 8003d90:	af04      	add	r7, sp, #16
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	603b      	str	r3, [r7, #0]
 8003d98:	1dbb      	adds	r3, r7, #6
 8003d9a:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d9c:	1dbb      	adds	r3, r7, #6
 8003d9e:	881b      	ldrh	r3, [r3, #0]
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	0018      	movs	r0, r3
 8003da4:	f7ff fe4c 	bl	8003a40 <pvPortMalloc>
 8003da8:	0003      	movs	r3, r0
 8003daa:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d010      	beq.n	8003dd4 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003db2:	2060      	movs	r0, #96	; 0x60
 8003db4:	f7ff fe44 	bl	8003a40 <pvPortMalloc>
 8003db8:	0003      	movs	r3, r0
 8003dba:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	631a      	str	r2, [r3, #48]	; 0x30
 8003dc8:	e006      	b.n	8003dd8 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	0018      	movs	r0, r3
 8003dce:	f7ff fedd 	bl	8003b8c <vPortFree>
 8003dd2:	e001      	b.n	8003dd8 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d016      	beq.n	8003e0c <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003dde:	1dbb      	adds	r3, r7, #6
 8003de0:	881a      	ldrh	r2, [r3, #0]
 8003de2:	683c      	ldr	r4, [r7, #0]
 8003de4:	68b9      	ldr	r1, [r7, #8]
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	2300      	movs	r3, #0
 8003dea:	9303      	str	r3, [sp, #12]
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	9302      	str	r3, [sp, #8]
 8003df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df2:	9301      	str	r3, [sp, #4]
 8003df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	0023      	movs	r3, r4
 8003dfa:	f000 f80f 	bl	8003e1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	0018      	movs	r0, r3
 8003e02:	f000 f88f 	bl	8003f24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003e06:	2301      	movs	r3, #1
 8003e08:	61bb      	str	r3, [r7, #24]
 8003e0a:	e002      	b.n	8003e12 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	425b      	negs	r3, r3
 8003e10:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003e12:	69bb      	ldr	r3, [r7, #24]
	}
 8003e14:	0018      	movs	r0, r3
 8003e16:	46bd      	mov	sp, r7
 8003e18:	b009      	add	sp, #36	; 0x24
 8003e1a:	bd90      	pop	{r4, r7, pc}

08003e1c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
 8003e28:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	001a      	movs	r2, r3
 8003e34:	21a5      	movs	r1, #165	; 0xa5
 8003e36:	f001 f9e5 	bl	8005204 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4937      	ldr	r1, [pc, #220]	; (8003f20 <prvInitialiseNewTask+0x104>)
 8003e42:	468c      	mov	ip, r1
 8003e44:	4463      	add	r3, ip
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	18d3      	adds	r3, r2, r3
 8003e4a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	2207      	movs	r2, #7
 8003e50:	4393      	bics	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	2207      	movs	r2, #7
 8003e58:	4013      	ands	r3, r2
 8003e5a:	d001      	beq.n	8003e60 <prvInitialiseNewTask+0x44>
 8003e5c:	b672      	cpsid	i
 8003e5e:	e7fe      	b.n	8003e5e <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e60:	2300      	movs	r3, #0
 8003e62:	617b      	str	r3, [r7, #20]
 8003e64:	e013      	b.n	8003e8e <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	18d3      	adds	r3, r2, r3
 8003e6c:	7818      	ldrb	r0, [r3, #0]
 8003e6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e70:	2134      	movs	r1, #52	; 0x34
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	18d3      	adds	r3, r2, r3
 8003e76:	185b      	adds	r3, r3, r1
 8003e78:	1c02      	adds	r2, r0, #0
 8003e7a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	18d3      	adds	r3, r2, r3
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d006      	beq.n	8003e96 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	617b      	str	r3, [r7, #20]
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	2b0f      	cmp	r3, #15
 8003e92:	d9e8      	bls.n	8003e66 <prvInitialiseNewTask+0x4a>
 8003e94:	e000      	b.n	8003e98 <prvInitialiseNewTask+0x7c>
		{
			break;
 8003e96:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9a:	2243      	movs	r2, #67	; 0x43
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
 8003ea2:	2b06      	cmp	r3, #6
 8003ea4:	d901      	bls.n	8003eaa <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ea6:	2306      	movs	r3, #6
 8003ea8:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eac:	6a3a      	ldr	r2, [r7, #32]
 8003eae:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb2:	6a3a      	ldr	r2, [r7, #32]
 8003eb4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb8:	2200      	movs	r2, #0
 8003eba:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	f7ff fc02 	bl	80036ca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec8:	3318      	adds	r3, #24
 8003eca:	0018      	movs	r0, r3
 8003ecc:	f7ff fbfd 	bl	80036ca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ed4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	2207      	movs	r2, #7
 8003eda:	1ad2      	subs	r2, r2, r3
 8003edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ede:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ee4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8003ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee8:	2200      	movs	r2, #0
 8003eea:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eee:	2200      	movs	r2, #0
 8003ef0:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef4:	225c      	movs	r2, #92	; 0x5c
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	68f9      	ldr	r1, [r7, #12]
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	0018      	movs	r0, r3
 8003f02:	f7ff fc6d 	bl	80037e0 <pxPortInitialiseStack>
 8003f06:	0002      	movs	r2, r0
 8003f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <prvInitialiseNewTask+0xfc>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f16:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f18:	46c0      	nop			; (mov r8, r8)
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	b006      	add	sp, #24
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	3fffffff 	.word	0x3fffffff

08003f24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003f2c:	f7ff fcf0 	bl	8003910 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003f30:	4b2a      	ldr	r3, [pc, #168]	; (8003fdc <prvAddNewTaskToReadyList+0xb8>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	1c5a      	adds	r2, r3, #1
 8003f36:	4b29      	ldr	r3, [pc, #164]	; (8003fdc <prvAddNewTaskToReadyList+0xb8>)
 8003f38:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003f3a:	4b29      	ldr	r3, [pc, #164]	; (8003fe0 <prvAddNewTaskToReadyList+0xbc>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d109      	bne.n	8003f56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003f42:	4b27      	ldr	r3, [pc, #156]	; (8003fe0 <prvAddNewTaskToReadyList+0xbc>)
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f48:	4b24      	ldr	r3, [pc, #144]	; (8003fdc <prvAddNewTaskToReadyList+0xb8>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d110      	bne.n	8003f72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003f50:	f000 fa7c 	bl	800444c <prvInitialiseTaskLists>
 8003f54:	e00d      	b.n	8003f72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003f56:	4b23      	ldr	r3, [pc, #140]	; (8003fe4 <prvAddNewTaskToReadyList+0xc0>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d109      	bne.n	8003f72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f5e:	4b20      	ldr	r3, [pc, #128]	; (8003fe0 <prvAddNewTaskToReadyList+0xbc>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d802      	bhi.n	8003f72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003f6c:	4b1c      	ldr	r3, [pc, #112]	; (8003fe0 <prvAddNewTaskToReadyList+0xbc>)
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003f72:	4b1d      	ldr	r3, [pc, #116]	; (8003fe8 <prvAddNewTaskToReadyList+0xc4>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	1c5a      	adds	r2, r3, #1
 8003f78:	4b1b      	ldr	r3, [pc, #108]	; (8003fe8 <prvAddNewTaskToReadyList+0xc4>)
 8003f7a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003f7c:	4b1a      	ldr	r3, [pc, #104]	; (8003fe8 <prvAddNewTaskToReadyList+0xc4>)
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f88:	4b18      	ldr	r3, [pc, #96]	; (8003fec <prvAddNewTaskToReadyList+0xc8>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d903      	bls.n	8003f98 <prvAddNewTaskToReadyList+0x74>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f94:	4b15      	ldr	r3, [pc, #84]	; (8003fec <prvAddNewTaskToReadyList+0xc8>)
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f9c:	0013      	movs	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	189b      	adds	r3, r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4a12      	ldr	r2, [pc, #72]	; (8003ff0 <prvAddNewTaskToReadyList+0xcc>)
 8003fa6:	189a      	adds	r2, r3, r2
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3304      	adds	r3, #4
 8003fac:	0019      	movs	r1, r3
 8003fae:	0010      	movs	r0, r2
 8003fb0:	f7ff fb96 	bl	80036e0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003fb4:	f7ff fcbe 	bl	8003934 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003fb8:	4b0a      	ldr	r3, [pc, #40]	; (8003fe4 <prvAddNewTaskToReadyList+0xc0>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d008      	beq.n	8003fd2 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003fc0:	4b07      	ldr	r3, [pc, #28]	; (8003fe0 <prvAddNewTaskToReadyList+0xbc>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d201      	bcs.n	8003fd2 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003fce:	f7ff fc8f 	bl	80038f0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fd2:	46c0      	nop			; (mov r8, r8)
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	b002      	add	sp, #8
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	46c0      	nop			; (mov r8, r8)
 8003fdc:	20000d40 	.word	0x20000d40
 8003fe0:	20000c40 	.word	0x20000c40
 8003fe4:	20000d4c 	.word	0x20000d4c
 8003fe8:	20000d5c 	.word	0x20000d5c
 8003fec:	20000d48 	.word	0x20000d48
 8003ff0:	20000c44 	.word	0x20000c44

08003ff4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d010      	beq.n	8004028 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004006:	4b0d      	ldr	r3, [pc, #52]	; (800403c <vTaskDelay+0x48>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <vTaskDelay+0x1e>
 800400e:	b672      	cpsid	i
 8004010:	e7fe      	b.n	8004010 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8004012:	f000 f84f 	bl	80040b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2100      	movs	r1, #0
 800401a:	0018      	movs	r0, r3
 800401c:	f000 fabe 	bl	800459c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004020:	f000 f854 	bl	80040cc <xTaskResumeAll>
 8004024:	0003      	movs	r3, r0
 8004026:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800402e:	f7ff fc5f 	bl	80038f0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004032:	46c0      	nop			; (mov r8, r8)
 8004034:	46bd      	mov	sp, r7
 8004036:	b004      	add	sp, #16
 8004038:	bd80      	pop	{r7, pc}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	20000d68 	.word	0x20000d68

08004040 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004046:	4914      	ldr	r1, [pc, #80]	; (8004098 <vTaskStartScheduler+0x58>)
 8004048:	4814      	ldr	r0, [pc, #80]	; (800409c <vTaskStartScheduler+0x5c>)
 800404a:	4b15      	ldr	r3, [pc, #84]	; (80040a0 <vTaskStartScheduler+0x60>)
 800404c:	9301      	str	r3, [sp, #4]
 800404e:	2300      	movs	r3, #0
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	2300      	movs	r3, #0
 8004054:	2280      	movs	r2, #128	; 0x80
 8004056:	f7ff fe99 	bl	8003d8c <xTaskCreate>
 800405a:	0003      	movs	r3, r0
 800405c:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d110      	bne.n	8004086 <vTaskStartScheduler+0x46>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8004064:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004066:	4b0f      	ldr	r3, [pc, #60]	; (80040a4 <vTaskStartScheduler+0x64>)
 8004068:	2201      	movs	r2, #1
 800406a:	4252      	negs	r2, r2
 800406c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800406e:	4b0e      	ldr	r3, [pc, #56]	; (80040a8 <vTaskStartScheduler+0x68>)
 8004070:	2201      	movs	r2, #1
 8004072:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004074:	4b0d      	ldr	r3, [pc, #52]	; (80040ac <vTaskStartScheduler+0x6c>)
 8004076:	2200      	movs	r2, #0
 8004078:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800407a:	4b0d      	ldr	r3, [pc, #52]	; (80040b0 <vTaskStartScheduler+0x70>)
 800407c:	2200      	movs	r2, #0
 800407e:	601a      	str	r2, [r3, #0]

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004080:	f7ff fc12 	bl	80038a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004084:	e004      	b.n	8004090 <vTaskStartScheduler+0x50>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	3301      	adds	r3, #1
 800408a:	d101      	bne.n	8004090 <vTaskStartScheduler+0x50>
 800408c:	b672      	cpsid	i
 800408e:	e7fe      	b.n	800408e <vTaskStartScheduler+0x4e>
}
 8004090:	46c0      	nop			; (mov r8, r8)
 8004092:	46bd      	mov	sp, r7
 8004094:	b002      	add	sp, #8
 8004096:	bd80      	pop	{r7, pc}
 8004098:	0800522c 	.word	0x0800522c
 800409c:	0800442d 	.word	0x0800442d
 80040a0:	20000d64 	.word	0x20000d64
 80040a4:	20000d60 	.word	0x20000d60
 80040a8:	20000d4c 	.word	0x20000d4c
 80040ac:	20000d44 	.word	0x20000d44
 80040b0:	20000d74 	.word	0x20000d74

080040b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80040b8:	4b03      	ldr	r3, [pc, #12]	; (80040c8 <vTaskSuspendAll+0x14>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	1c5a      	adds	r2, r3, #1
 80040be:	4b02      	ldr	r3, [pc, #8]	; (80040c8 <vTaskSuspendAll+0x14>)
 80040c0:	601a      	str	r2, [r3, #0]
}
 80040c2:	46c0      	nop			; (mov r8, r8)
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	20000d68 	.word	0x20000d68

080040cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80040d2:	2300      	movs	r3, #0
 80040d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80040d6:	2300      	movs	r3, #0
 80040d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80040da:	4b3a      	ldr	r3, [pc, #232]	; (80041c4 <xTaskResumeAll+0xf8>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <xTaskResumeAll+0x1a>
 80040e2:	b672      	cpsid	i
 80040e4:	e7fe      	b.n	80040e4 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80040e6:	f7ff fc13 	bl	8003910 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80040ea:	4b36      	ldr	r3, [pc, #216]	; (80041c4 <xTaskResumeAll+0xf8>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	1e5a      	subs	r2, r3, #1
 80040f0:	4b34      	ldr	r3, [pc, #208]	; (80041c4 <xTaskResumeAll+0xf8>)
 80040f2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040f4:	4b33      	ldr	r3, [pc, #204]	; (80041c4 <xTaskResumeAll+0xf8>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d15b      	bne.n	80041b4 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80040fc:	4b32      	ldr	r3, [pc, #200]	; (80041c8 <xTaskResumeAll+0xfc>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d057      	beq.n	80041b4 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004104:	e02f      	b.n	8004166 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004106:	4b31      	ldr	r3, [pc, #196]	; (80041cc <xTaskResumeAll+0x100>)
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	3318      	adds	r3, #24
 8004112:	0018      	movs	r0, r3
 8004114:	f7ff fb3c 	bl	8003790 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	3304      	adds	r3, #4
 800411c:	0018      	movs	r0, r3
 800411e:	f7ff fb37 	bl	8003790 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004126:	4b2a      	ldr	r3, [pc, #168]	; (80041d0 <xTaskResumeAll+0x104>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	429a      	cmp	r2, r3
 800412c:	d903      	bls.n	8004136 <xTaskResumeAll+0x6a>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004132:	4b27      	ldr	r3, [pc, #156]	; (80041d0 <xTaskResumeAll+0x104>)
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800413a:	0013      	movs	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	189b      	adds	r3, r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4a24      	ldr	r2, [pc, #144]	; (80041d4 <xTaskResumeAll+0x108>)
 8004144:	189a      	adds	r2, r3, r2
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	3304      	adds	r3, #4
 800414a:	0019      	movs	r1, r3
 800414c:	0010      	movs	r0, r2
 800414e:	f7ff fac7 	bl	80036e0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004156:	4b20      	ldr	r3, [pc, #128]	; (80041d8 <xTaskResumeAll+0x10c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415c:	429a      	cmp	r2, r3
 800415e:	d302      	bcc.n	8004166 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8004160:	4b1e      	ldr	r3, [pc, #120]	; (80041dc <xTaskResumeAll+0x110>)
 8004162:	2201      	movs	r2, #1
 8004164:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004166:	4b19      	ldr	r3, [pc, #100]	; (80041cc <xTaskResumeAll+0x100>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1cb      	bne.n	8004106 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004174:	f000 f9ee 	bl	8004554 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004178:	4b19      	ldr	r3, [pc, #100]	; (80041e0 <xTaskResumeAll+0x114>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00f      	beq.n	80041a4 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004184:	f000 f82e 	bl	80041e4 <xTaskIncrementTick>
 8004188:	1e03      	subs	r3, r0, #0
 800418a:	d002      	beq.n	8004192 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800418c:	4b13      	ldr	r3, [pc, #76]	; (80041dc <xTaskResumeAll+0x110>)
 800418e:	2201      	movs	r2, #1
 8004190:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	3b01      	subs	r3, #1
 8004196:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1f2      	bne.n	8004184 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 800419e:	4b10      	ldr	r3, [pc, #64]	; (80041e0 <xTaskResumeAll+0x114>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80041a4:	4b0d      	ldr	r3, [pc, #52]	; (80041dc <xTaskResumeAll+0x110>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80041ac:	2301      	movs	r3, #1
 80041ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80041b0:	f7ff fb9e 	bl	80038f0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80041b4:	f7ff fbbe 	bl	8003934 <vPortExitCritical>

	return xAlreadyYielded;
 80041b8:	68bb      	ldr	r3, [r7, #8]
}
 80041ba:	0018      	movs	r0, r3
 80041bc:	46bd      	mov	sp, r7
 80041be:	b004      	add	sp, #16
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	46c0      	nop			; (mov r8, r8)
 80041c4:	20000d68 	.word	0x20000d68
 80041c8:	20000d40 	.word	0x20000d40
 80041cc:	20000d00 	.word	0x20000d00
 80041d0:	20000d48 	.word	0x20000d48
 80041d4:	20000c44 	.word	0x20000c44
 80041d8:	20000c40 	.word	0x20000c40
 80041dc:	20000d54 	.word	0x20000d54
 80041e0:	20000d50 	.word	0x20000d50

080041e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80041ea:	2300      	movs	r3, #0
 80041ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041ee:	4b4c      	ldr	r3, [pc, #304]	; (8004320 <xTaskIncrementTick+0x13c>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d000      	beq.n	80041f8 <xTaskIncrementTick+0x14>
 80041f6:	e083      	b.n	8004300 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80041f8:	4b4a      	ldr	r3, [pc, #296]	; (8004324 <xTaskIncrementTick+0x140>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	3301      	adds	r3, #1
 80041fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004200:	4b48      	ldr	r3, [pc, #288]	; (8004324 <xTaskIncrementTick+0x140>)
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d117      	bne.n	800423c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800420c:	4b46      	ldr	r3, [pc, #280]	; (8004328 <xTaskIncrementTick+0x144>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <xTaskIncrementTick+0x36>
 8004216:	b672      	cpsid	i
 8004218:	e7fe      	b.n	8004218 <xTaskIncrementTick+0x34>
 800421a:	4b43      	ldr	r3, [pc, #268]	; (8004328 <xTaskIncrementTick+0x144>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	4b42      	ldr	r3, [pc, #264]	; (800432c <xTaskIncrementTick+0x148>)
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	4b40      	ldr	r3, [pc, #256]	; (8004328 <xTaskIncrementTick+0x144>)
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	4b40      	ldr	r3, [pc, #256]	; (800432c <xTaskIncrementTick+0x148>)
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	4b40      	ldr	r3, [pc, #256]	; (8004330 <xTaskIncrementTick+0x14c>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	4b3e      	ldr	r3, [pc, #248]	; (8004330 <xTaskIncrementTick+0x14c>)
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	f000 f98c 	bl	8004554 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800423c:	4b3d      	ldr	r3, [pc, #244]	; (8004334 <xTaskIncrementTick+0x150>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	429a      	cmp	r2, r3
 8004244:	d34e      	bcc.n	80042e4 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004246:	4b38      	ldr	r3, [pc, #224]	; (8004328 <xTaskIncrementTick+0x144>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <xTaskIncrementTick+0x70>
 8004250:	2301      	movs	r3, #1
 8004252:	e000      	b.n	8004256 <xTaskIncrementTick+0x72>
 8004254:	2300      	movs	r3, #0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d004      	beq.n	8004264 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800425a:	4b36      	ldr	r3, [pc, #216]	; (8004334 <xTaskIncrementTick+0x150>)
 800425c:	2201      	movs	r2, #1
 800425e:	4252      	negs	r2, r2
 8004260:	601a      	str	r2, [r3, #0]
					break;
 8004262:	e03f      	b.n	80042e4 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004264:	4b30      	ldr	r3, [pc, #192]	; (8004328 <xTaskIncrementTick+0x144>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	429a      	cmp	r2, r3
 800427a:	d203      	bcs.n	8004284 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800427c:	4b2d      	ldr	r3, [pc, #180]	; (8004334 <xTaskIncrementTick+0x150>)
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	601a      	str	r2, [r3, #0]
						break;
 8004282:	e02f      	b.n	80042e4 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	3304      	adds	r3, #4
 8004288:	0018      	movs	r0, r3
 800428a:	f7ff fa81 	bl	8003790 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004292:	2b00      	cmp	r3, #0
 8004294:	d004      	beq.n	80042a0 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	3318      	adds	r3, #24
 800429a:	0018      	movs	r0, r3
 800429c:	f7ff fa78 	bl	8003790 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a4:	4b24      	ldr	r3, [pc, #144]	; (8004338 <xTaskIncrementTick+0x154>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d903      	bls.n	80042b4 <xTaskIncrementTick+0xd0>
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b0:	4b21      	ldr	r3, [pc, #132]	; (8004338 <xTaskIncrementTick+0x154>)
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b8:	0013      	movs	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	189b      	adds	r3, r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	4a1e      	ldr	r2, [pc, #120]	; (800433c <xTaskIncrementTick+0x158>)
 80042c2:	189a      	adds	r2, r3, r2
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	3304      	adds	r3, #4
 80042c8:	0019      	movs	r1, r3
 80042ca:	0010      	movs	r0, r2
 80042cc:	f7ff fa08 	bl	80036e0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d4:	4b1a      	ldr	r3, [pc, #104]	; (8004340 <xTaskIncrementTick+0x15c>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042da:	429a      	cmp	r2, r3
 80042dc:	d3b3      	bcc.n	8004246 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80042de:	2301      	movs	r3, #1
 80042e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042e2:	e7b0      	b.n	8004246 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80042e4:	4b16      	ldr	r3, [pc, #88]	; (8004340 <xTaskIncrementTick+0x15c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ea:	4914      	ldr	r1, [pc, #80]	; (800433c <xTaskIncrementTick+0x158>)
 80042ec:	0013      	movs	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	189b      	adds	r3, r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	585b      	ldr	r3, [r3, r1]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d907      	bls.n	800430a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80042fa:	2301      	movs	r3, #1
 80042fc:	617b      	str	r3, [r7, #20]
 80042fe:	e004      	b.n	800430a <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004300:	4b10      	ldr	r3, [pc, #64]	; (8004344 <xTaskIncrementTick+0x160>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	4b0f      	ldr	r3, [pc, #60]	; (8004344 <xTaskIncrementTick+0x160>)
 8004308:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800430a:	4b0f      	ldr	r3, [pc, #60]	; (8004348 <xTaskIncrementTick+0x164>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8004312:	2301      	movs	r3, #1
 8004314:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004316:	697b      	ldr	r3, [r7, #20]
}
 8004318:	0018      	movs	r0, r3
 800431a:	46bd      	mov	sp, r7
 800431c:	b006      	add	sp, #24
 800431e:	bd80      	pop	{r7, pc}
 8004320:	20000d68 	.word	0x20000d68
 8004324:	20000d44 	.word	0x20000d44
 8004328:	20000cf8 	.word	0x20000cf8
 800432c:	20000cfc 	.word	0x20000cfc
 8004330:	20000d58 	.word	0x20000d58
 8004334:	20000d60 	.word	0x20000d60
 8004338:	20000d48 	.word	0x20000d48
 800433c:	20000c44 	.word	0x20000c44
 8004340:	20000c40 	.word	0x20000c40
 8004344:	20000d50 	.word	0x20000d50
 8004348:	20000d54 	.word	0x20000d54

0800434c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004352:	4b2e      	ldr	r3, [pc, #184]	; (800440c <vTaskSwitchContext+0xc0>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800435a:	4b2d      	ldr	r3, [pc, #180]	; (8004410 <vTaskSwitchContext+0xc4>)
 800435c:	2201      	movs	r2, #1
 800435e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004360:	e04f      	b.n	8004402 <vTaskSwitchContext+0xb6>
		xYieldPending = pdFALSE;
 8004362:	4b2b      	ldr	r3, [pc, #172]	; (8004410 <vTaskSwitchContext+0xc4>)
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8004368:	4b2a      	ldr	r3, [pc, #168]	; (8004414 <vTaskSwitchContext+0xc8>)
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	4b2a      	ldr	r3, [pc, #168]	; (8004418 <vTaskSwitchContext+0xcc>)
 800436e:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8004370:	4b29      	ldr	r3, [pc, #164]	; (8004418 <vTaskSwitchContext+0xcc>)
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	4b29      	ldr	r3, [pc, #164]	; (800441c <vTaskSwitchContext+0xd0>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	429a      	cmp	r2, r3
 800437a:	d909      	bls.n	8004390 <vTaskSwitchContext+0x44>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800437c:	4b28      	ldr	r3, [pc, #160]	; (8004420 <vTaskSwitchContext+0xd4>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004382:	4a25      	ldr	r2, [pc, #148]	; (8004418 <vTaskSwitchContext+0xcc>)
 8004384:	6810      	ldr	r0, [r2, #0]
 8004386:	4a25      	ldr	r2, [pc, #148]	; (800441c <vTaskSwitchContext+0xd0>)
 8004388:	6812      	ldr	r2, [r2, #0]
 800438a:	1a82      	subs	r2, r0, r2
 800438c:	188a      	adds	r2, r1, r2
 800438e:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 8004390:	4b21      	ldr	r3, [pc, #132]	; (8004418 <vTaskSwitchContext+0xcc>)
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	4b21      	ldr	r3, [pc, #132]	; (800441c <vTaskSwitchContext+0xd0>)
 8004396:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004398:	4b22      	ldr	r3, [pc, #136]	; (8004424 <vTaskSwitchContext+0xd8>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	607b      	str	r3, [r7, #4]
 800439e:	e007      	b.n	80043b0 <vTaskSwitchContext+0x64>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <vTaskSwitchContext+0x5e>
 80043a6:	b672      	cpsid	i
 80043a8:	e7fe      	b.n	80043a8 <vTaskSwitchContext+0x5c>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	3b01      	subs	r3, #1
 80043ae:	607b      	str	r3, [r7, #4]
 80043b0:	491d      	ldr	r1, [pc, #116]	; (8004428 <vTaskSwitchContext+0xdc>)
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	0013      	movs	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	189b      	adds	r3, r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	585b      	ldr	r3, [r3, r1]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0ee      	beq.n	80043a0 <vTaskSwitchContext+0x54>
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	0013      	movs	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	189b      	adds	r3, r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4a16      	ldr	r2, [pc, #88]	; (8004428 <vTaskSwitchContext+0xdc>)
 80043ce:	189b      	adds	r3, r3, r2
 80043d0:	603b      	str	r3, [r7, #0]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	605a      	str	r2, [r3, #4]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	3308      	adds	r3, #8
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d104      	bne.n	80043f2 <vTaskSwitchContext+0xa6>
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	605a      	str	r2, [r3, #4]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	68da      	ldr	r2, [r3, #12]
 80043f8:	4b09      	ldr	r3, [pc, #36]	; (8004420 <vTaskSwitchContext+0xd4>)
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	4b09      	ldr	r3, [pc, #36]	; (8004424 <vTaskSwitchContext+0xd8>)
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	601a      	str	r2, [r3, #0]
}
 8004402:	46c0      	nop			; (mov r8, r8)
 8004404:	46bd      	mov	sp, r7
 8004406:	b002      	add	sp, #8
 8004408:	bd80      	pop	{r7, pc}
 800440a:	46c0      	nop			; (mov r8, r8)
 800440c:	20000d68 	.word	0x20000d68
 8004410:	20000d54 	.word	0x20000d54
 8004414:	20000d74 	.word	0x20000d74
 8004418:	20000d70 	.word	0x20000d70
 800441c:	20000d6c 	.word	0x20000d6c
 8004420:	20000c40 	.word	0x20000c40
 8004424:	20000d48 	.word	0x20000d48
 8004428:	20000c44 	.word	0x20000c44

0800442c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004434:	f000 f84e 	bl	80044d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004438:	4b03      	ldr	r3, [pc, #12]	; (8004448 <prvIdleTask+0x1c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d9f9      	bls.n	8004434 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004440:	f7ff fa56 	bl	80038f0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8004444:	e7f6      	b.n	8004434 <prvIdleTask+0x8>
 8004446:	46c0      	nop			; (mov r8, r8)
 8004448:	20000c44 	.word	0x20000c44

0800444c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004452:	2300      	movs	r3, #0
 8004454:	607b      	str	r3, [r7, #4]
 8004456:	e00c      	b.n	8004472 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	0013      	movs	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	189b      	adds	r3, r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4a14      	ldr	r2, [pc, #80]	; (80044b4 <prvInitialiseTaskLists+0x68>)
 8004464:	189b      	adds	r3, r3, r2
 8004466:	0018      	movs	r0, r3
 8004468:	f7ff f911 	bl	800368e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	3301      	adds	r3, #1
 8004470:	607b      	str	r3, [r7, #4]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b06      	cmp	r3, #6
 8004476:	d9ef      	bls.n	8004458 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004478:	4b0f      	ldr	r3, [pc, #60]	; (80044b8 <prvInitialiseTaskLists+0x6c>)
 800447a:	0018      	movs	r0, r3
 800447c:	f7ff f907 	bl	800368e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004480:	4b0e      	ldr	r3, [pc, #56]	; (80044bc <prvInitialiseTaskLists+0x70>)
 8004482:	0018      	movs	r0, r3
 8004484:	f7ff f903 	bl	800368e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004488:	4b0d      	ldr	r3, [pc, #52]	; (80044c0 <prvInitialiseTaskLists+0x74>)
 800448a:	0018      	movs	r0, r3
 800448c:	f7ff f8ff 	bl	800368e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004490:	4b0c      	ldr	r3, [pc, #48]	; (80044c4 <prvInitialiseTaskLists+0x78>)
 8004492:	0018      	movs	r0, r3
 8004494:	f7ff f8fb 	bl	800368e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004498:	4b0b      	ldr	r3, [pc, #44]	; (80044c8 <prvInitialiseTaskLists+0x7c>)
 800449a:	0018      	movs	r0, r3
 800449c:	f7ff f8f7 	bl	800368e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80044a0:	4b0a      	ldr	r3, [pc, #40]	; (80044cc <prvInitialiseTaskLists+0x80>)
 80044a2:	4a05      	ldr	r2, [pc, #20]	; (80044b8 <prvInitialiseTaskLists+0x6c>)
 80044a4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80044a6:	4b0a      	ldr	r3, [pc, #40]	; (80044d0 <prvInitialiseTaskLists+0x84>)
 80044a8:	4a04      	ldr	r2, [pc, #16]	; (80044bc <prvInitialiseTaskLists+0x70>)
 80044aa:	601a      	str	r2, [r3, #0]
}
 80044ac:	46c0      	nop			; (mov r8, r8)
 80044ae:	46bd      	mov	sp, r7
 80044b0:	b002      	add	sp, #8
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	20000c44 	.word	0x20000c44
 80044b8:	20000cd0 	.word	0x20000cd0
 80044bc:	20000ce4 	.word	0x20000ce4
 80044c0:	20000d00 	.word	0x20000d00
 80044c4:	20000d14 	.word	0x20000d14
 80044c8:	20000d2c 	.word	0x20000d2c
 80044cc:	20000cf8 	.word	0x20000cf8
 80044d0:	20000cfc 	.word	0x20000cfc

080044d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044da:	e01a      	b.n	8004512 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80044dc:	f7ff fa18 	bl	8003910 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80044e0:	4b10      	ldr	r3, [pc, #64]	; (8004524 <prvCheckTasksWaitingTermination+0x50>)
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	3304      	adds	r3, #4
 80044ec:	0018      	movs	r0, r3
 80044ee:	f7ff f94f 	bl	8003790 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80044f2:	4b0d      	ldr	r3, [pc, #52]	; (8004528 <prvCheckTasksWaitingTermination+0x54>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	1e5a      	subs	r2, r3, #1
 80044f8:	4b0b      	ldr	r3, [pc, #44]	; (8004528 <prvCheckTasksWaitingTermination+0x54>)
 80044fa:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80044fc:	4b0b      	ldr	r3, [pc, #44]	; (800452c <prvCheckTasksWaitingTermination+0x58>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	1e5a      	subs	r2, r3, #1
 8004502:	4b0a      	ldr	r3, [pc, #40]	; (800452c <prvCheckTasksWaitingTermination+0x58>)
 8004504:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8004506:	f7ff fa15 	bl	8003934 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	0018      	movs	r0, r3
 800450e:	f000 f80f 	bl	8004530 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004512:	4b06      	ldr	r3, [pc, #24]	; (800452c <prvCheckTasksWaitingTermination+0x58>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1e0      	bne.n	80044dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800451a:	46c0      	nop			; (mov r8, r8)
 800451c:	46bd      	mov	sp, r7
 800451e:	b002      	add	sp, #8
 8004520:	bd80      	pop	{r7, pc}
 8004522:	46c0      	nop			; (mov r8, r8)
 8004524:	20000d14 	.word	0x20000d14
 8004528:	20000d40 	.word	0x20000d40
 800452c:	20000d28 	.word	0x20000d28

08004530 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453c:	0018      	movs	r0, r3
 800453e:	f7ff fb25 	bl	8003b8c <vPortFree>
			vPortFree( pxTCB );
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	0018      	movs	r0, r3
 8004546:	f7ff fb21 	bl	8003b8c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800454a:	46c0      	nop			; (mov r8, r8)
 800454c:	46bd      	mov	sp, r7
 800454e:	b002      	add	sp, #8
 8004550:	bd80      	pop	{r7, pc}
	...

08004554 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800455a:	4b0e      	ldr	r3, [pc, #56]	; (8004594 <prvResetNextTaskUnblockTime+0x40>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <prvResetNextTaskUnblockTime+0x14>
 8004564:	2301      	movs	r3, #1
 8004566:	e000      	b.n	800456a <prvResetNextTaskUnblockTime+0x16>
 8004568:	2300      	movs	r3, #0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d004      	beq.n	8004578 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800456e:	4b0a      	ldr	r3, [pc, #40]	; (8004598 <prvResetNextTaskUnblockTime+0x44>)
 8004570:	2201      	movs	r2, #1
 8004572:	4252      	negs	r2, r2
 8004574:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004576:	e008      	b.n	800458a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004578:	4b06      	ldr	r3, [pc, #24]	; (8004594 <prvResetNextTaskUnblockTime+0x40>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685a      	ldr	r2, [r3, #4]
 8004586:	4b04      	ldr	r3, [pc, #16]	; (8004598 <prvResetNextTaskUnblockTime+0x44>)
 8004588:	601a      	str	r2, [r3, #0]
}
 800458a:	46c0      	nop			; (mov r8, r8)
 800458c:	46bd      	mov	sp, r7
 800458e:	b002      	add	sp, #8
 8004590:	bd80      	pop	{r7, pc}
 8004592:	46c0      	nop			; (mov r8, r8)
 8004594:	20000cf8 	.word	0x20000cf8
 8004598:	20000d60 	.word	0x20000d60

0800459c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80045a6:	4b21      	ldr	r3, [pc, #132]	; (800462c <prvAddCurrentTaskToDelayedList+0x90>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045ac:	4b20      	ldr	r3, [pc, #128]	; (8004630 <prvAddCurrentTaskToDelayedList+0x94>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3304      	adds	r3, #4
 80045b2:	0018      	movs	r0, r3
 80045b4:	f7ff f8ec 	bl	8003790 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3301      	adds	r3, #1
 80045bc:	d10b      	bne.n	80045d6 <prvAddCurrentTaskToDelayedList+0x3a>
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d008      	beq.n	80045d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045c4:	4b1a      	ldr	r3, [pc, #104]	; (8004630 <prvAddCurrentTaskToDelayedList+0x94>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	1d1a      	adds	r2, r3, #4
 80045ca:	4b1a      	ldr	r3, [pc, #104]	; (8004634 <prvAddCurrentTaskToDelayedList+0x98>)
 80045cc:	0011      	movs	r1, r2
 80045ce:	0018      	movs	r0, r3
 80045d0:	f7ff f886 	bl	80036e0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80045d4:	e026      	b.n	8004624 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	18d3      	adds	r3, r2, r3
 80045dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045de:	4b14      	ldr	r3, [pc, #80]	; (8004630 <prvAddCurrentTaskToDelayedList+0x94>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d209      	bcs.n	8004602 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045ee:	4b12      	ldr	r3, [pc, #72]	; (8004638 <prvAddCurrentTaskToDelayedList+0x9c>)
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	4b0f      	ldr	r3, [pc, #60]	; (8004630 <prvAddCurrentTaskToDelayedList+0x94>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	3304      	adds	r3, #4
 80045f8:	0019      	movs	r1, r3
 80045fa:	0010      	movs	r0, r2
 80045fc:	f7ff f892 	bl	8003724 <vListInsert>
}
 8004600:	e010      	b.n	8004624 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004602:	4b0e      	ldr	r3, [pc, #56]	; (800463c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	4b0a      	ldr	r3, [pc, #40]	; (8004630 <prvAddCurrentTaskToDelayedList+0x94>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	3304      	adds	r3, #4
 800460c:	0019      	movs	r1, r3
 800460e:	0010      	movs	r0, r2
 8004610:	f7ff f888 	bl	8003724 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004614:	4b0a      	ldr	r3, [pc, #40]	; (8004640 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	429a      	cmp	r2, r3
 800461c:	d202      	bcs.n	8004624 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800461e:	4b08      	ldr	r3, [pc, #32]	; (8004640 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	601a      	str	r2, [r3, #0]
}
 8004624:	46c0      	nop			; (mov r8, r8)
 8004626:	46bd      	mov	sp, r7
 8004628:	b004      	add	sp, #16
 800462a:	bd80      	pop	{r7, pc}
 800462c:	20000d44 	.word	0x20000d44
 8004630:	20000c40 	.word	0x20000c40
 8004634:	20000d2c 	.word	0x20000d2c
 8004638:	20000cfc 	.word	0x20000cfc
 800463c:	20000cf8 	.word	0x20000cf8
 8004640:	20000d60 	.word	0x20000d60

08004644 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 800464c:	4b07      	ldr	r3, [pc, #28]	; (800466c <LL_APB1_GRP1_EnableClock+0x28>)
 800464e:	4a07      	ldr	r2, [pc, #28]	; (800466c <LL_APB1_GRP1_EnableClock+0x28>)
 8004650:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	430a      	orrs	r2, r1
 8004656:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8004658:	4b04      	ldr	r3, [pc, #16]	; (800466c <LL_APB1_GRP1_EnableClock+0x28>)
 800465a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	4013      	ands	r3, r2
 8004660:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004662:	68fb      	ldr	r3, [r7, #12]
}
 8004664:	46c0      	nop			; (mov r8, r8)
 8004666:	46bd      	mov	sp, r7
 8004668:	b004      	add	sp, #16
 800466a:	bd80      	pop	{r7, pc}
 800466c:	40021000 	.word	0x40021000

08004670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004670:	b590      	push	{r4, r7, lr}
 8004672:	b089      	sub	sp, #36	; 0x24
 8004674:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	bat_voltage = 0.0f;
 8004676:	4b22      	ldr	r3, [pc, #136]	; (8004700 <main+0x90>)
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]
	cell_1_voltage = 0.0f;
 800467c:	4b21      	ldr	r3, [pc, #132]	; (8004704 <main+0x94>)
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]
	cell_2_voltage = 0.0f;
 8004682:	4b21      	ldr	r3, [pc, #132]	; (8004708 <main+0x98>)
 8004684:	2200      	movs	r2, #0
 8004686:	601a      	str	r2, [r3, #0]
	cell_3_voltage = 0.0f;
 8004688:	4b20      	ldr	r3, [pc, #128]	; (800470c <main+0x9c>)
 800468a:	2200      	movs	r2, #0
 800468c:	601a      	str	r2, [r3, #0]
	cell_4_voltage = 0.0f;
 800468e:	4b20      	ldr	r3, [pc, #128]	; (8004710 <main+0xa0>)
 8004690:	2200      	movs	r2, #0
 8004692:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004694:	f7fc f90c 	bl	80008b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004698:	f000 f848 	bl	800472c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800469c:	f000 fa24 	bl	8004ae8 <MX_GPIO_Init>
  MX_DMA_Init();
 80046a0:	f000 fa04 	bl	8004aac <MX_DMA_Init>
  MX_ADC1_Init();
 80046a4:	f000 f8b2 	bl	800480c <MX_ADC1_Init>
  MX_I2C1_Init();
 80046a8:	f000 f976 	bl	8004998 <MX_I2C1_Init>
  MX_TIM7_Init();
 80046ac:	f000 f9b4 	bl	8004a18 <MX_TIM7_Init>
  MX_UCPD1_Init();
 80046b0:	f000 f9f2 	bl	8004a98 <MX_UCPD1_Init>
  /* USER CODE BEGIN 2 */

  /* Create the task, storing the handle. */
  xTaskCreate(
 80046b4:	4917      	ldr	r1, [pc, #92]	; (8004714 <main+0xa4>)
 80046b6:	4818      	ldr	r0, [pc, #96]	; (8004718 <main+0xa8>)
 80046b8:	2300      	movs	r3, #0
 80046ba:	9301      	str	r3, [sp, #4]
 80046bc:	2302      	movs	r3, #2
 80046be:	9300      	str	r3, [sp, #0]
 80046c0:	2300      	movs	r3, #0
 80046c2:	2280      	movs	r2, #128	; 0x80
 80046c4:	f7ff fb62 	bl	8003d8c <xTaskCreate>
	  0,    							/* Parameter passed into the task. */
	  2,								/* Priority at which the task is created. */
	  0);     							/* Used to pass out the created task's handle. */

  /* Create the task, storing the handle. */
  xTaskCreate(
 80046c8:	4914      	ldr	r1, [pc, #80]	; (800471c <main+0xac>)
 80046ca:	4815      	ldr	r0, [pc, #84]	; (8004720 <main+0xb0>)
 80046cc:	2300      	movs	r3, #0
 80046ce:	9301      	str	r3, [sp, #4]
 80046d0:	2302      	movs	r3, #2
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	2300      	movs	r3, #0
 80046d6:	2280      	movs	r2, #128	; 0x80
 80046d8:	f7ff fb58 	bl	8003d8c <xTaskCreate>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80046dc:	1d3b      	adds	r3, r7, #4
 80046de:	4a11      	ldr	r2, [pc, #68]	; (8004724 <main+0xb4>)
 80046e0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80046e2:	c313      	stmia	r3!, {r0, r1, r4}
 80046e4:	ca03      	ldmia	r2!, {r0, r1}
 80046e6:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80046e8:	1d3b      	adds	r3, r7, #4
 80046ea:	2100      	movs	r1, #0
 80046ec:	0018      	movs	r0, r3
 80046ee:	f7fe ff92 	bl	8003616 <osThreadCreate>
 80046f2:	0002      	movs	r2, r0
 80046f4:	4b0c      	ldr	r3, [pc, #48]	; (8004728 <main+0xb8>)
 80046f6:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
 

  /* Start scheduler */
  osKernelStart();
 80046f8:	f7fe ff85 	bl	8003606 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80046fc:	e7fe      	b.n	80046fc <main+0x8c>
 80046fe:	46c0      	nop			; (mov r8, r8)
 8004700:	20000dcc 	.word	0x20000dcc
 8004704:	20000ec4 	.word	0x20000ec4
 8004708:	20000ecc 	.word	0x20000ecc
 800470c:	20000ec8 	.word	0x20000ec8
 8004710:	20000f10 	.word	0x20000f10
 8004714:	08005234 	.word	0x08005234
 8004718:	08004c31 	.word	0x08004c31
 800471c:	08005240 	.word	0x08005240
 8004720:	08004cd5 	.word	0x08004cd5
 8004724:	08005258 	.word	0x08005258
 8004728:	20000d7c 	.word	0x20000d7c

0800472c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b0a0      	sub	sp, #128	; 0x80
 8004730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004732:	2348      	movs	r3, #72	; 0x48
 8004734:	18fb      	adds	r3, r7, r3
 8004736:	0018      	movs	r0, r3
 8004738:	2338      	movs	r3, #56	; 0x38
 800473a:	001a      	movs	r2, r3
 800473c:	2100      	movs	r1, #0
 800473e:	f000 fd61 	bl	8005204 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004742:	2338      	movs	r3, #56	; 0x38
 8004744:	18fb      	adds	r3, r7, r3
 8004746:	0018      	movs	r0, r3
 8004748:	2310      	movs	r3, #16
 800474a:	001a      	movs	r2, r3
 800474c:	2100      	movs	r1, #0
 800474e:	f000 fd59 	bl	8005204 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004752:	1d3b      	adds	r3, r7, #4
 8004754:	0018      	movs	r0, r3
 8004756:	2334      	movs	r3, #52	; 0x34
 8004758:	001a      	movs	r2, r3
 800475a:	2100      	movs	r1, #0
 800475c:	f000 fd52 	bl	8005204 <memset>

  /**Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004760:	2380      	movs	r3, #128	; 0x80
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	0018      	movs	r0, r3
 8004766:	f7fd fe07 	bl	8002378 <HAL_PWREx_ControlVoltageScaling>
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800476a:	2348      	movs	r3, #72	; 0x48
 800476c:	18fb      	adds	r3, r7, r3
 800476e:	2202      	movs	r2, #2
 8004770:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004772:	2348      	movs	r3, #72	; 0x48
 8004774:	18fb      	adds	r3, r7, r3
 8004776:	2280      	movs	r2, #128	; 0x80
 8004778:	0052      	lsls	r2, r2, #1
 800477a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800477c:	2348      	movs	r3, #72	; 0x48
 800477e:	18fb      	adds	r3, r7, r3
 8004780:	2200      	movs	r2, #0
 8004782:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004784:	2348      	movs	r3, #72	; 0x48
 8004786:	18fb      	adds	r3, r7, r3
 8004788:	2240      	movs	r2, #64	; 0x40
 800478a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800478c:	2348      	movs	r3, #72	; 0x48
 800478e:	18fb      	adds	r3, r7, r3
 8004790:	2200      	movs	r2, #0
 8004792:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004794:	2348      	movs	r3, #72	; 0x48
 8004796:	18fb      	adds	r3, r7, r3
 8004798:	0018      	movs	r0, r3
 800479a:	f7fd fe2b 	bl	80023f4 <HAL_RCC_OscConfig>
 800479e:	1e03      	subs	r3, r0, #0
 80047a0:	d001      	beq.n	80047a6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80047a2:	f000 fb2d 	bl	8004e00 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80047a6:	2338      	movs	r3, #56	; 0x38
 80047a8:	18fb      	adds	r3, r7, r3
 80047aa:	2207      	movs	r2, #7
 80047ac:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80047ae:	2338      	movs	r3, #56	; 0x38
 80047b0:	18fb      	adds	r3, r7, r3
 80047b2:	2200      	movs	r2, #0
 80047b4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80047b6:	2338      	movs	r3, #56	; 0x38
 80047b8:	18fb      	adds	r3, r7, r3
 80047ba:	2200      	movs	r2, #0
 80047bc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80047be:	2338      	movs	r3, #56	; 0x38
 80047c0:	18fb      	adds	r3, r7, r3
 80047c2:	2200      	movs	r2, #0
 80047c4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80047c6:	2338      	movs	r3, #56	; 0x38
 80047c8:	18fb      	adds	r3, r7, r3
 80047ca:	2100      	movs	r1, #0
 80047cc:	0018      	movs	r0, r3
 80047ce:	f7fe f8eb 	bl	80029a8 <HAL_RCC_ClockConfig>
 80047d2:	1e03      	subs	r3, r0, #0
 80047d4:	d001      	beq.n	80047da <SystemClock_Config+0xae>
  {
    Error_Handler();
 80047d6:	f000 fb13 	bl	8004e00 <Error_Handler>
  }
  /**Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC;
 80047da:	1d3b      	adds	r3, r7, #4
 80047dc:	4a0a      	ldr	r2, [pc, #40]	; (8004808 <SystemClock_Config+0xdc>)
 80047de:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80047e0:	1d3b      	adds	r3, r7, #4
 80047e2:	2200      	movs	r2, #0
 80047e4:	611a      	str	r2, [r3, #16]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_HSI;
 80047e6:	1d3b      	adds	r3, r7, #4
 80047e8:	2280      	movs	r2, #128	; 0x80
 80047ea:	0612      	lsls	r2, r2, #24
 80047ec:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80047ee:	1d3b      	adds	r3, r7, #4
 80047f0:	0018      	movs	r0, r3
 80047f2:	f7fe faa9 	bl	8002d48 <HAL_RCCEx_PeriphCLKConfig>
 80047f6:	1e03      	subs	r3, r0, #0
 80047f8:	d001      	beq.n	80047fe <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80047fa:	f000 fb01 	bl	8004e00 <Error_Handler>
  }
}
 80047fe:	46c0      	nop			; (mov r8, r8)
 8004800:	46bd      	mov	sp, r7
 8004802:	b020      	add	sp, #128	; 0x80
 8004804:	bd80      	pop	{r7, pc}
 8004806:	46c0      	nop			; (mov r8, r8)
 8004808:	00004040 	.word	0x00004040

0800480c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004812:	1d3b      	adds	r3, r7, #4
 8004814:	0018      	movs	r0, r3
 8004816:	230c      	movs	r3, #12
 8004818:	001a      	movs	r2, r3
 800481a:	2100      	movs	r1, #0
 800481c:	f000 fcf2 	bl	8005204 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8004820:	4b56      	ldr	r3, [pc, #344]	; (800497c <MX_ADC1_Init+0x170>)
 8004822:	4a57      	ldr	r2, [pc, #348]	; (8004980 <MX_ADC1_Init+0x174>)
 8004824:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004826:	4b55      	ldr	r3, [pc, #340]	; (800497c <MX_ADC1_Init+0x170>)
 8004828:	2280      	movs	r2, #128	; 0x80
 800482a:	0612      	lsls	r2, r2, #24
 800482c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800482e:	4b53      	ldr	r3, [pc, #332]	; (800497c <MX_ADC1_Init+0x170>)
 8004830:	2200      	movs	r2, #0
 8004832:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004834:	4b51      	ldr	r3, [pc, #324]	; (800497c <MX_ADC1_Init+0x170>)
 8004836:	2200      	movs	r2, #0
 8004838:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800483a:	4b50      	ldr	r3, [pc, #320]	; (800497c <MX_ADC1_Init+0x170>)
 800483c:	2280      	movs	r2, #128	; 0x80
 800483e:	0392      	lsls	r2, r2, #14
 8004840:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004842:	4b4e      	ldr	r3, [pc, #312]	; (800497c <MX_ADC1_Init+0x170>)
 8004844:	2208      	movs	r2, #8
 8004846:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004848:	4b4c      	ldr	r3, [pc, #304]	; (800497c <MX_ADC1_Init+0x170>)
 800484a:	2200      	movs	r2, #0
 800484c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800484e:	4b4b      	ldr	r3, [pc, #300]	; (800497c <MX_ADC1_Init+0x170>)
 8004850:	2200      	movs	r2, #0
 8004852:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004854:	4b49      	ldr	r3, [pc, #292]	; (800497c <MX_ADC1_Init+0x170>)
 8004856:	2201      	movs	r2, #1
 8004858:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 6;
 800485a:	4b48      	ldr	r3, [pc, #288]	; (800497c <MX_ADC1_Init+0x170>)
 800485c:	2206      	movs	r2, #6
 800485e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004860:	4b46      	ldr	r3, [pc, #280]	; (800497c <MX_ADC1_Init+0x170>)
 8004862:	2220      	movs	r2, #32
 8004864:	2100      	movs	r1, #0
 8004866:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004868:	4b44      	ldr	r3, [pc, #272]	; (800497c <MX_ADC1_Init+0x170>)
 800486a:	2200      	movs	r2, #0
 800486c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800486e:	4b43      	ldr	r3, [pc, #268]	; (800497c <MX_ADC1_Init+0x170>)
 8004870:	2200      	movs	r2, #0
 8004872:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004874:	4b41      	ldr	r3, [pc, #260]	; (800497c <MX_ADC1_Init+0x170>)
 8004876:	222c      	movs	r2, #44	; 0x2c
 8004878:	2101      	movs	r1, #1
 800487a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800487c:	4b3f      	ldr	r3, [pc, #252]	; (800497c <MX_ADC1_Init+0x170>)
 800487e:	2200      	movs	r2, #0
 8004880:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8004882:	4b3e      	ldr	r3, [pc, #248]	; (800497c <MX_ADC1_Init+0x170>)
 8004884:	2207      	movs	r2, #7
 8004886:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8004888:	4b3c      	ldr	r3, [pc, #240]	; (800497c <MX_ADC1_Init+0x170>)
 800488a:	2200      	movs	r2, #0
 800488c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800488e:	4b3b      	ldr	r3, [pc, #236]	; (800497c <MX_ADC1_Init+0x170>)
 8004890:	223c      	movs	r2, #60	; 0x3c
 8004892:	2100      	movs	r1, #0
 8004894:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8004896:	4b39      	ldr	r3, [pc, #228]	; (800497c <MX_ADC1_Init+0x170>)
 8004898:	2200      	movs	r2, #0
 800489a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800489c:	4b37      	ldr	r3, [pc, #220]	; (800497c <MX_ADC1_Init+0x170>)
 800489e:	0018      	movs	r0, r3
 80048a0:	f7fc f980 	bl	8000ba4 <HAL_ADC_Init>
 80048a4:	1e03      	subs	r3, r0, #0
 80048a6:	d001      	beq.n	80048ac <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80048a8:	f000 faaa 	bl	8004e00 <Error_Handler>
  }
  /**Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80048ac:	1d3b      	adds	r3, r7, #4
 80048ae:	4a35      	ldr	r2, [pc, #212]	; (8004984 <MX_ADC1_Init+0x178>)
 80048b0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80048b2:	1d3b      	adds	r3, r7, #4
 80048b4:	2200      	movs	r2, #0
 80048b6:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80048b8:	1d3b      	adds	r3, r7, #4
 80048ba:	2200      	movs	r2, #0
 80048bc:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80048be:	1d3a      	adds	r2, r7, #4
 80048c0:	4b2e      	ldr	r3, [pc, #184]	; (800497c <MX_ADC1_Init+0x170>)
 80048c2:	0011      	movs	r1, r2
 80048c4:	0018      	movs	r0, r3
 80048c6:	f7fc fbdd 	bl	8001084 <HAL_ADC_ConfigChannel>
 80048ca:	1e03      	subs	r3, r0, #0
 80048cc:	d001      	beq.n	80048d2 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80048ce:	f000 fa97 	bl	8004e00 <Error_Handler>
  }
  /**Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80048d2:	1d3b      	adds	r3, r7, #4
 80048d4:	4a2c      	ldr	r2, [pc, #176]	; (8004988 <MX_ADC1_Init+0x17c>)
 80048d6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80048d8:	1d3b      	adds	r3, r7, #4
 80048da:	2204      	movs	r2, #4
 80048dc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80048de:	1d3a      	adds	r2, r7, #4
 80048e0:	4b26      	ldr	r3, [pc, #152]	; (800497c <MX_ADC1_Init+0x170>)
 80048e2:	0011      	movs	r1, r2
 80048e4:	0018      	movs	r0, r3
 80048e6:	f7fc fbcd 	bl	8001084 <HAL_ADC_ConfigChannel>
 80048ea:	1e03      	subs	r3, r0, #0
 80048ec:	d001      	beq.n	80048f2 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 80048ee:	f000 fa87 	bl	8004e00 <Error_Handler>
  }
  /**Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80048f2:	1d3b      	adds	r3, r7, #4
 80048f4:	4a25      	ldr	r2, [pc, #148]	; (800498c <MX_ADC1_Init+0x180>)
 80048f6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80048f8:	1d3b      	adds	r3, r7, #4
 80048fa:	2208      	movs	r2, #8
 80048fc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80048fe:	1d3a      	adds	r2, r7, #4
 8004900:	4b1e      	ldr	r3, [pc, #120]	; (800497c <MX_ADC1_Init+0x170>)
 8004902:	0011      	movs	r1, r2
 8004904:	0018      	movs	r0, r3
 8004906:	f7fc fbbd 	bl	8001084 <HAL_ADC_ConfigChannel>
 800490a:	1e03      	subs	r3, r0, #0
 800490c:	d001      	beq.n	8004912 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 800490e:	f000 fa77 	bl	8004e00 <Error_Handler>
  }
  /**Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004912:	1d3b      	adds	r3, r7, #4
 8004914:	4a1e      	ldr	r2, [pc, #120]	; (8004990 <MX_ADC1_Init+0x184>)
 8004916:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8004918:	1d3b      	adds	r3, r7, #4
 800491a:	220c      	movs	r2, #12
 800491c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800491e:	1d3a      	adds	r2, r7, #4
 8004920:	4b16      	ldr	r3, [pc, #88]	; (800497c <MX_ADC1_Init+0x170>)
 8004922:	0011      	movs	r1, r2
 8004924:	0018      	movs	r0, r3
 8004926:	f7fc fbad 	bl	8001084 <HAL_ADC_ConfigChannel>
 800492a:	1e03      	subs	r3, r0, #0
 800492c:	d001      	beq.n	8004932 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 800492e:	f000 fa67 	bl	8004e00 <Error_Handler>
  }
  /**Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004932:	1d3b      	adds	r3, r7, #4
 8004934:	2201      	movs	r2, #1
 8004936:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8004938:	1d3b      	adds	r3, r7, #4
 800493a:	2210      	movs	r2, #16
 800493c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800493e:	1d3a      	adds	r2, r7, #4
 8004940:	4b0e      	ldr	r3, [pc, #56]	; (800497c <MX_ADC1_Init+0x170>)
 8004942:	0011      	movs	r1, r2
 8004944:	0018      	movs	r0, r3
 8004946:	f7fc fb9d 	bl	8001084 <HAL_ADC_ConfigChannel>
 800494a:	1e03      	subs	r3, r0, #0
 800494c:	d001      	beq.n	8004952 <MX_ADC1_Init+0x146>
  {
    Error_Handler();
 800494e:	f000 fa57 	bl	8004e00 <Error_Handler>
  }
  /**Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8004952:	1d3b      	adds	r3, r7, #4
 8004954:	4a0f      	ldr	r2, [pc, #60]	; (8004994 <MX_ADC1_Init+0x188>)
 8004956:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8004958:	1d3b      	adds	r3, r7, #4
 800495a:	2214      	movs	r2, #20
 800495c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800495e:	1d3a      	adds	r2, r7, #4
 8004960:	4b06      	ldr	r3, [pc, #24]	; (800497c <MX_ADC1_Init+0x170>)
 8004962:	0011      	movs	r1, r2
 8004964:	0018      	movs	r0, r3
 8004966:	f7fc fb8d 	bl	8001084 <HAL_ADC_ConfigChannel>
 800496a:	1e03      	subs	r3, r0, #0
 800496c:	d001      	beq.n	8004972 <MX_ADC1_Init+0x166>
  {
    Error_Handler();
 800496e:	f000 fa47 	bl	8004e00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004972:	46c0      	nop			; (mov r8, r8)
 8004974:	46bd      	mov	sp, r7
 8004976:	b004      	add	sp, #16
 8004978:	bd80      	pop	{r7, pc}
 800497a:	46c0      	nop			; (mov r8, r8)
 800497c:	20000dd4 	.word	0x20000dd4
 8004980:	40012400 	.word	0x40012400
 8004984:	10000010 	.word	0x10000010
 8004988:	0c000008 	.word	0x0c000008
 800498c:	08000004 	.word	0x08000004
 8004990:	04000002 	.word	0x04000002
 8004994:	b0001000 	.word	0xb0001000

08004998 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800499c:	4b1b      	ldr	r3, [pc, #108]	; (8004a0c <MX_I2C1_Init+0x74>)
 800499e:	4a1c      	ldr	r2, [pc, #112]	; (8004a10 <MX_I2C1_Init+0x78>)
 80049a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80049a2:	4b1a      	ldr	r3, [pc, #104]	; (8004a0c <MX_I2C1_Init+0x74>)
 80049a4:	4a1b      	ldr	r2, [pc, #108]	; (8004a14 <MX_I2C1_Init+0x7c>)
 80049a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80049a8:	4b18      	ldr	r3, [pc, #96]	; (8004a0c <MX_I2C1_Init+0x74>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80049ae:	4b17      	ldr	r3, [pc, #92]	; (8004a0c <MX_I2C1_Init+0x74>)
 80049b0:	2201      	movs	r2, #1
 80049b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80049b4:	4b15      	ldr	r3, [pc, #84]	; (8004a0c <MX_I2C1_Init+0x74>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80049ba:	4b14      	ldr	r3, [pc, #80]	; (8004a0c <MX_I2C1_Init+0x74>)
 80049bc:	2200      	movs	r2, #0
 80049be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80049c0:	4b12      	ldr	r3, [pc, #72]	; (8004a0c <MX_I2C1_Init+0x74>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80049c6:	4b11      	ldr	r3, [pc, #68]	; (8004a0c <MX_I2C1_Init+0x74>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80049cc:	4b0f      	ldr	r3, [pc, #60]	; (8004a0c <MX_I2C1_Init+0x74>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80049d2:	4b0e      	ldr	r3, [pc, #56]	; (8004a0c <MX_I2C1_Init+0x74>)
 80049d4:	0018      	movs	r0, r3
 80049d6:	f7fd fba1 	bl	800211c <HAL_I2C_Init>
 80049da:	1e03      	subs	r3, r0, #0
 80049dc:	d001      	beq.n	80049e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80049de:	f000 fa0f 	bl	8004e00 <Error_Handler>
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80049e2:	4b0a      	ldr	r3, [pc, #40]	; (8004a0c <MX_I2C1_Init+0x74>)
 80049e4:	2100      	movs	r1, #0
 80049e6:	0018      	movs	r0, r3
 80049e8:	f7fd fc2e 	bl	8002248 <HAL_I2CEx_ConfigAnalogFilter>
 80049ec:	1e03      	subs	r3, r0, #0
 80049ee:	d001      	beq.n	80049f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80049f0:	f000 fa06 	bl	8004e00 <Error_Handler>
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80049f4:	4b05      	ldr	r3, [pc, #20]	; (8004a0c <MX_I2C1_Init+0x74>)
 80049f6:	2100      	movs	r1, #0
 80049f8:	0018      	movs	r0, r3
 80049fa:	f7fd fc71 	bl	80022e0 <HAL_I2CEx_ConfigDigitalFilter>
 80049fe:	1e03      	subs	r3, r0, #0
 8004a00:	d001      	beq.n	8004a06 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004a02:	f000 f9fd 	bl	8004e00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004a06:	46c0      	nop			; (mov r8, r8)
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	20000d80 	.word	0x20000d80
 8004a10:	40005400 	.word	0x40005400
 8004a14:	00303d5b 	.word	0x00303d5b

08004a18 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a1e:	1d3b      	adds	r3, r7, #4
 8004a20:	0018      	movs	r0, r3
 8004a22:	230c      	movs	r3, #12
 8004a24:	001a      	movs	r2, r3
 8004a26:	2100      	movs	r1, #0
 8004a28:	f000 fbec 	bl	8005204 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004a2c:	4b17      	ldr	r3, [pc, #92]	; (8004a8c <MX_TIM7_Init+0x74>)
 8004a2e:	4a18      	ldr	r2, [pc, #96]	; (8004a90 <MX_TIM7_Init+0x78>)
 8004a30:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0x1194;
 8004a32:	4b16      	ldr	r3, [pc, #88]	; (8004a8c <MX_TIM7_Init+0x74>)
 8004a34:	4a17      	ldr	r2, [pc, #92]	; (8004a94 <MX_TIM7_Init+0x7c>)
 8004a36:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a38:	4b14      	ldr	r3, [pc, #80]	; (8004a8c <MX_TIM7_Init+0x74>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0x1;
 8004a3e:	4b13      	ldr	r3, [pc, #76]	; (8004a8c <MX_TIM7_Init+0x74>)
 8004a40:	2201      	movs	r2, #1
 8004a42:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a44:	4b11      	ldr	r3, [pc, #68]	; (8004a8c <MX_TIM7_Init+0x74>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004a4a:	4b10      	ldr	r3, [pc, #64]	; (8004a8c <MX_TIM7_Init+0x74>)
 8004a4c:	0018      	movs	r0, r3
 8004a4e:	f7fe fb2b 	bl	80030a8 <HAL_TIM_Base_Init>
 8004a52:	1e03      	subs	r3, r0, #0
 8004a54:	d001      	beq.n	8004a5a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8004a56:	f000 f9d3 	bl	8004e00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a5a:	1d3b      	adds	r3, r7, #4
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a60:	1d3b      	adds	r3, r7, #4
 8004a62:	2200      	movs	r2, #0
 8004a64:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004a66:	1d3a      	adds	r2, r7, #4
 8004a68:	4b08      	ldr	r3, [pc, #32]	; (8004a8c <MX_TIM7_Init+0x74>)
 8004a6a:	0011      	movs	r1, r2
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	f7fe fd43 	bl	80034f8 <HAL_TIMEx_MasterConfigSynchronization>
 8004a72:	1e03      	subs	r3, r0, #0
 8004a74:	d001      	beq.n	8004a7a <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8004a76:	f000 f9c3 	bl	8004e00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  HAL_TIM_Base_Start_IT(&htim7);
 8004a7a:	4b04      	ldr	r3, [pc, #16]	; (8004a8c <MX_TIM7_Init+0x74>)
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	f7fe fb3f 	bl	8003100 <HAL_TIM_Base_Start_IT>

  /* USER CODE END TIM7_Init 2 */

}
 8004a82:	46c0      	nop			; (mov r8, r8)
 8004a84:	46bd      	mov	sp, r7
 8004a86:	b004      	add	sp, #16
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	46c0      	nop			; (mov r8, r8)
 8004a8c:	20000ed0 	.word	0x20000ed0
 8004a90:	40001400 	.word	0x40001400
 8004a94:	00001194 	.word	0x00001194

08004a98 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD1);
 8004a9c:	2380      	movs	r3, #128	; 0x80
 8004a9e:	049b      	lsls	r3, r3, #18
 8004aa0:	0018      	movs	r0, r3
 8004aa2:	f7ff fdcf 	bl	8004644 <LL_APB1_GRP1_EnableClock>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8004aa6:	46c0      	nop			; (mov r8, r8)
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004ab2:	4b0c      	ldr	r3, [pc, #48]	; (8004ae4 <MX_DMA_Init+0x38>)
 8004ab4:	4a0b      	ldr	r2, [pc, #44]	; (8004ae4 <MX_DMA_Init+0x38>)
 8004ab6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ab8:	2101      	movs	r1, #1
 8004aba:	430a      	orrs	r2, r1
 8004abc:	639a      	str	r2, [r3, #56]	; 0x38
 8004abe:	4b09      	ldr	r3, [pc, #36]	; (8004ae4 <MX_DMA_Init+0x38>)
 8004ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	607b      	str	r3, [r7, #4]
 8004ac8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8004aca:	2200      	movs	r2, #0
 8004acc:	2103      	movs	r1, #3
 8004ace:	2009      	movs	r0, #9
 8004ad0:	f7fc ff18 	bl	8001904 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004ad4:	2009      	movs	r0, #9
 8004ad6:	f7fc ff2b 	bl	8001930 <HAL_NVIC_EnableIRQ>

}
 8004ada:	46c0      	nop			; (mov r8, r8)
 8004adc:	46bd      	mov	sp, r7
 8004ade:	b002      	add	sp, #8
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	46c0      	nop			; (mov r8, r8)
 8004ae4:	40021000 	.word	0x40021000

08004ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b088      	sub	sp, #32
 8004aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aee:	230c      	movs	r3, #12
 8004af0:	18fb      	adds	r3, r7, r3
 8004af2:	0018      	movs	r0, r3
 8004af4:	2314      	movs	r3, #20
 8004af6:	001a      	movs	r2, r3
 8004af8:	2100      	movs	r1, #0
 8004afa:	f000 fb83 	bl	8005204 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004afe:	4b47      	ldr	r3, [pc, #284]	; (8004c1c <MX_GPIO_Init+0x134>)
 8004b00:	4a46      	ldr	r2, [pc, #280]	; (8004c1c <MX_GPIO_Init+0x134>)
 8004b02:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b04:	2101      	movs	r1, #1
 8004b06:	430a      	orrs	r2, r1
 8004b08:	635a      	str	r2, [r3, #52]	; 0x34
 8004b0a:	4b44      	ldr	r3, [pc, #272]	; (8004c1c <MX_GPIO_Init+0x134>)
 8004b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b0e:	2201      	movs	r2, #1
 8004b10:	4013      	ands	r3, r2
 8004b12:	60bb      	str	r3, [r7, #8]
 8004b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b16:	4b41      	ldr	r3, [pc, #260]	; (8004c1c <MX_GPIO_Init+0x134>)
 8004b18:	4a40      	ldr	r2, [pc, #256]	; (8004c1c <MX_GPIO_Init+0x134>)
 8004b1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b1c:	2102      	movs	r1, #2
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	635a      	str	r2, [r3, #52]	; 0x34
 8004b22:	4b3e      	ldr	r3, [pc, #248]	; (8004c1c <MX_GPIO_Init+0x134>)
 8004b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b26:	2202      	movs	r2, #2
 8004b28:	4013      	ands	r3, r2
 8004b2a:	607b      	str	r3, [r7, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Blue_LED_Pin|Green_LED_Pin, GPIO_PIN_SET);
 8004b2e:	23a0      	movs	r3, #160	; 0xa0
 8004b30:	05db      	lsls	r3, r3, #23
 8004b32:	2201      	movs	r2, #1
 8004b34:	21a0      	movs	r1, #160	; 0xa0
 8004b36:	0018      	movs	r0, r3
 8004b38:	f7fd fad2 	bl	80020e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_OTG_Pin|ILIM_HIZ_Pin|CELL_1S_DIS_EN_Pin|CELL_2S_DIS_EN_Pin 
 8004b3c:	4938      	ldr	r1, [pc, #224]	; (8004c20 <MX_GPIO_Init+0x138>)
 8004b3e:	4b39      	ldr	r3, [pc, #228]	; (8004c24 <MX_GPIO_Init+0x13c>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	0018      	movs	r0, r3
 8004b44:	f7fd facc 	bl	80020e0 <HAL_GPIO_WritePin>
                          |CELL_3S_DIS_EN_Pin|CELL_4S_DIS_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET);
 8004b48:	4b36      	ldr	r3, [pc, #216]	; (8004c24 <MX_GPIO_Init+0x13c>)
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	2104      	movs	r1, #4
 8004b4e:	0018      	movs	r0, r3
 8004b50:	f7fd fac6 	bl	80020e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Blue_LED_Pin Green_LED_Pin */
  GPIO_InitStruct.Pin = Blue_LED_Pin|Green_LED_Pin;
 8004b54:	230c      	movs	r3, #12
 8004b56:	18fb      	adds	r3, r7, r3
 8004b58:	22a0      	movs	r2, #160	; 0xa0
 8004b5a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b5c:	230c      	movs	r3, #12
 8004b5e:	18fb      	adds	r3, r7, r3
 8004b60:	2201      	movs	r2, #1
 8004b62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b64:	230c      	movs	r3, #12
 8004b66:	18fb      	adds	r3, r7, r3
 8004b68:	2200      	movs	r2, #0
 8004b6a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b6c:	230c      	movs	r3, #12
 8004b6e:	18fb      	adds	r3, r7, r3
 8004b70:	2200      	movs	r2, #0
 8004b72:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b74:	230c      	movs	r3, #12
 8004b76:	18fa      	adds	r2, r7, r3
 8004b78:	23a0      	movs	r3, #160	; 0xa0
 8004b7a:	05db      	lsls	r3, r3, #23
 8004b7c:	0011      	movs	r1, r2
 8004b7e:	0018      	movs	r0, r3
 8004b80:	f7fd f94a 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_OTG_Pin Red_LED_Pin ILIM_HIZ_Pin CELL_1S_DIS_EN_Pin 
                           CELL_2S_DIS_EN_Pin CELL_3S_DIS_EN_Pin CELL_4S_DIS_EN_Pin */
  GPIO_InitStruct.Pin = EN_OTG_Pin|Red_LED_Pin|ILIM_HIZ_Pin|CELL_1S_DIS_EN_Pin 
 8004b84:	230c      	movs	r3, #12
 8004b86:	18fb      	adds	r3, r7, r3
 8004b88:	4a27      	ldr	r2, [pc, #156]	; (8004c28 <MX_GPIO_Init+0x140>)
 8004b8a:	601a      	str	r2, [r3, #0]
                          |CELL_2S_DIS_EN_Pin|CELL_3S_DIS_EN_Pin|CELL_4S_DIS_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b8c:	230c      	movs	r3, #12
 8004b8e:	18fb      	adds	r3, r7, r3
 8004b90:	2201      	movs	r2, #1
 8004b92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b94:	230c      	movs	r3, #12
 8004b96:	18fb      	adds	r3, r7, r3
 8004b98:	2200      	movs	r2, #0
 8004b9a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b9c:	230c      	movs	r3, #12
 8004b9e:	18fb      	adds	r3, r7, r3
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ba4:	230c      	movs	r3, #12
 8004ba6:	18fb      	adds	r3, r7, r3
 8004ba8:	4a1e      	ldr	r2, [pc, #120]	; (8004c24 <MX_GPIO_Init+0x13c>)
 8004baa:	0019      	movs	r1, r3
 8004bac:	0010      	movs	r0, r2
 8004bae:	f7fd f933 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PROTCHOT_Pin CHRG_OK_Pin */
  GPIO_InitStruct.Pin = PROTCHOT_Pin|CHRG_OK_Pin;
 8004bb2:	230c      	movs	r3, #12
 8004bb4:	18fb      	adds	r3, r7, r3
 8004bb6:	4a1d      	ldr	r2, [pc, #116]	; (8004c2c <MX_GPIO_Init+0x144>)
 8004bb8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004bba:	230c      	movs	r3, #12
 8004bbc:	18fb      	adds	r3, r7, r3
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bc2:	230c      	movs	r3, #12
 8004bc4:	18fb      	adds	r3, r7, r3
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bca:	230c      	movs	r3, #12
 8004bcc:	18fb      	adds	r3, r7, r3
 8004bce:	4a15      	ldr	r2, [pc, #84]	; (8004c24 <MX_GPIO_Init+0x13c>)
 8004bd0:	0019      	movs	r1, r3
 8004bd2:	0010      	movs	r0, r2
 8004bd4:	f7fd f920 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004bd8:	230c      	movs	r3, #12
 8004bda:	18fb      	adds	r3, r7, r3
 8004bdc:	22c0      	movs	r2, #192	; 0xc0
 8004bde:	0152      	lsls	r2, r2, #5
 8004be0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004be2:	230c      	movs	r3, #12
 8004be4:	18fb      	adds	r3, r7, r3
 8004be6:	2202      	movs	r2, #2
 8004be8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bea:	230c      	movs	r3, #12
 8004bec:	18fb      	adds	r3, r7, r3
 8004bee:	2200      	movs	r2, #0
 8004bf0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bf2:	230c      	movs	r3, #12
 8004bf4:	18fb      	adds	r3, r7, r3
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8004bfa:	230c      	movs	r3, #12
 8004bfc:	18fb      	adds	r3, r7, r3
 8004bfe:	2201      	movs	r2, #1
 8004c00:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c02:	230c      	movs	r3, #12
 8004c04:	18fa      	adds	r2, r7, r3
 8004c06:	23a0      	movs	r3, #160	; 0xa0
 8004c08:	05db      	lsls	r3, r3, #23
 8004c0a:	0011      	movs	r1, r2
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	f7fd f903 	bl	8001e18 <HAL_GPIO_Init>

}
 8004c12:	46c0      	nop			; (mov r8, r8)
 8004c14:	46bd      	mov	sp, r7
 8004c16:	b008      	add	sp, #32
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	46c0      	nop			; (mov r8, r8)
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	00000b31 	.word	0x00000b31
 8004c24:	50000400 	.word	0x50000400
 8004c28:	00000b35 	.word	0x00000b35
 8004c2c:	00001002 	.word	0x00001002

08004c30 <LED_Blinky>:

/* USER CODE BEGIN 4 */

void LED_Blinky(void *pvParameters)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
	TickType_t xDelay = 500 / portTICK_PERIOD_MS;
 8004c38:	23fa      	movs	r3, #250	; 0xfa
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_RESET);
 8004c3e:	4b24      	ldr	r3, [pc, #144]	; (8004cd0 <LED_Blinky+0xa0>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	2104      	movs	r1, #4
 8004c44:	0018      	movs	r0, r3
 8004c46:	f7fd fa4b 	bl	80020e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, GPIO_PIN_SET);
 8004c4a:	23a0      	movs	r3, #160	; 0xa0
 8004c4c:	05db      	lsls	r3, r3, #23
 8004c4e:	2201      	movs	r2, #1
 8004c50:	2120      	movs	r1, #32
 8004c52:	0018      	movs	r0, r3
 8004c54:	f7fd fa44 	bl	80020e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_SET);
 8004c58:	23a0      	movs	r3, #160	; 0xa0
 8004c5a:	05db      	lsls	r3, r3, #23
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	2180      	movs	r1, #128	; 0x80
 8004c60:	0018      	movs	r0, r3
 8004c62:	f7fd fa3d 	bl	80020e0 <HAL_GPIO_WritePin>
		vTaskDelay(xDelay);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	0018      	movs	r0, r3
 8004c6a:	f7ff f9c3 	bl	8003ff4 <vTaskDelay>
		HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET);
 8004c6e:	4b18      	ldr	r3, [pc, #96]	; (8004cd0 <LED_Blinky+0xa0>)
 8004c70:	2201      	movs	r2, #1
 8004c72:	2104      	movs	r1, #4
 8004c74:	0018      	movs	r0, r3
 8004c76:	f7fd fa33 	bl	80020e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, GPIO_PIN_RESET);
 8004c7a:	23a0      	movs	r3, #160	; 0xa0
 8004c7c:	05db      	lsls	r3, r3, #23
 8004c7e:	2200      	movs	r2, #0
 8004c80:	2120      	movs	r1, #32
 8004c82:	0018      	movs	r0, r3
 8004c84:	f7fd fa2c 	bl	80020e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_SET);
 8004c88:	23a0      	movs	r3, #160	; 0xa0
 8004c8a:	05db      	lsls	r3, r3, #23
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	2180      	movs	r1, #128	; 0x80
 8004c90:	0018      	movs	r0, r3
 8004c92:	f7fd fa25 	bl	80020e0 <HAL_GPIO_WritePin>
		vTaskDelay(xDelay);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	0018      	movs	r0, r3
 8004c9a:	f7ff f9ab 	bl	8003ff4 <vTaskDelay>
		HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET);
 8004c9e:	4b0c      	ldr	r3, [pc, #48]	; (8004cd0 <LED_Blinky+0xa0>)
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	2104      	movs	r1, #4
 8004ca4:	0018      	movs	r0, r3
 8004ca6:	f7fd fa1b 	bl	80020e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, GPIO_PIN_SET);
 8004caa:	23a0      	movs	r3, #160	; 0xa0
 8004cac:	05db      	lsls	r3, r3, #23
 8004cae:	2201      	movs	r2, #1
 8004cb0:	2120      	movs	r1, #32
 8004cb2:	0018      	movs	r0, r3
 8004cb4:	f7fd fa14 	bl	80020e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_RESET);
 8004cb8:	23a0      	movs	r3, #160	; 0xa0
 8004cba:	05db      	lsls	r3, r3, #23
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	2180      	movs	r1, #128	; 0x80
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	f7fd fa0d 	bl	80020e0 <HAL_GPIO_WritePin>
		vTaskDelay(xDelay);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	0018      	movs	r0, r3
 8004cca:	f7ff f993 	bl	8003ff4 <vTaskDelay>
		HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_RESET);
 8004cce:	e7b6      	b.n	8004c3e <LED_Blinky+0xe>
 8004cd0:	50000400 	.word	0x50000400

08004cd4 <Read_ADC>:
	}
}

void Read_ADC(void *pvParameters)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
	TickType_t xDelay = 10 / portTICK_PERIOD_MS;
 8004cdc:	230a      	movs	r3, #10
 8004cde:	60fb      	str	r3, [r7, #12]

	// calibrate ADC
	while(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK);
 8004ce0:	46c0      	nop			; (mov r8, r8)
 8004ce2:	4b22      	ldr	r3, [pc, #136]	; (8004d6c <Read_ADC+0x98>)
 8004ce4:	0018      	movs	r0, r3
 8004ce6:	f7fc fd07 	bl	80016f8 <HAL_ADCEx_Calibration_Start>
 8004cea:	1e03      	subs	r3, r0, #0
 8004cec:	d1f9      	bne.n	8004ce2 <Read_ADC+0xe>

	HAL_ADC_Start_DMA(&hadc1, buffer, 6);
 8004cee:	4920      	ldr	r1, [pc, #128]	; (8004d70 <Read_ADC+0x9c>)
 8004cf0:	4b1e      	ldr	r3, [pc, #120]	; (8004d6c <Read_ADC+0x98>)
 8004cf2:	2206      	movs	r2, #6
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	f7fc f927 	bl	8000f48 <HAL_ADC_Start_DMA>

	for(;;)
	{
		// Calculate the voltages based on the following data:
		// https://docs.google.com/spreadsheets/d/1uXEK7AOaoLDN3ATuCtUCRYjI7-zBhgmvHDWbn-7-k90/edit?usp=sharing
		bat_voltage = (adc[0] - 3.0f)/237.0f;
 8004cfa:	4b1e      	ldr	r3, [pc, #120]	; (8004d74 <Read_ADC+0xa0>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	0018      	movs	r0, r3
 8004d00:	f7fb fd72 	bl	80007e8 <__aeabi_ui2f>
 8004d04:	1c03      	adds	r3, r0, #0
 8004d06:	491c      	ldr	r1, [pc, #112]	; (8004d78 <Read_ADC+0xa4>)
 8004d08:	1c18      	adds	r0, r3, #0
 8004d0a:	f7fb fbd1 	bl	80004b0 <__aeabi_fsub>
 8004d0e:	1c03      	adds	r3, r0, #0
 8004d10:	491a      	ldr	r1, [pc, #104]	; (8004d7c <Read_ADC+0xa8>)
 8004d12:	1c18      	adds	r0, r3, #0
 8004d14:	f7fb fa84 	bl	8000220 <__aeabi_fdiv>
 8004d18:	1c03      	adds	r3, r0, #0
 8004d1a:	1c1a      	adds	r2, r3, #0
 8004d1c:	4b18      	ldr	r3, [pc, #96]	; (8004d80 <Read_ADC+0xac>)
 8004d1e:	601a      	str	r2, [r3, #0]

		cell_1_voltage = adc[1];
 8004d20:	4b14      	ldr	r3, [pc, #80]	; (8004d74 <Read_ADC+0xa0>)
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	0018      	movs	r0, r3
 8004d26:	f7fb fd5f 	bl	80007e8 <__aeabi_ui2f>
 8004d2a:	1c02      	adds	r2, r0, #0
 8004d2c:	4b15      	ldr	r3, [pc, #84]	; (8004d84 <Read_ADC+0xb0>)
 8004d2e:	601a      	str	r2, [r3, #0]
		cell_2_voltage = adc[2];
 8004d30:	4b10      	ldr	r3, [pc, #64]	; (8004d74 <Read_ADC+0xa0>)
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	0018      	movs	r0, r3
 8004d36:	f7fb fd57 	bl	80007e8 <__aeabi_ui2f>
 8004d3a:	1c02      	adds	r2, r0, #0
 8004d3c:	4b12      	ldr	r3, [pc, #72]	; (8004d88 <Read_ADC+0xb4>)
 8004d3e:	601a      	str	r2, [r3, #0]
		cell_3_voltage = adc[3];
 8004d40:	4b0c      	ldr	r3, [pc, #48]	; (8004d74 <Read_ADC+0xa0>)
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	0018      	movs	r0, r3
 8004d46:	f7fb fd4f 	bl	80007e8 <__aeabi_ui2f>
 8004d4a:	1c02      	adds	r2, r0, #0
 8004d4c:	4b0f      	ldr	r3, [pc, #60]	; (8004d8c <Read_ADC+0xb8>)
 8004d4e:	601a      	str	r2, [r3, #0]
		cell_4_voltage = adc[4];
 8004d50:	4b08      	ldr	r3, [pc, #32]	; (8004d74 <Read_ADC+0xa0>)
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	0018      	movs	r0, r3
 8004d56:	f7fb fd47 	bl	80007e8 <__aeabi_ui2f>
 8004d5a:	1c02      	adds	r2, r0, #0
 8004d5c:	4b0c      	ldr	r3, [pc, #48]	; (8004d90 <Read_ADC+0xbc>)
 8004d5e:	601a      	str	r2, [r3, #0]

		vTaskDelay(xDelay);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	0018      	movs	r0, r3
 8004d64:	f7ff f946 	bl	8003ff4 <vTaskDelay>
		bat_voltage = (adc[0] - 3.0f)/237.0f;
 8004d68:	e7c7      	b.n	8004cfa <Read_ADC+0x26>
 8004d6a:	46c0      	nop			; (mov r8, r8)
 8004d6c:	20000dd4 	.word	0x20000dd4
 8004d70:	20000e38 	.word	0x20000e38
 8004d74:	20000e50 	.word	0x20000e50
 8004d78:	40400000 	.word	0x40400000
 8004d7c:	436d0000 	.word	0x436d0000
 8004d80:	20000dcc 	.word	0x20000dcc
 8004d84:	20000ec4 	.word	0x20000ec4
 8004d88:	20000ecc 	.word	0x20000ecc
 8004d8c:	20000ec8 	.word	0x20000ec8
 8004d90:	20000f10 	.word	0x20000f10

08004d94 <HAL_ADC_ConvCpltCallback>:
	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
	for (int i =0; i<6; i++)
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	60fb      	str	r3, [r7, #12]
 8004da0:	e00a      	b.n	8004db8 <HAL_ADC_ConvCpltCallback+0x24>
	{
	   adc[i] = buffer[i];  // store the values in adc[]
 8004da2:	4b09      	ldr	r3, [pc, #36]	; (8004dc8 <HAL_ADC_ConvCpltCallback+0x34>)
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	0092      	lsls	r2, r2, #2
 8004da8:	58d1      	ldr	r1, [r2, r3]
 8004daa:	4b08      	ldr	r3, [pc, #32]	; (8004dcc <HAL_ADC_ConvCpltCallback+0x38>)
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	0092      	lsls	r2, r2, #2
 8004db0:	50d1      	str	r1, [r2, r3]
	for (int i =0; i<6; i++)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	3301      	adds	r3, #1
 8004db6:	60fb      	str	r3, [r7, #12]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2b05      	cmp	r3, #5
 8004dbc:	ddf1      	ble.n	8004da2 <HAL_ADC_ConvCpltCallback+0xe>
	}
}
 8004dbe:	46c0      	nop			; (mov r8, r8)
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	b004      	add	sp, #16
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	46c0      	nop			; (mov r8, r8)
 8004dc8:	20000e38 	.word	0x20000e38
 8004dcc:	20000e50 	.word	0x20000e50

08004dd0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8004dd8:	2001      	movs	r0, #1
 8004dda:	f7fe fc44 	bl	8003666 <osDelay>
 8004dde:	e7fb      	b.n	8004dd8 <StartDefaultTask+0x8>

08004de0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	2380      	movs	r3, #128	; 0x80
 8004dee:	05db      	lsls	r3, r3, #23
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d101      	bne.n	8004df8 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8004df4:	f7fb fd7c 	bl	80008f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004df8:	46c0      	nop			; (mov r8, r8)
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	b002      	add	sp, #8
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004e04:	46c0      	nop			; (mov r8, r8)
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
	...

08004e0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e12:	4b12      	ldr	r3, [pc, #72]	; (8004e5c <HAL_MspInit+0x50>)
 8004e14:	4a11      	ldr	r2, [pc, #68]	; (8004e5c <HAL_MspInit+0x50>)
 8004e16:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004e18:	2101      	movs	r1, #1
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	641a      	str	r2, [r3, #64]	; 0x40
 8004e1e:	4b0f      	ldr	r3, [pc, #60]	; (8004e5c <HAL_MspInit+0x50>)
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	2201      	movs	r2, #1
 8004e24:	4013      	ands	r3, r2
 8004e26:	607b      	str	r3, [r7, #4]
 8004e28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e2a:	4b0c      	ldr	r3, [pc, #48]	; (8004e5c <HAL_MspInit+0x50>)
 8004e2c:	4a0b      	ldr	r2, [pc, #44]	; (8004e5c <HAL_MspInit+0x50>)
 8004e2e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004e30:	2180      	movs	r1, #128	; 0x80
 8004e32:	0549      	lsls	r1, r1, #21
 8004e34:	430a      	orrs	r2, r1
 8004e36:	63da      	str	r2, [r3, #60]	; 0x3c
 8004e38:	4b08      	ldr	r3, [pc, #32]	; (8004e5c <HAL_MspInit+0x50>)
 8004e3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e3c:	2380      	movs	r3, #128	; 0x80
 8004e3e:	055b      	lsls	r3, r3, #21
 8004e40:	4013      	ands	r3, r2
 8004e42:	603b      	str	r3, [r7, #0]
 8004e44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8004e46:	2302      	movs	r3, #2
 8004e48:	425b      	negs	r3, r3
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	2103      	movs	r1, #3
 8004e4e:	0018      	movs	r0, r3
 8004e50:	f7fc fd58 	bl	8001904 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e54:	46c0      	nop			; (mov r8, r8)
 8004e56:	46bd      	mov	sp, r7
 8004e58:	b002      	add	sp, #8
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	40021000 	.word	0x40021000

08004e60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b08a      	sub	sp, #40	; 0x28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e68:	2314      	movs	r3, #20
 8004e6a:	18fb      	adds	r3, r7, r3
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	2314      	movs	r3, #20
 8004e70:	001a      	movs	r2, r3
 8004e72:	2100      	movs	r1, #0
 8004e74:	f000 f9c6 	bl	8005204 <memset>
  if(hadc->Instance==ADC1)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a2f      	ldr	r2, [pc, #188]	; (8004f3c <HAL_ADC_MspInit+0xdc>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d158      	bne.n	8004f34 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004e82:	4b2f      	ldr	r3, [pc, #188]	; (8004f40 <HAL_ADC_MspInit+0xe0>)
 8004e84:	4a2e      	ldr	r2, [pc, #184]	; (8004f40 <HAL_ADC_MspInit+0xe0>)
 8004e86:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004e88:	2180      	movs	r1, #128	; 0x80
 8004e8a:	0349      	lsls	r1, r1, #13
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	641a      	str	r2, [r3, #64]	; 0x40
 8004e90:	4b2b      	ldr	r3, [pc, #172]	; (8004f40 <HAL_ADC_MspInit+0xe0>)
 8004e92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e94:	2380      	movs	r3, #128	; 0x80
 8004e96:	035b      	lsls	r3, r3, #13
 8004e98:	4013      	ands	r3, r2
 8004e9a:	613b      	str	r3, [r7, #16]
 8004e9c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e9e:	4b28      	ldr	r3, [pc, #160]	; (8004f40 <HAL_ADC_MspInit+0xe0>)
 8004ea0:	4a27      	ldr	r2, [pc, #156]	; (8004f40 <HAL_ADC_MspInit+0xe0>)
 8004ea2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	635a      	str	r2, [r3, #52]	; 0x34
 8004eaa:	4b25      	ldr	r3, [pc, #148]	; (8004f40 <HAL_ADC_MspInit+0xe0>)
 8004eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eae:	2201      	movs	r2, #1
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	60fb      	str	r3, [r7, #12]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = Cell_4S_ADC_Pin|Cell_3S_ADC_Pin|Cell_2S_ADC_Pin|Cell_1S_ADC_Pin 
 8004eb6:	2314      	movs	r3, #20
 8004eb8:	18fb      	adds	r3, r7, r3
 8004eba:	221f      	movs	r2, #31
 8004ebc:	601a      	str	r2, [r3, #0]
                          |BAT_ADC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ebe:	2314      	movs	r3, #20
 8004ec0:	18fb      	adds	r3, r7, r3
 8004ec2:	2203      	movs	r2, #3
 8004ec4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec6:	2314      	movs	r3, #20
 8004ec8:	18fb      	adds	r3, r7, r3
 8004eca:	2200      	movs	r2, #0
 8004ecc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ece:	2314      	movs	r3, #20
 8004ed0:	18fa      	adds	r2, r7, r3
 8004ed2:	23a0      	movs	r3, #160	; 0xa0
 8004ed4:	05db      	lsls	r3, r3, #23
 8004ed6:	0011      	movs	r1, r2
 8004ed8:	0018      	movs	r0, r3
 8004eda:	f7fc ff9d 	bl	8001e18 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004ede:	4b19      	ldr	r3, [pc, #100]	; (8004f44 <HAL_ADC_MspInit+0xe4>)
 8004ee0:	4a19      	ldr	r2, [pc, #100]	; (8004f48 <HAL_ADC_MspInit+0xe8>)
 8004ee2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004ee4:	4b17      	ldr	r3, [pc, #92]	; (8004f44 <HAL_ADC_MspInit+0xe4>)
 8004ee6:	2205      	movs	r2, #5
 8004ee8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004eea:	4b16      	ldr	r3, [pc, #88]	; (8004f44 <HAL_ADC_MspInit+0xe4>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ef0:	4b14      	ldr	r3, [pc, #80]	; (8004f44 <HAL_ADC_MspInit+0xe4>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004ef6:	4b13      	ldr	r3, [pc, #76]	; (8004f44 <HAL_ADC_MspInit+0xe4>)
 8004ef8:	2280      	movs	r2, #128	; 0x80
 8004efa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004efc:	4b11      	ldr	r3, [pc, #68]	; (8004f44 <HAL_ADC_MspInit+0xe4>)
 8004efe:	2280      	movs	r2, #128	; 0x80
 8004f00:	0092      	lsls	r2, r2, #2
 8004f02:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004f04:	4b0f      	ldr	r3, [pc, #60]	; (8004f44 <HAL_ADC_MspInit+0xe4>)
 8004f06:	2280      	movs	r2, #128	; 0x80
 8004f08:	0112      	lsls	r2, r2, #4
 8004f0a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004f0c:	4b0d      	ldr	r3, [pc, #52]	; (8004f44 <HAL_ADC_MspInit+0xe4>)
 8004f0e:	2220      	movs	r2, #32
 8004f10:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004f12:	4b0c      	ldr	r3, [pc, #48]	; (8004f44 <HAL_ADC_MspInit+0xe4>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004f18:	4b0a      	ldr	r3, [pc, #40]	; (8004f44 <HAL_ADC_MspInit+0xe4>)
 8004f1a:	0018      	movs	r0, r3
 8004f1c:	f7fc fd18 	bl	8001950 <HAL_DMA_Init>
 8004f20:	1e03      	subs	r3, r0, #0
 8004f22:	d001      	beq.n	8004f28 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8004f24:	f7ff ff6c 	bl	8004e00 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a06      	ldr	r2, [pc, #24]	; (8004f44 <HAL_ADC_MspInit+0xe4>)
 8004f2c:	651a      	str	r2, [r3, #80]	; 0x50
 8004f2e:	4b05      	ldr	r3, [pc, #20]	; (8004f44 <HAL_ADC_MspInit+0xe4>)
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004f34:	46c0      	nop			; (mov r8, r8)
 8004f36:	46bd      	mov	sp, r7
 8004f38:	b00a      	add	sp, #40	; 0x28
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	40012400 	.word	0x40012400
 8004f40:	40021000 	.word	0x40021000
 8004f44:	20000e68 	.word	0x20000e68
 8004f48:	40020008 	.word	0x40020008

08004f4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b08a      	sub	sp, #40	; 0x28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f54:	2314      	movs	r3, #20
 8004f56:	18fb      	adds	r3, r7, r3
 8004f58:	0018      	movs	r0, r3
 8004f5a:	2314      	movs	r3, #20
 8004f5c:	001a      	movs	r2, r3
 8004f5e:	2100      	movs	r1, #0
 8004f60:	f000 f950 	bl	8005204 <memset>
  if(hi2c->Instance==I2C1)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a1d      	ldr	r2, [pc, #116]	; (8004fe0 <HAL_I2C_MspInit+0x94>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d134      	bne.n	8004fd8 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f6e:	4b1d      	ldr	r3, [pc, #116]	; (8004fe4 <HAL_I2C_MspInit+0x98>)
 8004f70:	4a1c      	ldr	r2, [pc, #112]	; (8004fe4 <HAL_I2C_MspInit+0x98>)
 8004f72:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f74:	2102      	movs	r1, #2
 8004f76:	430a      	orrs	r2, r1
 8004f78:	635a      	str	r2, [r3, #52]	; 0x34
 8004f7a:	4b1a      	ldr	r3, [pc, #104]	; (8004fe4 <HAL_I2C_MspInit+0x98>)
 8004f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f7e:	2202      	movs	r2, #2
 8004f80:	4013      	ands	r3, r2
 8004f82:	613b      	str	r3, [r7, #16]
 8004f84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004f86:	2314      	movs	r3, #20
 8004f88:	18fb      	adds	r3, r7, r3
 8004f8a:	22c0      	movs	r2, #192	; 0xc0
 8004f8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f8e:	2314      	movs	r3, #20
 8004f90:	18fb      	adds	r3, r7, r3
 8004f92:	2212      	movs	r2, #18
 8004f94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f96:	2314      	movs	r3, #20
 8004f98:	18fb      	adds	r3, r7, r3
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f9e:	2314      	movs	r3, #20
 8004fa0:	18fb      	adds	r3, r7, r3
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8004fa6:	2314      	movs	r3, #20
 8004fa8:	18fb      	adds	r3, r7, r3
 8004faa:	2206      	movs	r2, #6
 8004fac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fae:	2314      	movs	r3, #20
 8004fb0:	18fb      	adds	r3, r7, r3
 8004fb2:	4a0d      	ldr	r2, [pc, #52]	; (8004fe8 <HAL_I2C_MspInit+0x9c>)
 8004fb4:	0019      	movs	r1, r3
 8004fb6:	0010      	movs	r0, r2
 8004fb8:	f7fc ff2e 	bl	8001e18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004fbc:	4b09      	ldr	r3, [pc, #36]	; (8004fe4 <HAL_I2C_MspInit+0x98>)
 8004fbe:	4a09      	ldr	r2, [pc, #36]	; (8004fe4 <HAL_I2C_MspInit+0x98>)
 8004fc0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004fc2:	2180      	movs	r1, #128	; 0x80
 8004fc4:	0389      	lsls	r1, r1, #14
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	63da      	str	r2, [r3, #60]	; 0x3c
 8004fca:	4b06      	ldr	r3, [pc, #24]	; (8004fe4 <HAL_I2C_MspInit+0x98>)
 8004fcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fce:	2380      	movs	r3, #128	; 0x80
 8004fd0:	039b      	lsls	r3, r3, #14
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	60fb      	str	r3, [r7, #12]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004fd8:	46c0      	nop			; (mov r8, r8)
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	b00a      	add	sp, #40	; 0x28
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	40005400 	.word	0x40005400
 8004fe4:	40021000 	.word	0x40021000
 8004fe8:	50000400 	.word	0x50000400

08004fec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM7)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a0d      	ldr	r2, [pc, #52]	; (8005030 <HAL_TIM_Base_MspInit+0x44>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d113      	bne.n	8005026 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004ffe:	4b0d      	ldr	r3, [pc, #52]	; (8005034 <HAL_TIM_Base_MspInit+0x48>)
 8005000:	4a0c      	ldr	r2, [pc, #48]	; (8005034 <HAL_TIM_Base_MspInit+0x48>)
 8005002:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005004:	2120      	movs	r1, #32
 8005006:	430a      	orrs	r2, r1
 8005008:	63da      	str	r2, [r3, #60]	; 0x3c
 800500a:	4b0a      	ldr	r3, [pc, #40]	; (8005034 <HAL_TIM_Base_MspInit+0x48>)
 800500c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500e:	2220      	movs	r2, #32
 8005010:	4013      	ands	r3, r2
 8005012:	60fb      	str	r3, [r7, #12]
 8005014:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_LPTIM2_IRQn, 3, 0);
 8005016:	2200      	movs	r2, #0
 8005018:	2103      	movs	r1, #3
 800501a:	2012      	movs	r0, #18
 800501c:	f7fc fc72 	bl	8001904 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_LPTIM2_IRQn);
 8005020:	2012      	movs	r0, #18
 8005022:	f7fc fc85 	bl	8001930 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8005026:	46c0      	nop			; (mov r8, r8)
 8005028:	46bd      	mov	sp, r7
 800502a:	b004      	add	sp, #16
 800502c:	bd80      	pop	{r7, pc}
 800502e:	46c0      	nop			; (mov r8, r8)
 8005030:	40001400 	.word	0x40001400
 8005034:	40021000 	.word	0x40021000

08005038 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b08a      	sub	sp, #40	; 0x28
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005040:	2300      	movs	r3, #0
 8005042:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8005044:	2300      	movs	r3, #0
 8005046:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	0019      	movs	r1, r3
 800504e:	200f      	movs	r0, #15
 8005050:	f7fc fc58 	bl	8001904 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8005054:	200f      	movs	r0, #15
 8005056:	f7fc fc6b 	bl	8001930 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800505a:	4b20      	ldr	r3, [pc, #128]	; (80050dc <HAL_InitTick+0xa4>)
 800505c:	4a1f      	ldr	r2, [pc, #124]	; (80050dc <HAL_InitTick+0xa4>)
 800505e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005060:	2101      	movs	r1, #1
 8005062:	430a      	orrs	r2, r1
 8005064:	63da      	str	r2, [r3, #60]	; 0x3c
 8005066:	4b1d      	ldr	r3, [pc, #116]	; (80050dc <HAL_InitTick+0xa4>)
 8005068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800506a:	2201      	movs	r2, #1
 800506c:	4013      	ands	r3, r2
 800506e:	60bb      	str	r3, [r7, #8]
 8005070:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005072:	230c      	movs	r3, #12
 8005074:	18fa      	adds	r2, r7, r3
 8005076:	2310      	movs	r3, #16
 8005078:	18fb      	adds	r3, r7, r3
 800507a:	0011      	movs	r1, r2
 800507c:	0018      	movs	r0, r3
 800507e:	f7fd fe39 	bl	8002cf4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005082:	f7fd fe1f 	bl	8002cc4 <HAL_RCC_GetPCLK1Freq>
 8005086:	0003      	movs	r3, r0
 8005088:	627b      	str	r3, [r7, #36]	; 0x24
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	4914      	ldr	r1, [pc, #80]	; (80050e0 <HAL_InitTick+0xa8>)
 800508e:	0018      	movs	r0, r3
 8005090:	f7fb f83a 	bl	8000108 <__udivsi3>
 8005094:	0003      	movs	r3, r0
 8005096:	3b01      	subs	r3, #1
 8005098:	623b      	str	r3, [r7, #32]
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800509a:	4b12      	ldr	r3, [pc, #72]	; (80050e4 <HAL_InitTick+0xac>)
 800509c:	2280      	movs	r2, #128	; 0x80
 800509e:	05d2      	lsls	r2, r2, #23
 80050a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 80050a2:	4b10      	ldr	r3, [pc, #64]	; (80050e4 <HAL_InitTick+0xac>)
 80050a4:	4a10      	ldr	r2, [pc, #64]	; (80050e8 <HAL_InitTick+0xb0>)
 80050a6:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80050a8:	4b0e      	ldr	r3, [pc, #56]	; (80050e4 <HAL_InitTick+0xac>)
 80050aa:	6a3a      	ldr	r2, [r7, #32]
 80050ac:	605a      	str	r2, [r3, #4]
  htim2.Init.ClockDivision = 0;
 80050ae:	4b0d      	ldr	r3, [pc, #52]	; (80050e4 <HAL_InitTick+0xac>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80050b4:	4b0b      	ldr	r3, [pc, #44]	; (80050e4 <HAL_InitTick+0xac>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80050ba:	4b0a      	ldr	r3, [pc, #40]	; (80050e4 <HAL_InitTick+0xac>)
 80050bc:	0018      	movs	r0, r3
 80050be:	f7fd fff3 	bl	80030a8 <HAL_TIM_Base_Init>
 80050c2:	1e03      	subs	r3, r0, #0
 80050c4:	d105      	bne.n	80050d2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80050c6:	4b07      	ldr	r3, [pc, #28]	; (80050e4 <HAL_InitTick+0xac>)
 80050c8:	0018      	movs	r0, r3
 80050ca:	f7fe f819 	bl	8003100 <HAL_TIM_Base_Start_IT>
 80050ce:	0003      	movs	r3, r0
 80050d0:	e000      	b.n	80050d4 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
}
 80050d4:	0018      	movs	r0, r3
 80050d6:	46bd      	mov	sp, r7
 80050d8:	b00a      	add	sp, #40	; 0x28
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	40021000 	.word	0x40021000
 80050e0:	000f4240 	.word	0x000f4240
 80050e4:	20000f14 	.word	0x20000f14
 80050e8:	000003e7 	.word	0x000003e7

080050ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80050f0:	46c0      	nop			; (mov r8, r8)
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80050fa:	e7fe      	b.n	80050fa <HardFault_Handler+0x4>

080050fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005100:	4b03      	ldr	r3, [pc, #12]	; (8005110 <DMA1_Channel1_IRQHandler+0x14>)
 8005102:	0018      	movs	r0, r3
 8005104:	f7fc fd42 	bl	8001b8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005108:	46c0      	nop			; (mov r8, r8)
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	46c0      	nop			; (mov r8, r8)
 8005110:	20000e68 	.word	0x20000e68

08005114 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005118:	4b03      	ldr	r3, [pc, #12]	; (8005128 <TIM2_IRQHandler+0x14>)
 800511a:	0018      	movs	r0, r3
 800511c:	f7fe f81a 	bl	8003154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005120:	46c0      	nop			; (mov r8, r8)
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	46c0      	nop			; (mov r8, r8)
 8005128:	20000f14 	.word	0x20000f14

0800512c <TIM7_LPTIM2_IRQHandler>:

/**
  * @brief This function handles TIM7 and LPTIM2 interrupts (LPTIM2 interrupt through EXTI line 30).
  */
void TIM7_LPTIM2_IRQHandler(void)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 0 */

  /* USER CODE END TIM7_LPTIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005130:	4b05      	ldr	r3, [pc, #20]	; (8005148 <TIM7_LPTIM2_IRQHandler+0x1c>)
 8005132:	0018      	movs	r0, r3
 8005134:	f7fe f80e 	bl	8003154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 1 */

  /* Increment the counter used to measure execution time */
  ulHighFrequencyTimerTicks++;
 8005138:	4b04      	ldr	r3, [pc, #16]	; (800514c <TIM7_LPTIM2_IRQHandler+0x20>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	1c5a      	adds	r2, r3, #1
 800513e:	4b03      	ldr	r3, [pc, #12]	; (800514c <TIM7_LPTIM2_IRQHandler+0x20>)
 8005140:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM7_LPTIM2_IRQn 1 */
}
 8005142:	46c0      	nop			; (mov r8, r8)
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	20000ed0 	.word	0x20000ed0
 800514c:	20000d74 	.word	0x20000d74

08005150 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005154:	4b03      	ldr	r3, [pc, #12]	; (8005164 <SystemInit+0x14>)
 8005156:	2280      	movs	r2, #128	; 0x80
 8005158:	0512      	lsls	r2, r2, #20
 800515a:	609a      	str	r2, [r3, #8]
#endif
}
 800515c:	46c0      	nop			; (mov r8, r8)
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	46c0      	nop			; (mov r8, r8)
 8005164:	e000ed00 	.word	0xe000ed00

08005168 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005168:	480d      	ldr	r0, [pc, #52]	; (80051a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800516a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800516c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800516e:	e003      	b.n	8005178 <LoopCopyDataInit>

08005170 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005170:	4b0c      	ldr	r3, [pc, #48]	; (80051a4 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8005172:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005174:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005176:	3104      	adds	r1, #4

08005178 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005178:	480b      	ldr	r0, [pc, #44]	; (80051a8 <LoopForever+0xa>)
  ldr r3, =_edata
 800517a:	4b0c      	ldr	r3, [pc, #48]	; (80051ac <LoopForever+0xe>)
  adds r2, r0, r1
 800517c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800517e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005180:	d3f6      	bcc.n	8005170 <CopyDataInit>
  ldr r2, =_sbss
 8005182:	4a0b      	ldr	r2, [pc, #44]	; (80051b0 <LoopForever+0x12>)
  b LoopFillZerobss
 8005184:	e002      	b.n	800518c <LoopFillZerobss>

08005186 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005186:	2300      	movs	r3, #0
  str  r3, [r2]
 8005188:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800518a:	3204      	adds	r2, #4

0800518c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800518c:	4b09      	ldr	r3, [pc, #36]	; (80051b4 <LoopForever+0x16>)
  cmp r2, r3
 800518e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005190:	d3f9      	bcc.n	8005186 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005192:	f7ff ffdd 	bl	8005150 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005196:	f000 f811 	bl	80051bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800519a:	f7ff fa69 	bl	8004670 <main>

0800519e <LoopForever>:

LoopForever:
    b LoopForever
 800519e:	e7fe      	b.n	800519e <LoopForever>
  ldr   r0, =_estack
 80051a0:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 80051a4:	08005354 	.word	0x08005354
  ldr r0, =_sdata
 80051a8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80051ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80051b0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80051b4:	20000f54 	.word	0x20000f54

080051b8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80051b8:	e7fe      	b.n	80051b8 <ADC1_COMP_IRQHandler>
	...

080051bc <__libc_init_array>:
 80051bc:	b570      	push	{r4, r5, r6, lr}
 80051be:	2600      	movs	r6, #0
 80051c0:	4d0c      	ldr	r5, [pc, #48]	; (80051f4 <__libc_init_array+0x38>)
 80051c2:	4c0d      	ldr	r4, [pc, #52]	; (80051f8 <__libc_init_array+0x3c>)
 80051c4:	1b64      	subs	r4, r4, r5
 80051c6:	10a4      	asrs	r4, r4, #2
 80051c8:	42a6      	cmp	r6, r4
 80051ca:	d109      	bne.n	80051e0 <__libc_init_array+0x24>
 80051cc:	2600      	movs	r6, #0
 80051ce:	f000 f821 	bl	8005214 <_init>
 80051d2:	4d0a      	ldr	r5, [pc, #40]	; (80051fc <__libc_init_array+0x40>)
 80051d4:	4c0a      	ldr	r4, [pc, #40]	; (8005200 <__libc_init_array+0x44>)
 80051d6:	1b64      	subs	r4, r4, r5
 80051d8:	10a4      	asrs	r4, r4, #2
 80051da:	42a6      	cmp	r6, r4
 80051dc:	d105      	bne.n	80051ea <__libc_init_array+0x2e>
 80051de:	bd70      	pop	{r4, r5, r6, pc}
 80051e0:	00b3      	lsls	r3, r6, #2
 80051e2:	58eb      	ldr	r3, [r5, r3]
 80051e4:	4798      	blx	r3
 80051e6:	3601      	adds	r6, #1
 80051e8:	e7ee      	b.n	80051c8 <__libc_init_array+0xc>
 80051ea:	00b3      	lsls	r3, r6, #2
 80051ec:	58eb      	ldr	r3, [r5, r3]
 80051ee:	4798      	blx	r3
 80051f0:	3601      	adds	r6, #1
 80051f2:	e7f2      	b.n	80051da <__libc_init_array+0x1e>
 80051f4:	0800534c 	.word	0x0800534c
 80051f8:	0800534c 	.word	0x0800534c
 80051fc:	0800534c 	.word	0x0800534c
 8005200:	08005350 	.word	0x08005350

08005204 <memset>:
 8005204:	0003      	movs	r3, r0
 8005206:	1882      	adds	r2, r0, r2
 8005208:	4293      	cmp	r3, r2
 800520a:	d100      	bne.n	800520e <memset+0xa>
 800520c:	4770      	bx	lr
 800520e:	7019      	strb	r1, [r3, #0]
 8005210:	3301      	adds	r3, #1
 8005212:	e7f9      	b.n	8005208 <memset+0x4>

08005214 <_init>:
 8005214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005216:	46c0      	nop			; (mov r8, r8)
 8005218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800521a:	bc08      	pop	{r3}
 800521c:	469e      	mov	lr, r3
 800521e:	4770      	bx	lr

08005220 <_fini>:
 8005220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005222:	46c0      	nop			; (mov r8, r8)
 8005224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005226:	bc08      	pop	{r3}
 8005228:	469e      	mov	lr, r3
 800522a:	4770      	bx	lr
